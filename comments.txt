C:\Users\muvva\Desktop\testing\15-minute-apps-master\browser_tabbed\browser_tabbed.py
        # correct tab
        browser.urlChanged.connect(lambda qurl, browser=browser:
                                   self.update_urlbar(qurl, browser))
#########################################################################################
C:\Users\muvva\Desktop\testing\15-minute-apps-master\calculator\calculator.py
        # Setup operations.
        self.pushButton_add.pressed.connect(lambda: self.operation(operator.add))
        self.pushButton_sub.pressed.connect(lambda: self.operation(operator.sub))
#########################################################################################
C:\Users\muvva\Desktop\testing\15-minute-apps-master\paint\paint.py
        # Setup the color selection buttons.
        self.primaryButton.pressed.connect(lambda: self.choose_color(self.set_primary_color))
        self.secondaryButton.pressed.connect(lambda: self.choose_color(self.set_secondary_color))
#########################################################################################
C:\Users\muvva\Desktop\testing\15-minute-apps-master\wordprocessor\wordprocessor.py
        # and set as the pointsize. We could also use the index + retrieve from FONT_SIZES.
        self.fontsize.currentIndexChanged[str].connect(lambda s: self.editor.setFontPointSize(float(s)) )
        format_toolbar.addWidget(self.fontsize)
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\scripts\readme.py
    toAppend = toAppend + '### ' + EMOJIS[category] + ' ' + title_case(category) +'\n\n<details><summary>View contents</summary> <ul>'
    for snippet in sorted(tag_dict[category],key=lambda snippet : snippet.name):
        toAppend += f'<li><a href = "#{snippet.name}"><code>{snippet.name}</code></a></li>\n'
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\jinja2\lexer.py
        # shortcuts
        c = lambda x: re.compile(x, re.M | re.S)
        e = re.escape
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\jinja2\runtime.py
#: the identity function.  Useful for certain things in the environment
identity = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\jinja2\utils.py
# special singleton representing missing values for the runtime
missing = type('MissingType', (), {'__repr__': lambda x: 'missing'})()

#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\utils\ui.py
            # add it.
            self.file.isatty = lambda: self.file.wrapped.isatty()
            # The progress code expects to be able to call self.file.flush()
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\utils\ui.py
            # add it.
            self.file.flush = lambda: self.file.wrapped.flush()

#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\distlib\locators.py
        # to the front
        result = sorted(result, key=lambda t: t[0], reverse=True)
        return result
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\distlib\version.py
        # by default, compatible => >=.
        '~=': lambda v, c, p: v == c or v > c,
        '!=': lambda v, c, p: v != c,
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\distlib\_backport\tarfile.py
        # Reverse sort directories.
        directories.sort(key=lambda a: a.name)
        directories.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\pyparsing.py
            xmlcharref = Regex('&#\d+;')
            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
            return xmlcharref.transformString(ret)
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\pyparsing.py
    #~ if func in singleArgBuiltins:
        #~ return lambda s,l,t: func(t)
    #~ limit = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\pyparsing.py
            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\pyparsing.py
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pip\_vendor\retrying.py
        # wait behavior
        wait_funcs = [lambda *args, **kwargs: 0]
        if wait_fixed is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pkg_resources\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pkg_resources\_vendor\pyparsing.py
            xmlcharref = Regex('&#\d+;')
            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
            return xmlcharref.transformString(ret)
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pkg_resources\_vendor\pyparsing.py
    #~ if func in singleArgBuiltins:
        #~ return lambda s,l,t: func(t)
    #~ limit = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pkg_resources\_vendor\pyparsing.py
            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pkg_resources\_vendor\pyparsing.py
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\pycparser\ply\yacc.py
        # p functions
        p_functions.sort(key=lambda p_function: (
            p_function[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\setuptools\archive_util.py
        # don't do any chowning!
        tarobj.chown = lambda *args: None
        for member in tarobj:
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\werkzeug\local.py
    __cmp__ = lambda x, o: cmp(x._get_current_object(), o)  # noqa
    __hash__ = lambda x: hash(x._get_current_object())
    __call__ = lambda x, *a, **kw: x._get_current_object()(*a, **kw)
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\werkzeug\local.py
    __long__ = lambda x: long(x._get_current_object())  # noqa
    __float__ = lambda x: float(x._get_current_object())
    __oct__ = lambda x: oct(x._get_current_object())
#########################################################################################
C:\Users\muvva\Desktop\testing\30-seconds-of-python-code-master\website\web\Lib\site-packages\werkzeug\posixemulation.py
if os.name == 'nt':  # pragma: no cover
    _rename = lambda src, dst: False
    _rename_atomic = lambda src, dst: False
#########################################################################################
C:\Users\muvva\Desktop\testing\3DDFA-master\utils\inference.py
            # close eyes and mouths
            plot_close = lambda i1, i2: plt.plot([pts[i][0, i1], pts[i][0, i2]], [pts[i][1, i1], pts[i][1, i2]],
                                                 color=color, lw=lw, alpha=alpha - 0.1)
#########################################################################################
C:\Users\muvva\Desktop\testing\ActualVim-master\lib\asyncio\coroutines.py
    # Python 3.4
    _inspect_iscoroutinefunction = lambda func: False

#########################################################################################
C:\Users\muvva\Desktop\testing\ActualVim-master\lib\asyncio\unix_events.py
    # Python 3.5 or earlier
    _fspath = lambda path: path

#########################################################################################
C:\Users\muvva\Desktop\testing\ActualVim-master\lib\neovim\plugin\decorators.py
    # the class initializer will already receive the nvim object.
    predicate = lambda fn: hasattr(fn, '_nvim_bind')
    for _, fn in inspect.getmembers(cls, predicate):
#########################################################################################
C:\Users\muvva\Desktop\testing\adanet-master\adanet\core\estimator.py
    tf.estimator.Estimator._assert_members_are_not_overridden = staticmethod(  # pylint: disable=protected-access
        lambda _: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\adanet-master\adanet\core\tpu_estimator.py
        # ops that do not work on TPU.
        scaffold_fn=lambda: tf.train.Scaffold(summary_op=tf.constant("")),
        training_hooks=self._decorate_hooks(
#########################################################################################
C:\Users\muvva\Desktop\testing\adanet-master\adanet\ensemble\weighted.py
    # Note: Unsafe comparison against float zero.
    if self._adanet_lambda == 0. and self._adanet_beta == 0.:
      return tf.constant(0., name="zero")
#########################################################################################
C:\Users\muvva\Desktop\testing\ajenti-master\ajenti-core\aj\core.py
    # and _() is here only for string extraction
    __builtins__['_'] = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\ajenti-master\ajenti-core\aj\core.py
    # Fix stupid socketio bug (it tries to do *args[0][0])
    socket.socket.__getitem__ = lambda x, y: None

#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\algorithms\dp\job_scheduling.py
    # Sort jobs according to finish time
    job = sorted(job, key = lambda j: j.finish)
 
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\algorithms\graph\minimum_spanning_tree.py
    #   After repeat this until select n-1 edges, we will have the complete MST.
    edges.sort(key=lambda edge: edge.weight)

#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\algorithms\strings\breaking_bad.py
    # reversely sort the symbols according to their lengths.
    symbols = sorted(symbols, key=lambda _: len(_), reverse=True)
    for word in words:
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\tests\test_array.py
        self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], 0,  # noqa: E501
                               sum_closure=lambda a, b: a[0] + b[0]),  # noqa: E501
                         [[[-3, 0], [3, 3]], [[-2, 1], [2, 2]]])  # noqa: E501
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\tests\test_array.py
        self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], [0, 3],  # noqa: E501
                               sum_closure=lambda a, b: [a[0] + b[0], a[1] + b[1]],  # noqa: E501
                               same_closure=lambda a, b: a[0] == b[0] and a[1] == b[1]),  # noqa: E501
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\tests\test_array.py
                               sum_closure=lambda a, b: [a[0] + b[0], a[1] + b[1]],  # noqa: E501
                               same_closure=lambda a, b: a[0] == b[0] and a[1] == b[1]),  # noqa: E501
                         [[[-3, 0], [3, 3]], [[-2, 1], [2, 2]]])  # noqa: E501
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\tests\test_array.py
        self.assertEqual(n_sum(2, [[-3, 0], [-2, 1], [2, 2], [3, 3], [8, 4], [-9, 5]], -5,  # noqa: E501
                               sum_closure=lambda a, b: [a[0] + b[1], a[1] + b[0]],  # noqa: E501
                               compare_closure=lambda a, b: -1 if a[0] < b else 1 if a[0] > b else 0),  # noqa: E501
#########################################################################################
C:\Users\muvva\Desktop\testing\Algorithms-master\tests\test_array.py
                               sum_closure=lambda a, b: [a[0] + b[1], a[1] + b[0]],  # noqa: E501
                               compare_closure=lambda a, b: -1 if a[0] < b else 1 if a[0] > b else 0),  # noqa: E501
                         [[[-9, 5], [8, 4]]])  # noqa: E501
#########################################################################################
C:\Users\muvva\Desktop\testing\altair-master\altair\utils\core.py
            # (see https://github.com/altair-viz/altair/issues/1027)
            df[col_name] = df[col_name].apply(lambda x: x.isoformat()).replace('NaT', '')
        elif str(dtype).startswith('timedelta'):
#########################################################################################
C:\Users\muvva\Desktop\testing\altair-master\altair\utils\server.py
        # Use a thread to open a web browser pointing to the server
        b = lambda: webbrowser.open('http://{}:{}'.format(ip, port))
        threading.Thread(target=b).start()
#########################################################################################
C:\Users\muvva\Desktop\testing\altair-master\altair\utils\tests\test_plugin_registry.py
    # we need some default plugin, but we won't do anything with it
    plugins.register('default', lambda x: x)
    plugins.enable('default')
#########################################################################################
C:\Users\muvva\Desktop\testing\anaconda-master\anaconda_lib\autopep\autopep8_lib\autopep8.py
PYTHON_SHEBANG_REGEX = re.compile(r'^#!.*\bpython[23]?\b\s*$')
LAMBDA_REGEX = re.compile(r'([\w.]+)\s=\slambda\s*([\(\)\w,\s.]*):')
COMPARE_NEGATIVE_REGEX = re.compile(r'\b(not)\s+([^][)(}{]+)\s+(in|is)\s')
#########################################################################################
C:\Users\muvva\Desktop\testing\anaconda-master\anaconda_lib\autopep\autopep8_lib\lib2to3\fixes\fix_tuple_params.py
    # The parens are a syntax error in Python 3
    lambda (x): x + y -> lambda x: x + y
"""
#########################################################################################
C:\Users\muvva\Desktop\testing\anaconda-master\anaconda_lib\jedi\api\helpers.py
    # Note: `or ''` below is required because `module_path` could be
    return sorted(defs, key=lambda x: (x.module_path or '', x.line or 0, x.column or 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\anaconda-master\anaconda_lib\jedi\evaluate\compiled\__init__.py
    path = None  # modules have this attribute - set it to None.
    used_names = lambda self: {}  # To be consistent with modules.

#########################################################################################
C:\Users\muvva\Desktop\testing\anaconda-master\anaconda_lib\linting\pycodestyle.py
             counts['('] <= counts[')'])):    # (annotation)
            lambda_kw = LAMBDA_REGEX.search(line, 0, found)
            if lambda_kw:
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\AppriseAsset.py
        # Acquire our path
        path = re_table.sub(lambda x: re_map[x.group()], self.image_path_mask)
        if must_exist and not isfile(path):
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifyMatrix.py
        title = self._re_slack_formatting_rules.sub(  # pragma: no branch
            lambda x: self._re_slack_formatting_map[x.group()], title,
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifyMatrix.py
        body = self._re_slack_formatting_rules.sub(  # pragma: no branch
            lambda x: self._re_slack_formatting_map[x.group()], body,
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifyRyver.py
            title = self._re_formatting_rules.sub(  # pragma: no branch
                lambda x: self._re_formatting_map[x.group()], title,
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifyRyver.py
            body = self._re_formatting_rules.sub(  # pragma: no branch
                lambda x: self._re_formatting_map[x.group()], body,
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifySlack.py
        title = self._re_formatting_rules.sub(  # pragma: no branch
            lambda x: self._re_formatting_map[x.group()], title,
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\apprise-master\apprise\plugins\NotifySlack.py
        body = self._re_formatting_rules.sub(  # pragma: no branch
            lambda x: self._re_formatting_map[x.group()], body,
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\apscheduler-master\examples\schedulers\qt.py
    # This enables processing of Ctrl+C keypresses
    signal.signal(signal.SIGINT, lambda *args: QApplication.quit())

#########################################################################################
C:\Users\muvva\Desktop\testing\arctic-master\arctic\chunkstore\tools\tools.py
        # group by chunk
        for _, segments in groupby(cursor, key=lambda x: (x[START], x[SYMBOL])):
            segments = list(segments)
#########################################################################################
C:\Users\muvva\Desktop\testing\arctic-master\arctic\store\_ndarray_store.py
        # missing float columns should default to nan rather than zero
        _is_float_type = lambda _dtype: _dtype.type in (np.float32, np.float64)
        _is_void_float_type = lambda _dtype: _dtype.type == np.void and _is_float_type(_dtype.subdtype[0])
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\data\titanic\myfirstforest.py
Ports_dict = { name : i for i, name in Ports }              # set up a dictionary in the form  Ports : index
train_df.Embarked = train_df.Embarked.map( lambda x: Ports_dict[x]).astype(int)     # Convert all Embark strings to int

#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\data\titanic\myfirstforest.py
# Again convert all Embarked strings to int
test_df.Embarked = test_df.Embarked.map( lambda x: Ports_dict[x]).astype(int)

#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\1-pixel-attack\attack.py
        # Format the predict/callback functions for the differential evolution algorithm
        predict_fn = lambda xs: self.predict_classes(
            xs, self.x_test[img], target_class, model, target is None)
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\1-pixel-attack\helper.py
#     imagenet_urls = pd.read_csv('data/imagenet_urls.txt', delimiter='\t', names=['label', 'url'])
#     imagenet_urls['label'], imagenet_urls['id'] = zip(*imagenet_urls.label.apply(lambda x: x.split('_')))
#     imagenet_urls.label = imagenet_urls.label.apply(lambda wid: wid_to_id[wid])
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\1-pixel-attack\helper.py
#     imagenet_urls['label'], imagenet_urls['id'] = zip(*imagenet_urls.label.apply(lambda x: x.split('_')))
#     imagenet_urls.label = imagenet_urls.label.apply(lambda wid: wid_to_id[wid])

#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\1-pixel-attack\networks\capsulenet\capsulelayers.py
        # inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = tf.scan(lambda ac, x: K.batch_dot(x, self.W, [3, 2]),
                             elems=inputs_tiled,
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\1-pixel-attack\networks\capsulenet\capsule_layers.py
        # inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = tf.scan(lambda ac, x: K.batch_dot(x, self.W, [3, 2]),
                             elems=inputs_tiled,
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\Keras_Implementation\capsLayers.py
        # inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = tf.scan(lambda ac, x: K.batch_dot(x, self.W, [3, 2]),
                             elems=inputs_tiled,
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\TensorFlow_Implementation\capsNet.py
        # [batch_size, 10], element-wise multiply
        L_c = T_c * max_l + cfg.lambda_val * (1 - T_c) * max_r

#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\TensorFlow_Implementation\Lung-Cancer-Detection\capsLayer.py
    # tf.scan, 3 iter, 1080ti, 128 batch size: 10min/epoch
    # u_hat = tf.scan(lambda ac, x: tf.matmul(W, x, transpose_a=True), input, initializer=tf.zeros([1152, 10, 16, 1]))
    # tf.tile, 3 iter, 1080ti, 128 batch size: 6min/epoch
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\TensorFlow_Implementation\Lung-Cancer-Detection\capsNet.py
        # [batch_size, 10], element-wise multiply
        L_c = T_c * max_l + cfg.lambda_val * (1 - T_c) * max_r

#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\TensorFlow_Implementation\Zalando_Fashion\capsLayer.py
    # tf.scan, 3 iter, 1080ti, 128 batch size: 10min/epoch
    # u_hat = tf.scan(lambda ac, x: tf.matmul(W, x, transpose_a=True), input, initializer=tf.zeros([1152, 10, 16, 1]))
    # tf.tile, 3 iter, 1080ti, 128 batch size: 6min/epoch
#########################################################################################
C:\Users\muvva\Desktop\testing\Artificial-Intelligence-Deep-Learning-Machine-Learning-Tutorials-master\deep-learning\CapsNET\TensorFlow_Implementation\Zalando_Fashion\capsNet.py
        # [batch_size, 10], element-wise multiply
        L_c = T_c * max_l + cfg.lambda_val * (1 - T_c) * max_r

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\constants\tests\test_constant.py
    # Without specifying a system e should not combine with other quantities
    pytest.raises(TypeError, lambda: e * E)
    # Try it again (as regression test on a minor issue mentioned in #745 where
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\constants\tests\test_constant.py
    # instead of TypeError)
    pytest.raises(TypeError, lambda: e * E)

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\constants\tests\test_constant.py
    # e.cgs is too ambiguous and should not work at all
    pytest.raises(TypeError, lambda: e.cgs * E)

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\coordinates\tests\test_sky_coord.py
    # transform graph
    transset = (ICRS, FakeFrame, lambda c, f: c)
    frame_transform_graph.add_transform(*transset)
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\cosmology\tests\test_cosmology.py
    # modest precision.
    ftemp = lambda x: c_flat.differential_comoving_volume(x).value
    otemp = lambda x: c_open.differential_comoving_volume(x).value
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\extern\configobj\validate.py
    # unchanged
    unicode = lambda x: x
    # in python 3, all ints are equivalent to python 2 longs, and they'll
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\extern\ply\yacc.py
        # p functions
        p_functions.sort(key=lambda p_function: (
            p_function[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\ascii\daophot.py
        # Function to strip identifier lines
        stripper = lambda s: s[2:].strip(' \\')
        for defblock in zip(*map(grouped_lines_dict.get, line_ids)):
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\ascii\daophot.py
        # Get column widths from column format specifiers
        get_col_width = lambda s: int(self.re_format.search(s).groups()[0])
        col_widths = [[get_col_width(f) for f in formats]
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\ascii\daophot.py
            # identifier
            get_line_id = lambda s: s.split(None, 1)[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\ascii\misc.py
            # if global sort function given and no local (secondary) key given, ==> no tiebreakers
            key = lambda x: 0
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\fits\hdu\base.py
        # If pos is an int, insert at the given position (and convert it to a
        # lambda)
        if _is_int(pos):
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\fits\hdu\image.py
        # to be >= 0, so we need to check it here
        self.req_cards('PCOUNT', naxis + 3, lambda v: (_is_int(v) and v == 0),
                       0, option, errs)
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\fits\tests\test_core.py
        # raised in 'exception' mode
        errs = hdu.req_cards('TESTKW', None, lambda v: v == 'bar', 'bar',
                             'exception', [])
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\fits\tests\test_core.py
        # See if fixing will work
        hdu.req_cards('TESTKW', None, lambda v: v == 'bar', 'bar', 'silentfix',
                      [])
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\fits\verify.py
            # item is a boolean indicating whether or not the issue was fixable
            line_filter = lambda x: not x[0]
        elif fix_opt == 'fix' and report_opt == 'ignore':
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\io\tests\test_registry.py
    # different objects...but this failed under python3
    io_registry.register_reader('test', TestData, lambda: TestData())
    io_registry.register_reader('test', Table, lambda: Table())
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\logger.py
            # and set self._excepthook_orig to a no-op
            self._excepthook_orig = lambda etype, evalue, tb: None

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\modeling\core.py
    # Perform an arithmetic operation on two models.
    return lambda left, right: _CompoundModelMeta._from_operator(oper, left,
                                                                 right, **kwargs)
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\modeling\core.py
    # and similarly for g
    return (lambda inputs, params: g[0](f[0](inputs, params), params),
            f[1], g[2])
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\modeling\core.py
    # and similarly for g
    return (lambda inputs, params: (f[0](inputs[:f[1]], params) +
                                    g[0](inputs[f[1]:], params)),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\modeling\core.py
        # Reverse the order of compositions
        operators['|'] = lambda x, y: operator.or_(y, x)

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\stats\lombscargle\implementations\slow_impl.py
    # make following arrays into column vectors
    t, y, dy, w = map(lambda x: x[:, np.newaxis], (t, y, dy, w))

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\meta.py
    # Set the output attributes
    for attr, nontrivial, xform in (('unit', lambda x: x is not None, str),
                                    ('format', lambda x: x is not None, None),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\serialize.py
        # stored on the column.
        for attr, nontrivial in (('unit', lambda x: x not in (None, '')),
                                 ('format', lambda x: x is not None),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\tests\test_pprint.py
        # mathematical function
        t['a'].format = lambda x: str(x * 3.)
        assert str(t['a']) == ' a \n---\n3.0\n6.0'
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\tests\test_pprint.py
        # mathematical function
        t['a'].format = lambda x: str(x * 3.)
        outstr = '   a [2]    \n------------\n  3.0 .. 6.0\n30.0 .. 60.0'
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\tests\test_pprint.py
        # mathematical function
        t['a'].format = lambda x: str(x * 3.)
        assert str(t['a']) == ' a \n---\n --\n6.0\n --'
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\table\tests\test_pprint.py
        # mathematical function
        t['a'].format = lambda x: str(x * 3.)
        outstr = '  a [2]   \n----------\n 3.0 .. --\n30.0 .. --'
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\tests\runner.py
        # Filter out anything that's not got the name 'keyword'
        keywords = filter(lambda func: func[1].__name__ == 'keyword', functions)
        # Sort all keywords based on the priority flag.
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\tests\runner.py
        # Sort all keywords based on the priority flag.
        sorted_keywords = sorted(keywords, key=lambda x: x[1]._priority, reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\time\core.py
    # When Time has mean, std, min, max methods:
    # funcs = [lambda x: getattr(x, stat)() for stat_name in MixinInfo._stats])

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # flux density
    flambda = u.erg / u.angstrom / u.cm ** 2 / u.s
    fnu = u.erg / u.Hz / u.cm ** 2 / u.s
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # luminosity density
    llambda = u.erg / u.angstrom / u.s
    lnu = u.erg / u.Hz / u.s
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # Define F_lambda in ergs / cm^2 / s / micron
    f_lambda = u.erg / u.cm ** 2 / u.s / u.micron

#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # Convert to F_lambda at 1 Ghz
    assert_allclose(f_nu.to(f_lambda, 1.,
                    equivalencies=u.spectral_density(one_ghz)),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # Convert to Jy at 1 Ghz
    assert_allclose(f_lambda.to(u.Jy, 1.,
                    equivalencies=u.spectral_density(one_ghz)),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\tests\test_equivalencies.py
    # Convert to ergs / cm^2 / s at 10 microns
    assert_allclose(f_lambda.to(u.erg / u.cm ** 2 / u.s, 1.,
                    equivalencies=u.spectral_density(u.Quantity(10, u.micron))),
#########################################################################################
C:\Users\muvva\Desktop\testing\astropy-master\astropy\units\utils.py
    # Sort alphabetically, case insensitive
    units.sort(key=lambda x: x.name.lower())

#########################################################################################
C:\Users\muvva\Desktop\testing\autobahn-python-master\autobahn\wamp\protocol.py
            # wait for any async-ness in the error handlers for on_reply
            txaio.add_callbacks(d, lambda _: request.on_reply, lambda _: request.on_reply)
        return d
#########################################################################################
C:\Users\muvva\Desktop\testing\autobahn-python-master\autobahn\wamp\serializer.py
        _packb = lambda obj: msgpack.packb(obj, use_bin_type=True)  # noqa
        _unpackb = lambda data: msgpack.unpackb(data, raw=False)  # noqa
        _msgpack = msgpack
#########################################################################################
C:\Users\muvva\Desktop\testing\autobahn-python-master\autobahn\wamp\test\test_runner.py
                    # pass a no-op session-creation method
                    runner.run, lambda _: None, start_reactor=True
                )
#########################################################################################
C:\Users\muvva\Desktop\testing\autobahn-python-master\autobahn\websocket\protocol.py
        #
        self.perMessageCompressionAccept = lambda _: None

#########################################################################################
C:\Users\muvva\Desktop\testing\autojump-master\bin\autojump_data.py
    # example: u'10.0\t/home/user\n' -> ['10.0', u'/home/user']
    parse = lambda line: line.strip().split('\t')

#########################################################################################
C:\Users\muvva\Desktop\testing\autojump-master\bin\autojump_data.py
    # example: ['10.0', u'/home/user'] -> (u'/home/user', 10.0)
    tupleize = lambda x: (x[1], float(x[0]))

#########################################################################################
C:\Users\muvva\Desktop\testing\autojump-master\bin\autojump_utils.py
    # edge case to allow '/' as a valid path
    clean = lambda x: unico(x) if x == os.sep else unico(x).rstrip(os.sep)
    return list(imap(clean, directories))
#########################################################################################
C:\Users\muvva\Desktop\testing\autopep8-master\autopep8.py
PYTHON_SHEBANG_REGEX = re.compile(r'^#!.*\bpython[23]?\b\s*$')
LAMBDA_REGEX = re.compile(r'([\w.]+)\s=\slambda\s*([\(\)=\w,\s.]*):')
COMPARE_NEGATIVE_REGEX = re.compile(r'\b(not)\s+([^][)(}{]+?)\s+(in|is)\s')
#########################################################################################
C:\Users\muvva\Desktop\testing\autopep8-master\test\example_with_reduce.py
# calling ``require()``) will get activated as well.
add_activation_listener(lambda dist: dist.activate())
working_set.entries=[]
#########################################################################################
C:\Users\muvva\Desktop\testing\autopep8-master\test\inspect_example.py
            # look for the first "def", "class" or "lambda"
            if token in ("def", "class", "lambda"):
                if token == "lambda":
#########################################################################################
C:\Users\muvva\Desktop\testing\awesome-python-master\sort.py
        # Then all of the blocks are sorted individually
        blocks = [''.join(sorted(block, key=lambda s: s.lower())) for block in blocks]
        # And the result is written back to README.md
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\invoke\cli.py
            # Invoke the function
            context.local_lambda_runner.invoke(context.function_name,
                                               event=event_data,
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\local_lambda_service.py
        # statements from the Lambda function
        service = LocalLambdaInvokeService(lambda_runner=self.lambda_runner,
                                           port=self.port,
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\sam_function_provider.py
        # property does not support specifying a local path
        codeuri = SamFunctionProvider._extract_lambda_function_code(resource_properties, "Code")

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\swagger\integration_uri.py
    # From an ARN like below, extract just the Lambda Function ARN
    # arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calculator:ProdAlias/invocations  # NOQA
    _REGEX_GET_FUNCTION_ARN = r'.*/functions/(.*)/invocations'
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\swagger\integration_uri.py
    # name and exclude the Alias name that can optionally follow it.
    # arn:aws:lambda:us-west-2:123456789012:function:Calculator:ProdAlias
    _REGEX_GET_FUNCTION_NAME = r'.*:function:([^:]*)'
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\swagger\integration_uri.py
            # {
            #   "Fn::Sub":[ "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyARn}/invocations",
            #               {"MyARn": {"Ref": MyFunction"}
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\swagger\integration_uri.py
        # to get ARN of Lambda Alias when using DeploymentPreference
        lambda_function_arn_template = r'arn:aws:lambda:${AWS::Region}:123456789012:function:\1'

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\lib\swagger\integration_uri.py
                      # Replace with Lambda Function ARN, where function name is from pattern
                      lambda_function_arn_template,
                      arn)
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\commands\local\start_lambda\cli.py
def cli(ctx,  # pylint: disable=R0914
        # start-lambda Specific Options
        host, port,
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\apigw\local_apigw_service.py
        # Something went wrong
        self._app.register_error_handler(500, ServiceErrorResponses.lambda_failure_response)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\apigw\local_apigw_service.py
            # Write the logs to stderr if available.
            self.stderr.write(lambda_logs)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\docker\manager.py
        # c) We are asked to skip pulling the image
        if (is_image_local and self.skip_pull_image) or image_name.startswith('samcli/lambda'):
            LOG.info("Requested to skip pulling images ...\n")
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\lambda_service\local_lambda_invoke_service.py
            # Write the logs to stderr if available.
            self.stderr.write(lambda_logs)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
        # the function may have written directly to stdout using
        # System.out.println or similar, before docker-lambda output the result
        stdout_data = stdout_stream.getvalue().rstrip(b'\n')
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
        # response and everything else as log output.
        lambda_response = stdout_data
        lambda_logs = None
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
            # Everything but the last line are logs
            lambda_logs = stdout_data[:last_line_position]
            # Last line is Lambda response. Make sure to strip() so we get rid of extra whitespaces & newlines around
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
            # Last line is Lambda response. Make sure to strip() so we get rid of extra whitespaces & newlines around
            lambda_response = stdout_data[last_line_position:].strip()

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
        # error
        is_lambda_user_error_response = LambdaOutputParser.is_lambda_error_response(lambda_response)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\samcli\local\services\base_local_service.py
            # the keys 'errorMessage', 'errorType' and 'stackTrace'.
            if isinstance(lambda_response_dict, dict) and \
                    len(lambda_response_dict) == 3 and \
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\functional\commands\local\lib\test_local_api_service.py
        # Now wire up the Lambda invoker and pass it through the context
        self.lambda_invoke_context_mock = Mock()
        manager = ContainerManager()
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\integration\local\start_lambda\start_lambda_api_integ_base.py
        # After all the tests run, we need to kill the start-lambda process.
        cls.start_lambda_process.kill()

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\commands\local\lib\swagger\test_integration_uri.py
                    # But unfortunately we don't support this here
                    "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${MyArn}/invocations",
                    {
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\commands\local\lib\test_local_api_service.py
        # Now start the service
        local_service = LocalApiService(self.lambda_invoke_context_mock, self.port, self.host, self.static_dir)
        local_service.start()
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\commands\local\lib\test_local_api_service.py
        # Now start the service
        local_service = LocalApiService(self.lambda_invoke_context_mock, self.port, self.host, self.static_dir)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\apigw\test_local_apigw_service.py
        # Make sure the parse method is called only on the returned response and not on the raw data from stdout
        parse_output_mock.assert_called_with(lambda_response, ANY, ANY)
        # Make sure the logs are written to stderr
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\apigw\test_local_apigw_service.py
        # Make sure the logs are written to stderr
        self.stderr.write.assert_called_with(lambda_logs)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\lambdafn\test_runtime.py
        # Verify if Lambda Event data is set
        self.env_vars.add_lambda_event_body.assert_called_with(event)

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\lambdafn\test_runtime.py
        # Make sure the container is created with proper values
        LambdaContainerMock.assert_called_with(self.lang, self.handler, code_dir, self.layers, lambda_image_mock,
                                               memory_mb=self.DEFAULT_MEMORY, env_vars=self.env_var_value,
#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\lambdafn\test_runtime.py
        # Fake the real method with a Lambda. Also run the handler immediately.
        SignalMock.signal = lambda term, handler: handler("a", "b")

#########################################################################################
C:\Users\muvva\Desktop\testing\aws-sam-cli-master\tests\unit\local\lambda_service\test_local_lambda_invoke_service.py
        # Make sure the logs are written to stderr
        stderr_mock.write.assert_called_with(lambda_logs)

#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\cerebro.py
        # Write down if any writer wants the full csv output
        self.writers_csv = any(map(lambda x: x.p.csv, self.runwriters))

#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\feeds\pandafeed.py
        # try to autodetect if all columns are numeric
        cstrings = filter(lambda x: isinstance(x, string_types), colnames)
        colsnumeric = not len(list(cstrings))
#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\plot\finance.py
        # Prepack different zips of the series values
        oc = lambda: zip(opens, closes)
        xoc = lambda: zip(xs, opens, closes)
#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\plot\finance.py
        # Prepare the data
        openclose = lambda: zip(opens, closes)

#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\plot\finance.py
        # Prepack different zips of the series values
        ihighlow = lambda: zip(xs, highs, lows)
        iopen = lambda: zip(xs, opens)
#########################################################################################
C:\Users\muvva\Desktop\testing\backtrader-master\backtrader\plot\multicursor.py
    # set_active is overriden by SelectorWidgets.
    active = property(get_active, lambda self, active: self.set_active(active),
                      doc="Is the widget active?")
#########################################################################################
C:\Users\muvva\Desktop\testing\BayesianOptimization-master\bayes_opt\util.py
        # Find the minimum of minus the acquisition function
        res = minimize(lambda x: -ac(x.reshape(1, -1), gp=gp, y_max=y_max),
                       x_try.reshape(1, -1),
#########################################################################################
C:\Users\muvva\Desktop\testing\beets-master\beets\ui\commands.py
    # Filter out files that don't need to be moved.
    isitemmoved = lambda item: item.path != item.destination(basedir=dest)
    isalbummoved = lambda album: any(isitemmoved(i) for i in album.items())
#########################################################################################
C:\Users\muvva\Desktop\testing\beets-master\test\test_mediafile.py
        # WMA does not preserve the order, so we have to work around this
        image = list(filter(lambda i: i.mime_type == 'image/tiff',
                     mediafile.images))[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\beets-master\test\test_thumbnails.py
        # test metadata writer function
        mock_os.path.exists = lambda _: True
        mock_pil.return_value = False
#########################################################################################
C:\Users\muvva\Desktop\testing\behave-master\behave\formatter\steps.py
        # ORDERING: Sort step definitions by file location.
        get_location = lambda x: x[0].location
        step_definition_items = self.step_usage_database.items()
#########################################################################################
C:\Users\muvva\Desktop\testing\behave-master\behave\formatter\steps.py
        # ORDERING: Sort step definitions by file location.
        get_location = lambda x: x.location
        step_definitions = sorted(unused_step_definitions, key=get_location)
#########################################################################################
C:\Users\muvva\Desktop\testing\behave-master\behave\formatter\tags.py
        # -- PREPARE REPORT:
        compare_tag_counts_size = lambda x: len(self.tag_counts[x])
        ordered_tags = sorted(list(self.tag_counts.keys()),
#########################################################################################
C:\Users\muvva\Desktop\testing\bigchaindb-master\bigchaindb\__init__.py
# from functools import reduce
# PORT_NUMBER = reduce(lambda x, y: x * y, map(ord, 'BigchainDB')) % 2**16
# basically, the port number is 9984
#########################################################################################
C:\Users\muvva\Desktop\testing\bigchaindb-master\tests\test_parallel_validation.py
            # worker are all even or all odd.
            assert (all(filter(lambda x: int(x) % 2 == 0, transaction_ids)) or
                    all(filter(lambda x: int(x) % 2 == 1, transaction_ids)))
#########################################################################################
C:\Users\muvva\Desktop\testing\bigchaindb-master\tests\web\test_websocket_server.py
    # plugin explicitely.
    monkeypatch.setattr('asyncio.get_event_loop', lambda: loop)

#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\blockstack\lib\config.py
         # must be a CSV of host:port
         hostports = filter( lambda x: len(x) > 0, atlas_blacklist.split(",") )
         for hp in hostports:
#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\blockstack\lib\config.py
        # all semver mismatches before "0.17" require upgrade
        (lambda v : v[:2] < (0,17))
    ]
#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\blockstack\lib\operations\namespacereveal.py
# everything but the block number
MUTATE_FIELDS = filter( lambda f: f not in ["block_number"], FIELDS ) + ['token_fee']

#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\integration_tests\blockstack_integration_tests\scenarios\testlib.py
    # listfiles output is a newline-separated list of names, plus the number of files at the end 
    filenames = filter(lambda s: len(s) > 0, res.split('\n'))
    return filenames[:-1]
#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\integration_tests\blockstack_integration_tests\scenarios\testlib.py
            # select account states by token type
            account_token_states = filter(lambda a: a['type'] == token_type, account_states[addr])
            account_token_states_prior = filter(lambda a: a['type'] == token_type, account_states_prior[addr])
#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\integration_tests\blockstack_integration_tests\scenarios\testlib.py
            # coerse string values
            final_name_states[name] = dict(map(lambda (k, v): (k, str(v)) if isinstance(v, unicode) else (k, v), final_name_states[name].items()))

#########################################################################################
C:\Users\muvva\Desktop\testing\blockstack-core-master\integration_tests\blockstack_integration_tests\scenarios\testlib.py
                    # coerse string values
                    name_rec = dict(map(lambda (k,v): (k, str(v)) if isinstance(v, unicode) else (k,v), name_rec.items()))
                    for k in name_rec.keys():
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\core\property\tests\test_descriptors.py
        # simulate the __get__ a subclass would have
        d.__get__ = lambda obj, owner: f.foo

#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\io\tests\test_util.py
        # a current file, access, and no share exec
        biu._no_access = lambda x: False
        r = biu.default_filename("test")
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\io\tests\test_util.py
        # a current file, NO access, and no share exec
        biu._no_access = lambda x: True
        r = biu.default_filename("test")
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\io\tests\test_util.py
        # a current file, access, but WITH share exec
        biu._no_access = lambda x: False
        biu._shares_exec_prefix = lambda x: True
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\io\tests\test_util.py
        # no current file
        biu.detect_current_filename = lambda : None
        biu._no_access = lambda x: False
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\bokeh\util\compiler.py
    # sort everything by module name
    exports = sorted(exports, key=lambda spec: spec[1])
    modules = sorted(modules, key=lambda spec: spec[0])
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\examples\app\fourier_animated.py
# create the series partials
f1 = lambda x: (4*np.sin(x))/pi
f2 = lambda x: (4*np.sin(3*x))/(3*pi)
#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\examples\app\movies\main.py
movies.fillna(0, inplace=True)  # just replace missing values with zero
movies["revenue"] = movies.BoxOffice.apply(lambda x: '{:,d}'.format(int(x)))

#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\examples\plotting\file\bar_sorted.py
# sorting the bars means sorting the range factors
sorted_fruits = sorted(fruits, key=lambda x: counts[fruits.index(x)])

#########################################################################################
C:\Users\muvva\Desktop\testing\bokeh-master\sphinx\source\docs\user_guide\examples\categorical_bar_sorted.py
# sorting the bars means sorting the range factors
sorted_fruits = sorted(fruits, key=lambda x: counts[fruits.index(x)])

#########################################################################################
C:\Users\muvva\Desktop\testing\boltons-master\boltons\funcutils.py
    # Python 3
    make_method = lambda desc, obj, obj_type: MethodType(desc, obj)
    basestring = (str, bytes)  # Python 3 compat
#########################################################################################
C:\Users\muvva\Desktop\testing\boltons-master\boltons\funcutils.py
    # Python 3.4
    _inspect_iscoroutinefunction = lambda func: False

#########################################################################################
C:\Users\muvva\Desktop\testing\boltons-master\boltons\queueutils.py
    # negating priority means larger numbers = higher priority
    _default_priority_key = staticmethod(lambda p: -float(p or 0))
    _backend_type = list
#########################################################################################
C:\Users\muvva\Desktop\testing\boltons-master\tests\test_statsutils.py
        # pt = get_pt(dist=lambda: random.betavariate(2, 3))  # expect 1, beta
        # pt = get_pt(dist=lambda: random.expovariate(0.2))  # expect 3, beta
        pt = get_pt(dist=lambda: random.uniform(0.0, 10.0))  # gets 2
#########################################################################################
C:\Users\muvva\Desktop\testing\boto-master\boto\compat.py
    # This is probably running on App Engine.
    expanduser = (lambda x: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\boto-master\boto\endpoints.py
        # "service names" and endpoint prefixes.
        'awslambda': 'lambda',
        'cloudwatch': 'monitoring',
#########################################################################################
C:\Users\muvva\Desktop\testing\boto-master\tests\mturk\selenium_support.py
	# overwrite has_selenium, so the same result is returned every time
	globals().update(has_selenium=lambda: result)
	return result
#########################################################################################
C:\Users\muvva\Desktop\testing\boto-master\tests\unit\dynamodb2\test_table.py
                # infinite loop forever here.
                batch.resend_unprocessed = lambda: True

#########################################################################################
C:\Users\muvva\Desktop\testing\bottle-master\bottle.py
                # pick first FunctionType instance from multiple arguments
                func = filter(lambda x: isinstance(x, FunctionType),
                              map(lambda x: x.cell_contents, attributes))
#########################################################################################
C:\Users\muvva\Desktop\testing\bottle-master\test\test_mount.py
        # This should not match
        self.app.route('/<test:path>', callback=lambda test: test)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\changes\hgpoller.py
        # deferred will not use the response.
        d.addCallback(lambda _: utils.getProcessOutput(
            self.hgbin, args, path=self._absWorkdir(),
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\changes\pb.py
        # getting a changeid
        d.addCallback(lambda _: None)
        return d
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\data\changesources.py
        # set is successful: deferred result is True
        d.addCallback(lambda _: True)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\data\schedulers.py
        # set is successful: deferred result is True
        d.addCallback(lambda _: True)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\db\base.py
                # not necessary, so just stub out the method
                self.checkLength = lambda col, value: None
                return
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\db\logs.py
    MAX_CHUNK_LINES = 1000  # a chunk may not have more lines than this
    COMPRESSION_MODE = {"raw": {"id": 0, "dumps": lambda x: x, "read": lambda x: x},
                        "gz": {"id": 1, "dumps": dumps_gzip, "read": read_gzip},
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\master.py
        # reconfigs should not take that long!
        self.reconfig_notifier = task.LoopingCall(lambda:
                                                  log.msg("reconfig is ongoing for %d s" %
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildrequest.py
        # sort by submitted_at, so the first is the oldest
        unclaim_brs.sort(key=lambda brd: brd['submitted_at'])
        return unclaim_brs
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildrequestdistributor.py
            # sort by submitted_at, so the first is the oldest
            brdicts.sort(key=lambda brd: brd['submitted_at'])
            self.unclaimedBrdicts = brdicts
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildstep.py
        # pylint: disable=unnecessary-lambda
        self._delay(lambda: self.asyncLogfile.finish())

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildstep.py
        d = self.runCommand(cmd)  # might raise ConnectionLost
        d.addCallback(lambda res: self.commandComplete(cmd))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildstep.py
        # it's difficult to optimize when the synthetic logfile is needed.
        d.addCallback(lambda res: self.createSummary(cmd.logs['stdio']))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\buildstep.py
#   ...,
#   log_eval_func=lambda c,s: regex_log_evaluator(c, s, regexs)
# )
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\process\remotecommand.py
        # instead of just None
        d.addCallback(lambda r: self)
        # this fires the original deferred we returned from .run(),
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\schedulers\basic.py
        # treeStableTimer expires.
        self._stable_timers = defaultdict(lambda: None)
        self._stable_timers_lock = defer.DeferredLock()
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\schedulers\timed.py
        # don't wait for the nightly to run.
        return (defer.succeed((None, {})), d.addCallback(lambda _: buildstep.SUCCESS))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\status\build.py
                # pylint: disable=cell-var-from-loop
                d.addCallback(lambda step: step.unsubscribe(receiver))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\status\builder.py
                    # pylint: disable=cell-var-from-loop
                    d.addCallback(lambda s: s.unsubscribe(receiver))
            except Exception:
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\steps\package\rpm\rpmspec.py
    # Read-only properties
    loaded = property(lambda self: self._loaded)
    pkg_name = property(lambda self: self._pkg_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\steps\source\git.py
    # on or off
    ('all', lambda v: ['--all'] if v else None),
    ('always', lambda v: ['--always'] if v else None),
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\steps\source\git.py
    # string parameter
    ('match', lambda v: ['--match', v] if v else None),
    # numeric parameter
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\steps\source\git.py
    # numeric parameter
    ('abbrev', lambda v: ['--abbrev=%s' % v]
     if isTrueOrIsExactlyZero(v) else None),
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\steps\source\git.py
    # optional string parameter
    ('dirty', lambda v: ['--dirty'] if (v is True or v == '') else None),
    ('dirty', lambda v: ['--dirty=%s' % v] if (v and v is not True) else None),
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\fake\endpoint.py
        # results are sorted by ID for test stability
        return defer.succeed(sorted(testData.values(), key=lambda v: v['id']))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\integration\interop\test_setpropertyfromcommand.py
            # tricky
            yield task.deferLater(reactor, .1, lambda: None)
            res = yield oldNewLog(*arg, **kw)
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\integration\test_master.py
        # hang out for a fraction of a second, to let startup processes run
        yield deferLater(reactor, 0.01, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\integration\test_try_client.py
        # occasional test failures.
        self.patch(tryclient.Try, 'printStatus', lambda _: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\integration\test_try_client.py
        # wait until the scheduler is active
        yield waitFor(lambda: self.sch.active)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_db_changes.py
            # sort by changeid, since we assert on change 13 at index 0
            changes.sort(key=lambda c: c['changeid'])
            changeids = [c['changeid'] for c in changes]
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_master.py
        # patch out a few other annoying things the master likes to do
        self.patch(monkeypatches, 'patch_all', lambda: None)
        self.patch(signal, 'signal', lambda sig, hdlr: None)
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_master.py
        # XXX temporary
        self.patch(master, 'Status', lambda master: mock.Mock())

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_process_buildrequestdistributor.py
            # simple sort-by-name by default
            return sorted(builders, key=lambda b1: b1.name)
        self.master = self.botmaster.master = fakemaster.make_master(testcase=self,
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_process_buildstep.py
        # pylint: disable=unnecessary-lambda
        self.step.start = lambda: self.step.updateSummary()
        self.expectOutcome(result=EXCEPTION)
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_reporters_irc.py
        b = self.makeBot('nick', 'pass', ['#ch'], [], True, [], {})
        b.notice = lambda d, m: evts.append(('n', d, m))

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_reporter_gerrit.py
        # <=2.5 uses other syntax
        gsp.processVersion("2.4", lambda: None)
        spawnSkipFirstArg = Mock()
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_reporter_gerrit.py
        # gerrit versions <= 2.5 uses other syntax
        gsp.processVersion('2.4', lambda: None)
        spawnSkipFirstArg = Mock()
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\unit\test_util_eventual.py
        # monkey-patch log.err; this is restored by tearDown
        log.err = lambda: self.results.append("err")

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\test\util\www.py
        master.www = mock.Mock()  # to handle the resourceNeedsReconfigs call
        master.www.getUserInfos = lambda _: getattr(
            self.master.session, "user_info", {"anonymous": True})
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\util\service.py
        # sort by priority
        reconfigurable_services.sort(key=lambda svc: -svc.reconfig_priority)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\util\service.py
                # it has already called, so do not call it again
                child.stopService = lambda: None
                yield child.disownServiceParent()
#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\util\service.py
        # sort by priority
        reconfigurable_services.sort(key=lambda svc: -svc.reconfig_priority)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\master\buildbot\www\service.py
                        # as an instance attribute
                        self._getPort = lambda: self.port_service._port

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\worker\buildbot_worker\test\unit\test_bot.py
        # failed
        self.patch(log, "err", lambda f: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\buildbot-master\worker\buildbot_worker\test\unit\test_scripts_create_worker.py
        # but not 'admin' or 'host' files
        self.patch(os.path, "exists", lambda path: path.endswith("info"))

#########################################################################################
C:\Users\muvva\Desktop\testing\BuildingMachineLearningSystemsWithPython-master\ch05\PosTagFreqVectorizer.py
        # `compose` function that would have allowed us to chain a dynamic
        # number of functions. However the however of a lambda call is a few
        # hundreds of nanoseconds which is negligible when compared to the
#########################################################################################
C:\Users\muvva\Desktop\testing\BuildingMachineLearningSystemsWithPython-master\ch05\PosTagFreqVectorizer.py
        # cost of tokenizing a string of 1000 chars for instance.
        noop = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\Cactus-master\cactus\skeleton\plugins\blog.disabled.py
    # Sort the posts by date
    POSTS = sorted(POSTS, key=lambda x: x['date'])
    POSTS.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\Cactus-master\cactus\tests\data\skeleton\plugins\blog.disabled.py
    # Sort the posts by date
    POSTS = sorted(POSTS, key=lambda x: x['date'])
    POSTS.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\setup\translations.py
            src = re.sub(r'#, python-brace-format\s+msgid ""\s+.*<code>{0:</code>',
                   lambda m: m.group().replace('python-brace', 'no-python-brace'), src)
            with open(pot, 'wb') as f:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\backend.py
        # Dummy functions for dynamically created filters
        self.createscalarfunction('books_list_filter', lambda x: 1, 1)
        self.createcollation('icucollate', icu_collator)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\cli\cmd_set_metadata.py
        for field, val in sorted(  # ensure series_index fields are set last
                iteritems(vals), key=lambda k: 1 if k[0].endswith('_index') else 0):
            if field.endswith('_index'):
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\legacy.py
# Cleaning is not required anymore
LibraryDatabase.clean = LibraryDatabase.clean_custom = MT(lambda self:None)
LibraryDatabase.clean_standard_field = MT(lambda self, field, commit=False:None)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\legacy.py
# apsw operates in autocommit mode
LibraryDatabase.commit = MT(lambda self:None)
# }}}
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\search.py
            # db could be None
            self._db = lambda : None
        self.load_from_db()
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\tables.py
            # Legacy
            self.unserialize = lambda x: x.replace('|', ',') if x else ''

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\tests\legacy.py
                    fmt = {'!':dict, '@':lambda x:frozenset(x or ()), '#':lambda x:set((x or '').split(',')),
                           '$':lambda x:set(tuple(y) for y in x), '-':lambda x:None,
                           '%':lambda x: set((x or '').split(','))}[meth[0]]
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\tests\reading.py
            for field in STANDARD_METADATA_FIELDS | {'#series_index'}:
                f = lambda x: x
                if field == 'formats':
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\write.py
    # Map values to db ids, including any new values
    kmap = safe_lower if dt in {'text', 'series'} else lambda x:x
    rid_map = {kmap(item):item_id for item_id, item in iteritems(table.id_map)}
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\db\write.py
    # Map values to db ids, including any new values
    kmap = safe_lower if dt == 'text' else lambda x:x
    rid_map = {kmap(item):item_id for item_id, item in iteritems(table.id_map)}
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\devices\prst1\driver.py
            # Replace undecodable characters in the db instead of erroring out
            connection.text_factory = lambda x: x if isinstance(x, unicode_type) else x.decode('utf-8', 'replace')

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\comic\input.py
    # levels, in which case simply use the filenames.
    basename = os.path.basename if len(sep_counts) > 1 else lambda x: x
    if sort_on_mtime:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\compression\tcr.py
        # Arrange the codes in order of least to most occurring.
        possible_new_codes = [x[0] for x in sorted(new_codes_count, key=lambda c: c[1])]

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\docx\fields.py
    (r'\\\S{1}', lambda s, t: (t, FLAG)),  # A flag of the form \x
    (r'"[^"]*"', lambda s, t: (t[1:-1], WORD)),  # Quoted word
    (r'[^\s\\"]\S*', lambda s, t: (t, WORD)),  # A non-quoted word, must not start with a backslash or a space or a quote
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\docx\fields.py
    (r'"[^"]*"', lambda s, t: (t[1:-1], WORD)),  # Quoted word
    (r'[^\s\\"]\S*', lambda s, t: (t, WORD)),  # A non-quoted word, must not start with a backslash or a space or a quote
    (r'\s+', None),
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                        # Replace common line break patterns with line breaks
                        (re.compile(r'<p>(&nbsp;|\s)*</p>', re.IGNORECASE), lambda m: '<br />'),

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                        # Remove self closing script tags as they also mess up BeautifulSoup
                        (re.compile(r'(?i)<script[^<>]+?/>'), lambda match: ''),

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                  # Remove <hr> tags
                  (re.compile(r'<hr.*?>', re.IGNORECASE), lambda match: '<br />'),
                  # Remove page numbers
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                  # Remove page numbers
                  (re.compile(r'\d+<br>', re.IGNORECASE), lambda match: ''),
                  # Remove <br> and replace <br><br> with <p>
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                  # Remove <br> and replace <br><br> with <p>
                  (re.compile(r'<br.*?>\s*<br.*?>', re.IGNORECASE), lambda match: '<p>'),
                  (re.compile(r'(.*)<br.*?>', re.IGNORECASE),
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\lrf\html\convert_from.py
                  # Remove hyphenation
                  (re.compile(r'-\n\r?'), lambda match: ''),

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\metadata\meta.py
# Higher values should be used to update metadata from lower values
METADATA_PRIORITIES = collections.defaultdict(lambda:0)
for i, ext in enumerate(_METADATA_PRIORITIES):
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\mobi\mobiml.py
            # Replace n consecutive spaces with n-1 NBSP + space
            text = re.sub(r' {2,}', lambda m:(u'\xa0'*(len(m.group())-1) + u' '), text)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\oeb\polish\utils.py
                        # We dont care about @import rules
                        fetcher=lambda x: (None, None), log=_css_logger)
    if is_declaration:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\oeb\stylizer.py
                    # We handle @import rules separately
                    parser.setFetcher(lambda x: ('utf-8', b''))
                    stylesheet = parser.parseString(text, href=cssname,
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\oeb\transforms\flatcss.py
        # :hover must come after link and :active must come after :hover
        psels = sorted(pseudo_styles, key=lambda x :
                {'hover':1, 'active':2}.get(x, 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlconverter.py
        # the TOC later.
        pml = re.sub(r'(?msu)(?P<c>\\x)(?P<text>.*?)(?P=c)', lambda match: '%s="%s"%s%s' %
                     (match.group('c'), self.strip_pml(match.group('text')), match.group('text'), match.group('c')), pml)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlconverter.py
        # Footnotes and Sidebars.
        pml = re.sub(r'(?mus)<footnote\s+id="(?P<target>.+?)">\s*(?P<text>.*?)\s*</footnote>', lambda match: '\\FN="%s"%s\\FN' %
                     (match.group('target'), match.group('text')) if match.group('text') else '', pml)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlconverter.py
        # Replace \\a and \\U with either the unicode character or the entity.
        pml = re.sub(r'\\a(?P<num>\d{3})', lambda match: '&#%s;' % match.group('num'), pml)
        pml = re.sub(r'\\U(?P<num>[0-9a-f]{4})', lambda match: '%s' % my_unichr(int(match.group('num'), 16)), pml)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlconverter.py
        pml = re.sub(r'\\a(?P<num>\d{3})', lambda match: '&#%s;' % match.group('num'), pml)
        pml = re.sub(r'\\U(?P<num>[0-9a-f]{4})', lambda match: '%s' % my_unichr(int(match.group('num'), 16)), pml)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlml.py
        # PML code equivelent
        text = re.sub('[^\x00-\x7f]', lambda x: unipmlcode(x.group()), text)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\pml\pmlml.py
            # Only indent lines that don't have special formatting
            text = re.sub('(?imu)^(?P<text>.+)$', lambda mo: mo.group('text')
                          if re.search(r'\\[XxCmrctTp]', mo.group('text')) else '        %s' % mo.group('text'), text)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\rtf2xml\tokenize.py
        # remove \n in bin data
        input_file = self.__bin_exp.sub(lambda x:
                                        x.group().replace('\n', '') + '\n', input_file)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\rtf2xml\tokenize.py
        # remove empty tokens and \n
        return filter(lambda x: len(x) > 0 and x != '\n', tokens)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\rtf2xml\tokenize.py
        # remove empty items created by removing \uc
        tokens = filter(lambda x: len(x) > 0, tokens)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\ebooks\unihandecode\unidecoder.py
        # Replace characters larger than 127 with their ASCII equivelent.
        return re.sub('[^\x00-\x7f]',lambda x: self.replace_point(x.group()), text)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\dialogs\tag_editor.py
        # add the handlers for the filter input fields
        connect_lambda(self.available_filter_input.textChanged, self, lambda self, text: self.filter_tags(text))
        connect_lambda(self.applied_filter_input.textChanged, self, lambda self, text: self.filter_tags(text, which='applied_tags'))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\library\alternate_views.py
        # performance if a large number of rows has to be selected.
        for k, g in itertools.groupby(enumerate(rows), lambda i_x:i_x[0]-i_x[1]):
            group = list(map(operator.itemgetter(1), g))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\library\views.py
        # performance if a large number of rows has to be selected.
        for k, g in itertools.groupby(enumerate(rows), lambda i_x:i_x[0]-i_x[1]):
            group = list(map(operator.itemgetter(1), g))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\tweak_book\diff\view.py
                           # We dont care about @import rules
                           fetcher=lambda x: (None, None), log=_css_logger)
        data = parser.parseString(raw, href='<string>', validate=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\tweak_book\file_list.py
        # repaint detected message
        for c in sorted(removals, key=lambda x:x.parent().indexOfChild(x), reverse=True):
            sip.delete(c)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\gui2\tweak_book\search.py
        # We dont want backslash escape sequences interpreted in normal mode
        return lambda m: ans
    if state['mode'] == 'function':
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\add_to_library.py
def find_folders_under(root, db, add_root=True,  # {{{
        follow_links=False, cancel_callback=lambda : False):
    '''
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\add_to_library.py
def books_in_folder(folder, one_per_folder,  # {{{
        cancel_callback=lambda : False):
    dirpath = os.path.abspath(folder)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\caches.py
            else:  # count operation
                cast = (lambda x: int(x))

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\comments.py
    # Explode lost CRs to \n\n
    comments = lost_cr_exception_pat.sub(lambda m: m.group().replace('.',
        '.\r'), comments)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\database2.py
                # Clean up the authors strings to human-readable form
                formatter = (lambda x: x.replace('|', ','))
                items = [v for v in tcategories[category].values() if v.c > 0]
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\database2.py
            # No need for ICU here.
            categories['formats'].sort(key=lambda x:x.name)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\database2.py
            # No need for ICU here.
            categories['identifiers'].sort(key=lambda x:x.name)

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\library\sqlite.py
    # Dummy functions for dynamically created filters
    conn.create_function('books_list_filter', 1, lambda x: 1)
    conn.create_collation('icucollate', icu_collator)
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\spell\dictionary.py
    # installed to builtin ones
    for k in sorted(exact_matches, key=lambda x: (1, None) if x is None else (0, x)):
        return exact_matches[k]
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\srv\metadata.py
        # items from a hidden category could be in a user category
        root['children'] = filter((lambda child:items[child['id']]['category'] not in opts.hidden_categories), root['children'])
    if opts.hide_empty_categories:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\srv\tests\auth.py
except ImportError:  # windows
    find_executable = lambda x: None

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\srv\tests\auth.py
            # Check modified nonce fails
            fail_test(conn, lambda da:setattr(da, 'nonce', 'xyz'))
            fail_test(conn, lambda da:setattr(da, 'nonce', 'x' + da.nonce))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\srv\tests\auth.py
            # Check mismatched uri fails
            fail_test(conn, lambda da:setattr(da, 'uri', '/'))
            fail_test(conn, lambda da:setattr(da, 'uri', '/closed2'))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\srv\tests\auth.py
            # Check that incorrect user/password fails
            fail_test(conn, lambda da:setattr(da, 'pw', '/'))
            fail_test(conn, lambda da:setattr(da, 'username', '/'))
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\startup.py
# immediately translated to the environment language
builtins.__dict__['__'] = lambda s: s

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\test_build.py
        # problem.
        fmts = set(map(lambda x: x.data().decode('utf-8'), QImageReader.supportedImageFormats()))
        testf = {'jpg', 'png', 'svg', 'ico', 'gif'}
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\utils\bibtex.py
    # u'\u0000': r'{$\kappa$}',
    # u'\u0000': r'{$\lambda$}',
    # u'\u0000': r'{$\mu$}',
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\utils\fonts\sfnt\container.py
        #     b'gasp', b'PCLT', b'DSIG'))}
        # keys.sort(key=lambda x:order.get(x, 1000))
        # for x in keys:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\utils\fonts\sfnt\metrics.py
        # Metrics for embedding in PDF
        pdf_scale = self.pdf_scale = lambda x:int(round(x*1000./self.units_per_em))
        self.pdf_ascent, self.pdf_descent = map(pdf_scale,
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\utils\icu.py
except AttributeError:  # For people running from source
    swapcase = lambda x:x.swapcase()

#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\utils\ipc\pool.py
    # is required.
    if getattr(sys, 'gui_app', False) or getattr(sys.stdout, 'isatty', lambda : False)():
        if DEBUG:
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\web\feeds\news.py
    #:        (re.compile(r'<!--Article ends here-->.*</body>', re.DOTALL|re.IGNORECASE),
    #:         lambda match: '</body>'),
    #:     ]
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\calibre\web\fetch\simple.py
        # multiple nested comments
        nmassage.append((re.compile(r'<!--.*?-->', re.DOTALL), lambda m: ''))
        usrc = xml_to_unicode(src, self.verbose, strip_encoding_pats=True)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\calibre-master\src\tinycss\tokenizer.py
    # Use the c tokenizer by default
    c_tokenize_flat = tokenize_flat = lambda s, ignore_comments=False:tok.tokenize_flat(s, ignore_comments)

#########################################################################################
C:\Users\muvva\Desktop\testing\carbon-master\lib\carbon\client.py
          key = d[0:2]  # Take only host:port, not instance.
          factories.add(min(self.pooled_factories[key], key=lambda f: f.queueSize))
    return factories
#########################################################################################
C:\Users\muvva\Desktop\testing\cartoonify-master\cartoonify\app\object_detection\core\preprocessor.py
    # flip image
    image = tf.cond(do_a_flip_random, lambda: _flip_image(image), lambda: image)
    result.append(image)
#########################################################################################
C:\Users\muvva\Desktop\testing\cartoonify-master\cartoonify\app\object_detection\core\preprocessor.py
    # flip image
    image = tf.cond(do_a_flip_random, lambda: _flip_image(image), lambda: image)
    result.append(image)
#########################################################################################
C:\Users\muvva\Desktop\testing\cartoonify-master\cartoonify\app\object_detection\core\preprocessor.py
    # flip image
    image = tf.cond(do_a_rot90_random, lambda: _rot90_image(image),
                    lambda: image)
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\assets\assets.py
            #
            # Wrap the function in a lambda so that both methods share a
            # signature, so that when the functions are iterated over
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\assets\assets.py
            # the consumer can use the same arguments with both methods.
            lambda symbol, _: self.lookup_future_symbol(symbol)
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\curate\poloniex.py
        ohlc = df.resample('T').ohlc()                 # Resample OHLC 1min
        ohlc.columns = ohlc.columns.map(lambda t: t[1])  # Rename cols
        closes = ohlc['close'].fillna(method='pad')    # Pad fwd missing close
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\curate\poloniex.py
        closes = ohlc['close'].fillna(method='pad')    # Pad fwd missing close
        ohlc = ohlc.apply(lambda x: x.fillna(closes))  # Fill NA w/ last close
        vol = vol.resample('T').sum().fillna(0)        # Add volumes by bin
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\pipeline\loaders\earnings_estimates.py
        # Get rid of any adjustments that happen outside of our date index.
        adjustments = list(filter(lambda x: dates[0] <= x[0] <= dates[-1],
                                  adjustments))
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\catalyst\utils\cli.py
    # context manager that just return `it` when we enter it
    return CallbackManager(lambda it=it: it)

#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\tests\data\bundles\test_core.py
        # register but do not ingest data
        self.register('bundle', lambda *args: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\tests\test_algorithm.py
        # Verify that positions are empty for all dates.
        empty_positions = daily_stats.positions.map(lambda x: len(x) == 0)
        self.assertTrue(empty_positions.all())
#########################################################################################
C:\Users\muvva\Desktop\testing\catalyst-master\tests\test_continuous_futures.py
        # for session in sessions:
        #     bar_data = self.create_bardata(lambda: session)
        #     contract = bar_data.current(cf, 'contract')
#########################################################################################
C:\Users\muvva\Desktop\testing\cerberus-master\cerberus\tests\test_normalization.py
    drop_prefix = lambda x: x[2:]  # noqa: E731
    upper = lambda x: x.upper()  # noqa: E731
    schema = {'foo': {'coerce': [hex, drop_prefix, upper]}}
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\plugins\disco.py
        # pylint: disable=star-args
        return self.filter(lambda p_ep: p_ep.ifaces(*ifaces_groups))

#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\plugins\selection.py
        # throw more UX-friendly error if default not in plugins
        filtered = plugins.filter(lambda p_ep: p_ep.name == default)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\cert_manager_test.py
        # pylint: disable=protected-access
        get_report = lambda: cert_manager._report_human_readable(mock_config, parsed_certs)

#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\cert_manager_test.py
        # pylint: disable=protected-access
        self.assertEqual(cert_manager._search_lineages(self.config, lambda x: x, "check"),
            "check")
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\error_handler_test.py
    prev_handlers = get_signals(signums)  # type: Dict[int, Union[int, None, Callable]]
    set_signals(dict((s, lambda s, _: signals.append(s)) for s in signums))
    yield signals
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\storage_test.py
        # (to avoid instantiating parser)
        mock_rv.side_effect = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\storage_test.py
        # (to avoid instantiating parser)
        mock_rv.side_effect = lambda x: x
        for kind in ALL_FOUR:
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\storage_test.py
        # (to avoid instantiating parser)
        mock_rv.side_effect = lambda x: x
        for kind in ALL_FOUR:
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\storage_test.py
        # don't have to mock the parser to help it decide!)
        mock_rv.side_effect = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot\tests\storage_test.py
        # don't have to mock the parser to help it decide!)
        mock_rv.side_effect = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot-dns-route53\certbot_dns_route53\dns_route53.py
        # And then we choose the first one, which will be the most specific.
        zones.sort(key=lambda z: len(z[0]), reverse=True)
        return zones[0][1]
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot-nginx\certbot_nginx\parser.py
            # Find all the server blocks
            _do_for_subarray(tree, lambda x: len(x) >= 2 and x[0] == ['server'],
                             lambda x, y: srv.append((x[1], y)))
#########################################################################################
C:\Users\muvva\Desktop\testing\certbot-master\certbot-postfix\certbot_postfix\tests\installer_test.py
        # override get_default to get from main
        postconf.get_default = lambda name: main_cf[name]
    with mock.patch.object(ConfigMain, "__init__", _mock_init_postconf):
#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\chainer\links\caffe\caffe_function.py
        if operation == 0:      # PROD
            return six.moves.reduce(lambda x, y: x * y, xs),

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\chainer\links\caffe\caffe_function.py
        elif operation == 2:    # MAX
            return six.moves.reduce(lambda x, y: functions.maximum(x, y), xs),

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\chainer\sequential.py
            # Explore better representation by if-block.
            if getattr(layer, '__name__', None) == '<lambda>':
                rep = inspect.getsource(layer).strip().rstrip(',')
#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\chainer\variable.py
                # Disconnect by replacing with an alternative of dead weakref
                node._variable = lambda: None
                self._node = None
#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\examples\memnn\memnn.py
        # The answer prediction matrix W is same as the final output layer
        self.W = lambda u: F.linear(u, self.embeds[-1].W)

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\examples\ptb\train_ptb.py
        # Reset the RNN state at the beginning of each evaluation
        eval_hook=lambda _: eval_rnn.reset_state()))

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\tests\chainer_tests\functions_tests\math_tests\test_basic_math.py
        # _test_constant_array_one throws pycuda._pvt_struct.error
        self._test_constant_array_gpu(lambda x, y: y * x, exception=Exception)

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\tests\chainer_tests\functions_tests\math_tests\test_basic_math.py
        # _test_constant_array_one throws pycuda._pvt_struct.error
        self._test_constant_array_gpu(lambda x, y: x / y, exception=Exception)

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\tests\chainer_tests\functions_tests\math_tests\test_basic_math.py
        # _test_constant_array_one throws pycuda._pvt_struct.error
        self._test_constant_array_gpu(lambda x, y: y ** x, exception=Exception)

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\tests\chainer_tests\test_gradient_check.py
        # matrix-vector multiplication of dfxs and dys
        dx_expect = tuple(map(lambda dfx: _dot(dfx, gys), dfxs))

#########################################################################################
C:\Users\muvva\Desktop\testing\chainer-master\tests\chainer_tests\test_optimizer.py
        # call update with arrays on GPU 0 (tested by another method)
        self.update_rule.update_core = lambda param: None
        self.update_rule.update(chainer.Variable(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\analyzer.py
        # current symbol table via .lookup().
        # For now, we're going to ignore lambda expressions.
        pass
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\app.py
# Implementation note:  This file is intended to be a standalone file
# that gets copied into the lambda deployment package.  It has no dependencies
# on other parts of chalice so it can stay small and lightweight, with minimal
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\app.py
# These classes contain all the event types that are passed
# in as arguments in the lambda event handlers.  These are
# part of Chalice's public API and must be backwards compatible.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\app.py
            # pylint: disable=protected-access
            lambda app, options: app._register_handler(
                handler_type, name, user_handler, wrapped_handler,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> bool
        client = self._client('lambda')
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> Dict[str, Any]
        response = self._client('lambda').get_function_configuration(
            FunctionName=name)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
                # Happens when the contents of the unzipped deployment
                # package sent to lambda is too large
                error_cls = DeploymentPackageTooLargeError
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> None
        lambda_client = self._client('lambda')
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str) -> Dict[str, Any]
        lambda_client = self._client('lambda')
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, int) -> None
        lambda_client = self._client('lambda')
        lambda_client.put_function_concurrency(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> None
        lambda_client = self._client('lambda')
        lambda_client.delete_function_concurrency(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, Dict[str, str]) -> None
        remote_tags = self._client('lambda').list_tags(
            Resource=function_arn)['Tags']
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str, str, str, Optional[str]) -> None
        """Authorize API gateway to invoke a lambda function is needed.

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> Dict[str, Any]
        """Return the function policy for a lambda function.

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str) -> None
        self._add_lambda_permission_if_needed(
            source_arn=topic_arn,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str) -> None
        self._remove_lambda_permission_if_needed(
            source_arn=topic_arn,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str) -> None
        self._add_lambda_permission_if_needed(
            source_arn=rule_arn,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str, List[str], OptStr, OptStr) -> None
        """Configure S3 bucket to invoke a lambda function.

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # We have to handle two cases:
        # 1. There's an existing config associated with the lambda arn.
        #    In this case we replace the specific lambda config with the
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # 1. There's an existing config associated with the lambda arn.
        #    In this case we replace the specific lambda config with the
        #    new_config.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        #   {
        #    "Action": "lambda:InvokeFunction",
        #    "Condition": {
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        #    },
        #    "Resource": "arn:aws:lambda:us-west-2:aid:function:name",
        #    "Sid": "e4755709-067e-4254-b6ec-e7f9639e6f7b"
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (Dict[str, Any], str, str) -> bool
        if not statement['Action'] == 'lambda:InvokeFunction':
            return False
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # We're not checking the "Resource" key because we're assuming
        # that lambda.get_policy() is returning the policy for the particular
        # resource in question.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str, str) -> None
        client = self._client('lambda')
        policy = self.get_function_policy(function_arn)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, str, int) -> None
        lambda_client = self._client('lambda')
        kwargs = {
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str, int) -> None
        lambda_client = self._client('lambda')
        self._call_client_method_with_retries(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (str) -> None
        lambda_client = self._client('lambda')
        self._call_client_method_with_retries(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\awsclient.py
        # type: (...) -> Dict[str, Any]
        client = self._client('lambda')
        attempts = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\factory.py
                # string.  We don't want this to clutter the debug logs
                # so we don't log the request body for lambda operations
                # that have the ZipFile arg.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\factory.py
        # The session for max retries needs to be set to 0 for invoking a
        # lambda function because in the case of a timeout or other retriable
        # error the underlying client will call the function again.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\factory.py
        # the deployment package. This means that imports will work in the
        # lambda function as if the vendor directory is on the python path.
        # For loading the config locally we must add the vendor directory to
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\factory.py
        # the path so it will be treated the same as if it were running on
        # lambda.
        vendor_dir = os.path.join(self.project_dir, 'vendor')
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\factory.py
            # This gives you a change to install the correct
            # version locally and still keep the lambda
            # specific one in vendor/
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\__init__.py
    # so you'll see the same stdout logging as you would when
    # running in lambda.  This is configuring the root logger.
    # The app-specific logger (app.log) will still continue
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\cli\__init__.py
    # type: (click.Context, str, str, str) -> None
    """Invoke the deployed lambda function NAME."""
    factory = ctx.obj['factory']  # type: CLIFactory
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # we attempt to match your python version to the closest version
        # supported by lambda.
        major, minor = sys.version_info[0], sys.version_info[1]
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # type: () -> int
        return self._chain_lookup('lambda_memory_size',
                                  varies_per_chalice_stage=True,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # type: () -> int
        return self._chain_lookup('lambda_timeout',
                                  varies_per_chalice_stage=True,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        resources = []  # type: List[Dict[str, Any]]
        self._upgrade_lambda_functions(resources, deployed, prefix)
        self._upgrade_rest_api(resources, deployed)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # type: (List[Dict[str, Any]], Dict[str, Any], str) -> None
        lambda_functions = deployed.get('lambda_functions', {})
        # In chalice 0.10.0, the lambda_functions had the format
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # In chalice 0.10.0, the lambda_functions had the format
        # {"function-name": "lambda_arn"} as opposed to
        # {"function-name": {"arn": "lambda_arn", "type": "...'}} used
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\config.py
        # {"function-name": "lambda_arn"} as opposed to
        # {"function-name": {"arn": "lambda_arn", "type": "...'}} used
        # in later versions of chalice.  We'll check for both cases
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # Need to mess with the function name for back-compat.
        lambda_function = self._create_lambda_model(
            config=config, deployment=deployment, name='api_handler',
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # For backwards compatibility with the old deployer, the
        # lambda function for the API handler doesn't have the
        # resource_name appended to its complete function_name,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # type: (...) -> models.ScheduledEvent
        lambda_function = self._create_lambda_model(
            config=config, deployment=deployment, name=event_source.name,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # However, in the original deployer code, the cloudwatch
        # event + lambda function was considered a single resource.
        # Now that they're treated as two separate resources we need
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # Now that they're treated as two separate resources we need
        # a unique name for the event_source that's not the lambda
        # function resource name.  We handle this by just appending
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # type: (...) -> models.S3BucketNotification
        lambda_function = self._create_lambda_model(
            config=config, deployment=deployment, name=s3_event.name,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # type: (...) -> models.SNSLambdaSubscription
        lambda_function = self._create_lambda_model(
            config=config, deployment=deployment, name=sns_config.name,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # type: (...) -> models.SQSEventSource
        lambda_function = self._create_lambda_model(
            config=config, deployment=deployment, name=sqs_config.name,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # type: (int, int) -> None
        self._lambda_timeout = lambda_timeout
        self._lambda_memory_size = lambda_memory_size
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # The sqs integration works by polling for
        # available records so the lambda function needs
        # permission to call sqs.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\deployer.py
        # permission to call sqs.
        role = resource.lambda_function.role
        if (not self._policy_injected and
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
    schedule_expression = attrib()  # type: str
    lambda_function = attrib()      # type: LambdaFunction

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
        # type: () -> List[Model]
        return [self.lambda_function]

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
    api_gateway_stage = attrib()                 # type: str
    lambda_function = attrib()                   # type: LambdaFunction
    authorizers = attrib(default=Factory(list))  # type: List[LambdaFunction]
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
        # type: () -> List[Model]
        return cast(List[Model], [self.lambda_function] + self.authorizers)

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
    suffix = attrib()           # type: Optional[str]
    lambda_function = attrib()  # type: LambdaFunction

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
        # type: () -> List[Model]
        return [self.lambda_function]

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
    topic = attrib()            # type: str
    lambda_function = attrib()  # type: LambdaFunction

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
        # type: () -> List[Model]
        return [self.lambda_function]

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
    batch_size = attrib()       # type: int
    lambda_function = attrib()  # type: LambdaFunction

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\models.py
        # type: () -> List[Model]
        return [self.lambda_function]

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
                    # Not actually an issue, but pylint will complain
                    # about the f var being used in the lambda function
                    # is being used in a loop.  This is ok because
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
                    # is being used in a loop.  This is ok because
                    # we're immediately using the lambda function.
                    # Also binding it as a default argument fixes
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
                    # pylint: disable=cell-var-from-loop
                    for chunk in iter(lambda: f.read(1024 * 1024), b''):
                        md5.update(chunk)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # - sdists (Pip could not get a wheel so it gave us an sdist)
        # - lambda compatible wheel files
        # - lambda incompatible wheel files
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # - lambda compatible wheel files
        # - lambda incompatible wheel files
        # Pip will give us a wheel when it can, but some distributions do not
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # will have downloaded that, if our platform does not match the
        # platform lambda runs on (linux_x86_64/manylinux) then the downloaded
        # wheel file may not be compatible with lambda. Pure python wheels
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # platform lambda runs on (linux_x86_64/manylinux) then the downloaded
        # wheel file may not be compatible with lambda. Pure python wheels
        # still will be compatible because they have no platform dependencies.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # that has an sdist but not a valid wheel file is still not going to
        # work on lambda and we must now try and build the sdist into a wheel
        # file ourselves.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # the parent directory. On some systems purelib and platlib need to
        # be installed into separate locations, for lambda this is not the case
        # and both should be installed in site-packages.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\packager.py
        # wheels were downloaded. We are only interested in wheel files
        # compatible with lambda, which means manylinux1_x86_64 platform and
        # cpython implementation. The compatible abi depends on the python
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\planner.py
        # type: (models.LambdaFunction) -> bool
        return self._client.lambda_function_exists(resource.function_name)

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\planner.py
        params = {}  # type: Dict[str, Any]
        varname = '%s_lambda_arn' % resource.resource_name
        # Not sure the best way to express this via mypy, but we know
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\planner.py
            # We record this because this is what's used to unsubscribe
            # lambda to the SQS queue.
            models.RecordResourceVariable(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\planner.py
        # type: (models.RestAPI) -> Sequence[InstructionMsg]
        function = resource.lambda_function
        function_name = function.function_name
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\swagger.py
        # type: (Optional[str]) -> Any
        if lambda_arn is None:
            lambda_arn = self._deployed_resources['api_handler_arn']
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\deploy\swagger.py
        # type: (ChaliceAuthorizer) -> Any
        varname = '%s_lambda_arn' % authorizer.name
        return StringFormat(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\invoke.py
        # type: (str, TypedAWSClient) -> None
        self._lambda_arn = lambda_arn
        self._client = client
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # Below are properties that are found on the real LambdaContext passed
        # by lambda and their associated documentation.

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type: (str, EventType, LambdaContext) -> LocalAuthPair
        method = lambda_event['requestContext']['httpMethod']
        route_entry = self._route_for_event(lambda_event)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # detect that app.ChaliceAuthorizer was callable.
        resource_path = lambda_event.get(
            'requestContext', {}).get('resourcePath')
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type: () -> LambdaContext
        if self._config.lambda_timeout is None:
            timeout = None
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type: (str, str, HeaderType, Optional[str]) -> EventType
        lambda_event = self.event_converter.create_lambda_event(
            method=method, path=path, headers=headers,
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type: (EventType) -> bool
        route_key = lambda_event['requestContext']['resourcePath']
        return 'OPTIONS' in self._app_object.routes[route_key]
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type: (str, str, HeaderType, Optional[str]) -> ResponseType
        lambda_context = self._generate_lambda_context()
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
            # how API Gateway does their auth and routing.
            error_headers = {'x-amzn-RequestId': lambda_context.aws_request_id,
                             'x-amzn-ErrorType': 'UnauthorizedException'}
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
            # automatically generate our CORS headers.
            options_headers = self._autogen_options_headers(lambda_event)
            return {
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # 401 will be sent back over the wire.
        lambda_event, lambda_context = self._authorizer.authorize(
            path, lambda_event, lambda_context)
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\local.py
        # type:(EventType) -> HeaderType
        route_key = lambda_event['requestContext']['resourcePath']
        route_dict = self._app_object.routes[route_key]
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\logs.py
        # type: (TypedAWSClient, str) -> LogRetriever
        """Create a LogRetriever from a client and lambda arn.

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\package.py
            }  # type: Dict[str, Dict[str, Dict[str, str]]]
            lambdafunction_definition['Properties'].update(environment_config)
        if resource.security_group_ids and resource.subnet_ids:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\chalice\package.py
            }  # type: Dict[str, Dict[str, List[str]]]
            lambdafunction_definition['Properties'].update(vpc_config)
        if resource.reserved_concurrency is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # This should fail two times with retryable exceptions and
        # then succeed to update the lambda function.
        stubbed_session.stub('lambda').update_function_configuration(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # then succeed to update the lambda function.
        stubbed_session.stub('lambda').update_function_configuration(
            **update_config_kwargs).raises_error(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # An empty policy means we need to add permissions.
        lambda_stub = stubbed_session.stub('lambda')
        lambda_stub.get_policy(FunctionName='name').returns({'Policy': '{}'})
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # It's also possible to receive a ResourceNotFoundException
        # if you call get_policy() on a lambda function with no policy.
        lambda_stub = stubbed_session.stub('lambda')
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # if you call get_policy() on a lambda function with no policy.
        lambda_stub = stubbed_session.stub('lambda')
        lambda_stub.get_policy(FunctionName='name').raises_error(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_awsclient.py
        # We should call the appropriate add_permission call.
        lambda_client = stubbed_session.stub('lambda')
        lambda_client.add_permission(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\functional\test_package.py
        # optional c speedups it will build a platform dependent wheel file
        # which is not compatible with lambda.
        pip.wheels_to_build(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_deployer.py
        # We're going to add another lambda_function to our app.
        @lambda_app.lambda_function()
        def bar(event, context):
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_deployer.py
        # configuration is all tested via RoleTestCase.
        config = self.create_config(lambda_app, autogen_policy=True)
        builder = ApplicationGraphBuilder()
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_deployer.py
# How to read these tests:
# 'given' is a mapping of lambda function name to config values.
# 'roles' is a mapping of lambda function to expected attributes
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_deployer.py
# 'given' is a mapping of lambda function name to config values.
# 'roles' is a mapping of lambda function to expected attributes
# of the role associated with the given function.
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_deployer.py
    # Verify that we can use the same non-managed role for multiple
    # lambda functions.
    RoleTestCase(
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_packager.py
        # Make sure that `pip download` is called with the correct arguments
        # for getting lambda compatible wheels.
        pip, runner = pip_factory()
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_validate.py
    # This will cause a validation error because
    # 'foo' is already registered as a lambda function.
    @sample_app.lambda_function(name='foo')
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\deploy\test_validate.py
    # 'foo' is already registered as a lambda function.
    @sample_app.lambda_function(name='foo')
    def bar(event, context):
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_app.py
    # This is the event dict that lambda provides
    # to the lambda handler
    lambda_event = {
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_app.py
    # to the lambda handler
    lambda_event = {
        "version": "0",
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_app.py
    # This is meant as a fall back in case you need access to
    # the raw lambda event dict.
    assert event_object.to_dict() == lambda_event
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_app.py
    # the raw lambda event dict.
    assert event_object.to_dict() == lambda_event

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_app.py
    # Handles the name prefix and the name='' override in the decorator.
    assert lambda_functions[0].name == 'myprefix_mylambdafunction'
    assert list(myapp.routes) == ['/bar/foo']
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_config.py
                # This is the old < 1.0 style where the
                # value was just the lambda arn.
                "app-dev-foo": "my-lambda-arn",
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_config.py
                # value was just the lambda arn.
                "app-dev-foo": "my-lambda-arn",
            },
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_invoke.py
        # stackTrace key.
        arn = 'arn:aws:lambda:region:id:function:name-dev'
        error = {
#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_local.py
    # those arguments.
    return ['lambda_name', 256]

#########################################################################################
C:\Users\muvva\Desktop\testing\chalice-master\tests\unit\test_package.py
        # We'll add a few more and verify they all share the same role.
        @sample_app_lambda_only.lambda_function()
        def second(event, context):
#########################################################################################
C:\Users\muvva\Desktop\testing\chartify-master\chartify\_core\chart.py
        # and place in a list.
        datasources_list = list(map(lambda x: x.data, datasources))
        return datasources_list
#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\circuits\circuit.py
        # Note: python `sorted` is guaranteed to be stable. This matters.
        insertions = sorted(insertions, key=lambda e: e[0])
        groups = _group_until_different(insertions,
#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\contrib\acquaintance\gates.py
                 ] # type: List[Tuple[ops.Qid, ...]]
    part_sort_key = lambda p: min(qubit_sort_key(q) for q in p)
    parts = tuple(tuple(part) for part in
#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\linalg\transformations.py
    # Find the entry with the largest magnitude in one of the matrices.
    k = max(np.ndindex(*a.shape), key=lambda t: abs(b[t]))

#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\ops\moment_test.py
    # Two qubit gates.
    eq.make_equality_group(lambda: Moment([cirq.CZ(c, d)]))
    eq.make_equality_group(lambda: Moment([cirq.CZ(a, c)]))
#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\optimizers\eject_z.py
        # Tracks qubit phases (in half turns; multiply by pi to get radians).
        qubit_phase = defaultdict(lambda: 0)  # type: Dict[ops.Qid, float]

#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\protocols\decompose_test.py
    # Unless there's no operations to be unhappy about.
    assert cirq.decompose([], keep=lambda _: False) == []
    # Or you say you're fine.
#########################################################################################
C:\Users\muvva\Desktop\testing\Cirq-master\cirq\study\sweeps_test.py
    # from each other even if they happen to contain the same points.
    et.make_equality_group(lambda: cirq.Linspace('a', 0, 10, 11))
    et.make_equality_group(lambda: cirq.Linspace('b', 0, 10, 11))
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\config\middleware\__init__.py
        # Sort answers by app name
        answers = sorted(answers, key=lambda x: x[1])
        log.debug('Route support answers for {0} {1}: {2}'.format(
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\include\rcssmin.py
            fn_close,                           # }
            lambda g: g(11),                    # string
            lambda g: 'url(%s)' % uri_space_sub(uri_space_subber, g(12)),
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\include\rcssmin.py
            lambda g: g(11),                    # string
            lambda g: 'url(%s)' % uri_space_sub(uri_space_subber, g(12)),
                                                # url(...)
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\include\rcssmin.py
                                                # needed for IE6)
            lambda g: nl_unesc_sub('', g(18)),  # nl_string
            lambda g: post_esc_sub(' ', g(19)), # escape
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\include\rcssmin.py
            lambda g: nl_unesc_sub('', g(18)),  # nl_string
            lambda g: post_esc_sub(' ', g(19)), # escape
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\include\rjsmin.py
        return _re.sub(r'([\000-\040\047])', # for better portability
            lambda m: '\\%03o' % ord(m.group(1)), (sequentize(result)
                .replace('\\', '\\\\')
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\lib\helpers.py
    # Routes router doesn't like unicode args
    uargs = map(lambda arg: str(arg) if isinstance(arg, text_type) else arg,
                args)
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\lib\helpers.py
    # Sort descendingly by count and ascendingly by case-sensitive display name
    facets.sort(key=lambda it: (-it['count'], it['display_name'].lower()))
    if hasattr(c, 'search_facets_limits'):
#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\model\group.py
#TODO
MemberRevision.related_packages = lambda self: [self.continuity.package]

#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\tests\factories.py
    # Generate a different user name param for each user that gets created.
    name = factory.Sequence(lambda n: 'test_user_{0:02d}'.format(n))

#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\tests\factories.py
    # Generate a different group name param for each user that gets created.
    name = factory.Sequence(lambda n: 'test_org_{0:02d}'.format(n))

#########################################################################################
C:\Users\muvva\Desktop\testing\ckan-master\ckan\tests\factories.py
    # Generate a different group name param for each user that gets created.
    name = factory.Sequence(lambda n: 'test_dataset_{0:02d}'.format(n))

#########################################################################################
C:\Users\muvva\Desktop\testing\click-master\tests\test_utils.py
    # are already used and will not yield anymore
    ('just text\n', lambda: 'just text'),
    ('iterable\n', lambda: ["itera", "ble"]),
#########################################################################################
C:\Users\muvva\Desktop\testing\coala-master\coalib\bears\meta.py
    # by default a bear class has no aspects
    aspects = defaultdict(lambda: AspectList([]))

#########################################################################################
C:\Users\muvva\Desktop\testing\coala-master\coalib\core\Core.py
    # entry-points for the dependency-instantiation-graph.
    grouping = group(bears, key=lambda bear: (bear.section, bear.file_dict))
    for (section, file_dict), bears_per_section in grouping:
#########################################################################################
C:\Users\muvva\Desktop\testing\coala-master\tests\settings\ConfigurationGatheringTest.py
            # This gathers the configuration from the '.coafile' of this repo.
            gather_configuration(lambda *args: True,
                                 self.log_printer,
#########################################################################################
C:\Users\muvva\Desktop\testing\coconut-master\coconut\compiler\compiler.py
            params.insert(0, name)  # construct match tokens
            self.stmt_lambdas.append(
                "".join(self.name_match_funcdef_handle(original, loc, params))
#########################################################################################
C:\Users\muvva\Desktop\testing\colorama-master\demos\demo06.py
    # gratuitous use of lambda.
    pos = lambda y, x: '\x1b[%d;%dH' % (y, x)
    # draw a white border.
#########################################################################################
C:\Users\muvva\Desktop\testing\commix-master\src\core\main.py
  # Reference: https://github.com/nodejs/node/issues/12786#issuecomment-298652440
  codecs.register(lambda name: codecs.lookup("utf-8") if name == "cp65001" else None)
  # Use Colorama to make Termcolor work on Windows too :)
#########################################################################################
C:\Users\muvva\Desktop\testing\commix-master\src\thirdparty\beautifulsoup\beautifulsoup.py
        # Convert any HTML, XML, or numeric entities in the attribute values.
        convert = lambda(k, val): (k,
                                   re.sub("&(#\d+|#x[0-9a-fA-F]+|\w+);",
#########################################################################################
C:\Users\muvva\Desktop\testing\compose-master\compose\container.py
    # ps
    shortest_name = min(container['Names'], key=lambda n: len(n.split('/')))
    return shortest_name.split('/')[-1]
#########################################################################################
C:\Users\muvva\Desktop\testing\compose-master\compose\network.py
        # priority is set
        return OrderedDict(sorted(networks.items(), key=lambda t: t[0]))

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Doc\includes\sqlite3\text_factory.py
# here we implement one that appends "foo" to all strings
con.text_factory = lambda x: x.decode("utf-8") + "foo"
cur.execute("select ?", ("bar",))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\ctypes\test\test_callbacks.py
        # The type is checked when the prototype is called
        self.assertRaises(TypeError, prototype, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\ctypes\test\test_pickling.py
        # unpickable.
        self.assertRaises(ValueError, lambda: self.dumps(Y()))

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\ctypes\test\test_varsize_struct.py
        # cannot create arrays with non-positive size
        self.assertRaises(ValueError, lambda: c_int * -1)
        self.assertRaises(ValueError, lambda: c_int * -3)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\dataclasses.py
    # of generic dataclassses.
    cls = types.new_class(cls_name, bases, {}, lambda ns: ns.update(namespace))
    return dataclass(cls, init=init, repr=repr, eq=eq, order=order,
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\enum.py
            # sort by value
            members.sort(key=lambda t: (t[1], t[0]))
        except TypeError:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\enum.py
            # unless some values aren't comparable, in which case sort by name
            members.sort(key=lambda t: t[0])
        cls = cls(name, members, module=module)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\html\entities.py
    'Kappa':    0x039a, # greek capital letter kappa, U+039A
    'Lambda':   0x039b, # greek capital letter lambda, U+039B ISOgrk3
    'Mu':       0x039c, # greek capital letter mu, U+039C
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\html\entities.py
    'lArr':     0x21d0, # leftwards double arrow, U+21D0 ISOtech
    'lambda':   0x03bb, # greek small letter lambda, U+03BB ISOgrk3
    'lang':     0x2329, # left-pointing angle bracket = bra, U+2329 ISOtech
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\http\cookiejar.py
        # add cookies in order of most specific (ie. longest) path first
        cookies.sort(key=lambda a: len(a.path), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # position, but it's set to None.
        self.assertIsNone(start(is_char_in_string=lambda index: True))

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # found a good start position.
        eq(start(is_char_in_string=lambda index: False), 44)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # returns that as the index.
        eq(start(is_char_in_string=lambda index: index > 44), 44)
        # If the beginning of the def line is in a string, then it
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # looks for a previous index.
        eq(start(is_char_in_string=lambda index: index >= 44), 33)
        # If everything before the 'def' is in a string, then returns None.
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # The non-continuation def line returns 44 (see below).
        eq(start(is_char_in_string=lambda index: index < 44), None)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_pyparse.py
        # split line test.
        eq(start(is_char_in_string=lambda index: index < 44), 44)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\idle_test\test_searchengine.py
        # search_backward calls index('end-1c')
        cls.text.index = lambda index: '4.0'
        test_text = (
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\idlelib\squeezer.py
        self.selection_handle(  # X windows only.
            lambda offset, length: s[int(offset):int(offset) + int(length)])

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\inspect.py
            # look for the first "def", "class" or "lambda"
            elif token in ("def", "class", "lambda"):
                if token == "lambda":
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\inspect.py
                # First argument of the wrapped callable is `*args`, as in
                # `partialmethod(lambda *args)`.
                return sig
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\fixes\fix_tuple_params.py
    # The parens are a syntax error in Python 3
    lambda (x): x + y -> lambda x: x + y
"""
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\data\py2_test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0L]]
        self.assertEquals(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\data\py3_test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0]]
        self.assertEquals(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\data\py3_test_grammar.py
        # the next line is not allowed anymore
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\data\py3_test_grammar.py
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
        self.assertEqual([ x(False) for x in (lambda x: False if x else True, lambda x: True if x else False) if x(False) ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\test_fixers.py
        # Note the parens around x
        b = """x = filter(lambda (x): x%2 == 0, range(10))"""
        a = """x = [x for x in range(10) if x%2 == 0]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\test_fixers.py
        # Note the parens around x
        b = """x = filter(lambda (x): x%2 == 0, range(10))[0]"""
        a = """x = [x for x in range(10) if x%2 == 0][0]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\lib2to3\tests\test_fixers.py
        # Note the parens around x
        b = """x = map(lambda (x): x+1, range(4))"""
        a = """x = [x+1 for x in range(4)]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\multiprocessing\shared_memory.py
        0: lambda value: value,                   # int, float, bool
        1: lambda value: value.rstrip(b'\x00').decode(_encoding),  # str
        2: lambda value: value.rstrip(b'\x00'),   # bytes
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\multiprocessing\shared_memory.py
        1: lambda value: value.rstrip(b'\x00').decode(_encoding),  # str
        2: lambda value: value.rstrip(b'\x00'),   # bytes
        3: lambda _value: None,                   # None
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\multiprocessing\shared_memory.py
        2: lambda value: value.rstrip(b'\x00'),   # bytes
        3: lambda _value: None,                   # None
    }
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\pydoc.py
        if sys.platform == 'win32': # pipes completely broken in Windows
            return lambda text: tempfilepager(plain(text), use_pager)
        elif os.environ.get('TERM') in ('dumb', 'emacs'):
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\random.py
        # lambd: rate lambd = 1/mean
        # ('lambda' is a Python reserved word)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\rlcompleter.py
    # reference to globals).
    atexit.register(lambda: readline.set_completer(None))
    _readline_available = True
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\sqlite3\test\factory.py
        # invalid callable with not exact one argument
        self.assertRaises(TypeError, self.con.cursor, lambda: None)
        # invalid callable returning non-cursor
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\sqlite3\test\factory.py
        # invalid callable returning non-cursor
        self.assertRaises(TypeError, self.con.cursor, lambda con: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\sqlite3\test\factory.py
        # A custom factory should receive a bytes argument
        self.con.text_factory = lambda x: x
        row = self.con.execute("select value from test").fetchone()
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\sqlite3\test\types.py
        # override float, make them always return the same number
        sqlite.converters["FLOAT"] = lambda x: 47.2

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\sqlite3\test\types.py
        # and implement two custom ones
        sqlite.converters["BOOL"] = lambda x: bool(int(x))
        sqlite.converters["FOO"] = DeclTypesTests.Foo
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\tarfile.py
        # Reverse sort directories.
        directories.sort(key=lambda a: a.name)
        directories.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\inspect_fodder2.py
# line 24
oll = lambda m: m

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\inspect_fodder2.py
# line 27
tll = lambda g: g and \
g and \
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\inspect_fodder2.py
# line 32
tlli = lambda d: d and \
    d
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\sortperf.py
            # artificially low.
            L = list(map(lambda x: --x, L))
        doit(L) # ~sort
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_ast.py
  # Lambda
  "lambda:None",
  # Dict
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_asyncio\test_locks.py
        # predicate can return true immediately
        res = self.loop.run_until_complete(cond.wait_for(lambda: [1, 2, 3]))
        self.assertEqual([1, 2, 3], res)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_asyncore.py
        # run the thread 500 ms: the socket should be connected in 200 ms
        t = threading.Thread(target=lambda: asyncore.loop(timeout=0.1,
                                                          count=5))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_atexit.py
        # handled properly
        atexit.register(lambda: 1 / 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_bool.py
        # it's related.
        check = lambda o: self.assertRaises(TypeError, bool, o)
        class Foo(object):
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_cmath.py
    # test first and second arguments independently for 2-argument log
    test_functions.append(lambda x : cmath.log(x, 1729. + 0j))
    test_functions.append(lambda x : cmath.log(14.-27j, x))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_code.py
            # reference to the code object.  We need the code objects to go
            # away, so we eval a lambda.
            return eval('lambda:42')
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_code.py
            # away, so we eval a lambda.
            return eval('lambda:42')

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_collections.py
        # Check some non-collections
        non_collections = [None, 42, 3.14, 1j, lambda x: 2*x]
        for x in non_collections:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # detect duplicate positional and keyword arguments
        self.assertRaises(SyntaxError, eval, 'lambda a,a:0')
        self.assertRaises(SyntaxError, eval, 'lambda a,a=1:0')
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # Note: "lambda: ..." emits "LOAD_CONST Ellipsis",
        # whereas "lambda: Ellipsis" emits "LOAD_GLOBAL Ellipsis"
        f1, f2 = lambda: ..., lambda: ...
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # whereas "lambda: Ellipsis" emits "LOAD_GLOBAL Ellipsis"
        f1, f2 = lambda: ..., lambda: ...
        self.assertIs(f1.__code__, f2.__code__)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # Merge constants in tuple or frozenset
        f1, f2 = lambda: "not a name", lambda: ("not a name",)
        f3 = lambda x: x in {("not a name",)}
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # optimizer
        f1, f2 = lambda x: x in {0}, lambda x: x in {0}
        self.assertIs(f1.__code__, f2.__code__)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # '(-0-0j)', but when '(-0-0j)' is evaluated to 0j: we loose the sign.
        f1, f2 = lambda: +0.0j, lambda: -0.0j
        self.assertIsNot(f1.__code__, f2.__code__)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_compile.py
        # optimizer
        f1, f2 = lambda x: x in {0}, lambda x: x in {0.0}
        self.assertIsNot(f1.__code__, f2.__code__)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_dbm_gnu.py
        # try pass an invalid open flag
        self.assertRaises(gdbm.error, lambda: gdbm.open(filename, 'rx').close())

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_descr.py
        orig_hash = hash(d) # related to id(d) in platform-dependent ways
        A.__hash__ = lambda self: 42
        self.assertEqual(hash(d), 42)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_descr.py
        # SF 927248: deeply nested wrappers could cause stack overflow
        f = lambda:None
        for i in range(1000000):
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_dict.py
                # An instance variable __missing__ should have no effect
                self.__missing__ = lambda key: None
        f = F()
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_dynamic.py
        # Note that this *doesn't* change the definition of len() seen by foo().
        builtins_dict = {"len": lambda x: 7}
        globals_dict = {"foo": foo, "__builtins__": builtins_dict,
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_dynamic.py
        # Note that this *doesn't* change the definition of len() seen by foo().
        builtins_dict = {"len": lambda x: 7}
        globals_dict = {"foo": foo, "__builtins__": builtins_dict,
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_fileinput.py
            # cannot use openhook and inplace mode
            fi = FileInput(inplace=1, openhook=lambda f, m: None)
            self.fail("FileInput should raise if both inplace "
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_generators.py
        # like the equivalent function
        f = lambda: (yield 1)
        def g(): return (yield 1)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_generators.py
        # test 'yield from'
        f2 = lambda: (yield from g())
        def g2(): return (yield from g())
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0]]
        self.assertEqual(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_grammar.py
        # check that trailing commas are permitted
        l10 = lambda a,: 0
        l11 = lambda *args,: 0
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_grammar.py
        # the next line is not allowed anymore
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_grammar.py
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
        self.assertEqual([ x(False) for x in (lambda x: False if x else True, lambda x: True if x else False) if x(False) ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_htmlparser.py
        # default value for convert_charrefs is now True
        collector = lambda: EventCollectorCharrefs()
        self.assertTrue(collector().convert_charrefs)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_import\__init__.py
        # other code will need to change, so keep this test as a tripwire.
        with swap_item(globals(), "__import__", lambda *x: 5):
            self.assertEqual(foo(), os)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_inspect.py
        # descriptor
        descriptor.__set__ = lambda s, i, v: None
        self.assertEqual(inspect.getattr_static(foo, 'd'), Foo.__dict__['d'])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_io.py
        self.assertFalse(closed[0])  # flush() called before file closed
        f.flush = lambda: None  # break reference loop

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_itertools.py
        # check copy, deepcopy, pickle
        for op in [lambda a:copy.copy(a), lambda a:copy.deepcopy(a)] + picklecopiers:
            for data, selectors, result1, result2 in [
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_keywordonlyarg.py
        # This was not done for the default values of keyword
        # arguments in a lambda definition, and the following line
        # used to fail with a SystemError.
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_keywordonlyarg.py
        # used to fail with a SystemError.
        lambda *, k1=unittest: None

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_memoryview.py
        # Bounds checking
        self.assertRaises(IndexError, lambda: m[6])
        self.assertRaises(IndexError, lambda: m[-7])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_memoryview.py
        # Type checking
        self.assertRaises(TypeError, lambda: m[None])
        self.assertRaises(TypeError, lambda: m[0.0])
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_nntplib.py
        # Tolerate running the tests from behind a NNTP virus checker
        blacklist = lambda line: line.startswith(b'X-Antivirus')
        filtered_head_lines = [line for line in head.lines
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_parser.py
        self.check_suite("(x := lambda: (y := 1))")  # not in PEP
        self.check_suite("lambda line: (m := re.match(pattern, line)) and m.group(1)")
        self.check_suite("x = (y := 0)")
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_posix.py
            # Ensure a combination of valid and invalid is an error.
            os.register_at_fork(before=None, after_in_parent=lambda: 3)
        with self.assertRaises(TypeError, msg="Invalid arg was allowed"):
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_posix.py
            # Ensure a combination of valid and invalid is an error.
            os.register_at_fork(before=lambda: None, after_in_child='')
        # We test actual registrations in their own process so as not to
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_rlcompleter.py
            'assert': None,  # Keyword vs namespace
            'try': lambda: None,  # Keyword vs callable
            'memoryview': None,  # Callable builtin vs non-callable
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_rlcompleter.py
            'memoryview': None,  # Callable builtin vs non-callable
            'Ellipsis': lambda: None,  # Non-callable builtin vs callable
        }
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_scope.py
        # (though it will be cleared when the frame is collected).
        # Without the lambda, setting self to None is enough to break
        # the cycle.
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_subprocess.py
            # on error.
            func = lambda: None
            gc.enable()
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_textwrap.py
        # predicate argument
        predicate = lambda line: True
        for text in self.CASES:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_textwrap.py
        # Explicitly skip indenting any lines
        predicate = lambda line: False
        for text in self.CASES:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_userdict.py
                # An instance variable __missing__ should have no effect
                self.__missing__ = lambda key: None
                collections.UserDict.__init__(self)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Badly formed hex strings.
        badvalue(lambda: self.uuid.UUID(''))
        badvalue(lambda: self.uuid.UUID('abc'))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Badly formed bytes.
        badvalue(lambda: self.uuid.UUID(bytes='abc'))
        badvalue(lambda: self.uuid.UUID(bytes='\0'*15))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Badly formed bytes_le.
        badvalue(lambda: self.uuid.UUID(bytes_le='abc'))
        badvalue(lambda: self.uuid.UUID(bytes_le='\0'*15))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Badly formed fields.
        badvalue(lambda: self.uuid.UUID(fields=(1,)))
        badvalue(lambda: self.uuid.UUID(fields=(1, 2, 3, 4, 5)))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Field values out of range.
        badvalue(lambda: self.uuid.UUID(fields=(-1, 0, 0, 0, 0, 0)))
        badvalue(lambda: self.uuid.UUID(fields=(0x100000000, 0, 0, 0, 0, 0)))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Version number out of range.
        badvalue(lambda: self.uuid.UUID('00'*16, version=0))
        badvalue(lambda: self.uuid.UUID('00'*16, version=6))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Integer value out of range.
        badvalue(lambda: self.uuid.UUID(int=-1))
        badvalue(lambda: self.uuid.UUID(int=1<<128))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Wrong number of arguments (positional).
        badtype(lambda: self.uuid.UUID())
        badtype(lambda: self.uuid.UUID(h, b))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # Comparison with a non-UUID object
        badtype(lambda: u < object())
        badtype(lambda: u > object())
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_uuid.py
        # generate a valid value.
        too_large_getter = lambda: 1 << 48
        with unittest.mock.patch.multiple(
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_winreg.py
        # Note: DeleteKeyEx is not used here because it is platform dependent
        cke = lambda key, sub_key: CreateKeyEx(key, sub_key, 0, KEY_ALL_ACCESS)
        self._write_test_data(HKEY_CURRENT_USER, CreateKey=cke)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_winreg.py
                # The 64-bit version of the key should not be available yet.
                open_fail = lambda: OpenKey(HKEY_CURRENT_USER,
                                            test_reflect_key_name, 0,
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\test_winreg.py
            # 64-bit area, but let's make sure that didn't happen.
            open_fail = lambda: OpenKeyEx(HKEY_CURRENT_USER,
                                          test_reflect_key_name, 0,
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\threaded_import_hangers.py
        # Bug 147376:  TemporaryFile hung on Windows, starting in Python 2.4.
        ("tempfile.TemporaryFile", lambda: tempfile.TemporaryFile().close(), ()),

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\_test_multiprocessing.py
        # check they have all woken
        self.assertReachesEventually(lambda: get_value(woken), 6)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\test\_test_multiprocessing.py
        # check 2 have woken
        self.assertReachesEventually(lambda: get_value(woken), 2)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\mock.py
    # creates a function with signature (*args, **kwargs) that delegates to a
    # mock. It still does signature checking by calling a lambda with the same
    # signature as the original.
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\mock.py
                               # attributes
                               key=lambda entry: entry[0].count('.')):
            args = arg.split('.')
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\test\testmock\testmock.py
        # magic methods
        mock.__iter__ = lambda s: iter([])
        self.assertIn('__iter__', dir(mock))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\test\testmock\testsentinel.py
        # If this doesn't raise an AttributeError then help(mock) is broken
        self.assertRaises(AttributeError, lambda: sentinel.__bases__)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\test\test_runner.py
        # Use our result object
        runner._makeResult = lambda: result
        runner.run(Test('testFoo'))
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\unittest\test\test_runner.py
        # Use our result object
        runner._makeResult = lambda: result

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\uuid.py
    # This works on Linux with iproute2.
    mac = _find_mac('ip', 'link', [b'link/ether'], lambda i: i+1)
    if mac:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\uuid.py
    # Try getting the MAC addr from arp based on our IP address (Solaris).
    mac = _find_mac('arp', '-an', [os.fsencode(ip_addr)], lambda i: -1)
    if mac:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\uuid.py
    # This works on OpenBSD
    mac = _find_mac('arp', '-an', [os.fsencode(ip_addr)], lambda i: i+1)
    if mac:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Lib\uuid.py
    # This might work on HP-UX.
    return _find_mac('lanscan', '-ai', [b'lan0'], lambda i: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Tools\ccbench\ccbench.py
    # Taken from the `inspect` module
    pat = re.compile(r'^(\s*def\s)|(.*(?<!\w)lambda(:|\s))|^(\s*@)', re.MULTILINE)
    with open(__file__, "r") as f:
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Tools\importbench\importbench.py
    # Relying on built-in importer being implicit.
    yield from bench(name, lambda: sys.modules.pop(name), repeat=repeat,
                     seconds=seconds)
#########################################################################################
C:\Users\muvva\Desktop\testing\cpython-master\Tools\scripts\mailerdaemon.py
    # find all numeric file names and sort them
    files = list(filter(lambda fn, pat=pat: pat.match(fn) is not None, os.listdir('.')))
    files.sort(sort_numeric)
#########################################################################################
C:\Users\muvva\Desktop\testing\cubes-master\cubes\query\statutils.py
    # use all the values
    return round(compat.reduce(lambda i, c: float(c) + i, values, 0.0) / len(values), 2)

#########################################################################################
C:\Users\muvva\Desktop\testing\cupy-master\cupy\linalg\einsum_opt.py
        # Sort based on first index
        best = min(known_contractions, key=lambda x: x[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Arranging\ArrangeObjectsAllBuildPlatesJob.py
        # Sort the nodes with the biggest area first.
        nodes_arr.sort(key=lambda item: item[0])
        nodes_arr.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Arranging\ArrangeObjectsJob.py
        # Sort the nodes with the biggest area first.
        nodes_arr.sort(key=lambda item: item[0])
        nodes_arr.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\CuraApplication.py
                # Need to switch first to the preview stage and then to layer view
                self.callLater(lambda: (self.getController().setActiveStage("PreviewStage"),
                                        self.getController().setActiveView("SimulationView")))
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\MaterialManager.py
        # Order this map alphabetically so it's easier to navigate in a debugger
        self._material_group_map = OrderedDict(sorted(self._material_group_map.items(), key = lambda x: x[0]))

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\MaterialManager.py
        # will be the first one to be removed. We need to do this to ensure that all containers get loaded & deleted.
        nodes_to_remove = sorted(nodes_to_remove, key = lambda x: len(x.getMetaDataEntry("id", "")))
        # Try to load all containers first. If there is any faulty ones, they will be put into the faulty container
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\FavoriteMaterialsModel.py
        # Sort the item list alphabetically by name
        item_list = sorted(item_list, key = lambda d: d["brand"].upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\GenericMaterialsModel.py
        # Sort the item list alphabetically by name
        item_list = sorted(item_list, key = lambda d: d["name"].upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\MaterialBrandsModel.py
                # Sort materials by name
                material_list = sorted(material_list, key = lambda x: x["name"].upper())
                material_type_item["colors"].setItems(material_list)
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\MaterialBrandsModel.py
            # Sort material type by name
            material_type_item_list = sorted(material_type_item_list, key = lambda x: x["name"].upper())
            brand_item["material_types"].setItems(material_type_item_list)
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\MaterialBrandsModel.py
        # Sort brand by name
        brand_item_list = sorted(brand_item_list, key = lambda x: x["name"].upper())
        self.setItems(brand_item_list)
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\QualityManagementModel.py
        # Sort by quality names
        item_list = sorted(item_list, key = lambda x: x["name"].upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\QualityManagementModel.py
        # Sort quality_changes items by names and append to the item list
        quality_changes_item_list = sorted(quality_changes_item_list, key = lambda x: x["name"].upper())
        item_list += quality_changes_item_list
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\QualityProfilesDropDownMenuModel.py
        # Sort items based on layer_height
        item_list = sorted(item_list, key = lambda x: x["layer_height"])

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Machines\Models\SettingVisibilityPresetsModel.py
        # Sort them on weight (and if that fails, use ID)
        items.sort(key = lambda k: (int(k.weight), k.presetId))

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\cura\Settings\ExtrudersModel.py
            # sort by extruder index
            items.sort(key = lambda i: i["index"])

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\CuraEngineBackend\StartSliceJob.py
            # then CuraEngine can slice with the wrong settings. This I think should be fixed in CuraEngine as well.
            extruder_stack_list = sorted(list(global_stack.extruders.items()), key = lambda item: int(item[0]))
            for _, extruder_stack in extruder_stack_list:
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\GCodeProfileReader\GCodeProfileReader.py
    # Perform the replacement with a regular expression.
    return pattern.sub(lambda m: GCodeProfileReader.escape_characters[re.escape(m.group(0))], string)

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\GCodeWriter\GCodeWriter.py
        # Perform the replacement with a regular expression.
        escaped_string = pattern.sub(lambda m: GCodeWriter.escape_characters[re.escape(m.group(0))], json_string)

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\UM3NetworkPrinting\src\Cloud\Models\CloudClusterPrinterConfigurationMaterial.py
        # Sort the material groups by "is_read_only = True" first, and then the name alphabetically.
        read_only_material_group_list = list(filter(lambda x: x.is_read_only, material_group_list))
        non_read_only_material_group_list = list(filter(lambda x: not x.is_read_only, material_group_list))
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\UM3NetworkPrinting\src\ClusterUM3OutputDevice.py
        # Sort the material groups by "is_read_only = True" first, and then the name alphabetically.
        read_only_material_group_list = list(filter(lambda x: x.is_read_only, material_group_list))
        non_read_only_material_group_list = list(filter(lambda x: not x.is_read_only, material_group_list))
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\plugins\UM3NetworkPrinting\tests\Cloud\TestCloudApiClient.py
        # The callback is a function that adds the result of the call to getClusters to the result list
        self.api.getClusters(lambda clusters: result.extend(clusters))

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestExtruderStack.py
        # Return type_id when asking for value and -1 when asking for settable_per_extruder
        container.getProperty = lambda key, property, context = None, type_id = type_id: type_id if (key == "layer_height" and property == "value") else (None if property != "settable_per_extruder" else "-1") #Returns the container type ID as layer height, in order to identify it.
        container.hasProperty = lambda key, property: key == "layer_height"
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestExtruderStack.py
        container.getProperty = lambda key, property, context = None, type_id = type_id: type_id if (key == "layer_height" and property == "value") else (None if property != "settable_per_extruder" else "-1") #Returns the container type ID as layer height, in order to identify it.
        container.hasProperty = lambda key, property: key == "layer_height"
        container.getMetaDataEntry = unittest.mock.MagicMock(return_value = type_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
        container.getProperty = lambda key, property, context = None, type_id = type_id: type_id if (key == "layer_height" and property == "value") else None #Returns the container type ID as layer height, in order to identify it.
        container.hasProperty = lambda key, property: key == "layer_height"
        container.getMetaDataEntry = unittest.mock.MagicMock(return_value = type_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
    value = unittest.mock.MagicMock() #Just sets the value for bed temperature.
    value.getProperty = lambda key, property, context = None: 10 if (key == "material_bed_temperature" and property == "value") else None

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
    resolve_and_value = unittest.mock.MagicMock() #Sets the resolve and value for bed temperature.
    resolve_and_value.getProperty = lambda key, property, context = None: (7.5 if property == "resolve" else 5) if (key == "material_bed_temperature" and property in ("resolve", "value")) else None #7.5 resolve, 5 value.

#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
        instance_containers[container_type] = unittest.mock.MagicMock() #Sets the resolve and value for bed temperature.
        instance_containers[container_type].getProperty = lambda key, property, context = None: (7.5 if property == "resolve" else (InstanceState.User if property == "state" else (5 if property != "limit_to_extruder" else "-1"))) if (key == "material_bed_temperature") else None #7.5 resolve, 5 value.
        instance_containers[container_type].getMetaDataEntry = unittest.mock.MagicMock(return_value = container_indices.IndexTypeMap[container_type]) #Make queries for the type return the desired type.
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
        instance_containers[container_type].getMetaDataEntry = unittest.mock.MagicMock(return_value = container_indices.IndexTypeMap[container_type]) #Make queries for the type return the desired type.
    instance_containers[container_indices.Definition].getProperty = lambda key, property, context = None: 10 if (key == "material_bed_temperature" and property == "value") else None #Definition only has value.
    with unittest.mock.patch("cura.Settings.CuraContainerStack.DefinitionContainer", unittest.mock.MagicMock): #To guard against the type checking.
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
    value = unittest.mock.MagicMock() #Sets just the value.
    value.getProperty = lambda key, property, context = None: (10 if property == "value" else (InstanceState.User if property != "limit_to_extruder" else "-1")) if key == "material_bed_temperature" else None
    value.getMetaDataEntry = unittest.mock.MagicMock(return_value = "quality")
#########################################################################################
C:\Users\muvva\Desktop\testing\Cura-master\tests\Settings\TestGlobalStack.py
    resolve = unittest.mock.MagicMock() #Sets just the resolve.
    resolve.getProperty = lambda key, property, context = None: 7.5 if (key == "material_bed_temperature" and property == "resolve") else None

#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\AutoDocTransforms.py
        # XXX Should we do better?
        self.put("<lambda>")

#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\ExprNodes.py
    # starstar_arg  PyArgDeclNode or None  ** argument
    # lambda_name   string                 a module-globally unique lambda name
    # result_expr   ExprNode
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\Nodes.py
        # generate lambda function definitions
        self.generate_lambda_definitions(lenv, code)

#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\Nodes.py
    # name          string                 the Python name of the function
    # lambda_name   string                 the internal name of a lambda 'function'
    # decorators    [DecoratorNode]        list of decorators
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\Nodes.py
            # be analysed before this type.
            self.base_type.defered_declarations.append(lambda : self.analyse_declarations(env))
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\Nodes.py
    # TODO: Consider a generic user-level mechanism for importing
    'cpython.array'         : lambda : UtilityCode.load_cached("ArrayAPI", "arrayarray.h"),
    'cpython.array.array'   : lambda : UtilityCode.load_cached("ArrayAPI", "arrayarray.h"),
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\Cython\Compiler\Symtab.py
        # Add an entry for an anonymous Python function.
        func_cname = self.mangle(Naming.lambda_func_prefix + u'funcdef_', lambda_name)
        pymethdef_cname = self.mangle(Naming.lambda_func_prefix + u'methdef_', lambda_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\runtests.py
    # to be unsafe...
    (2,999): (operator.lt, lambda x: x in ['run.special_methods_T561_py3',
                                           'run.test_raisefrom',
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\tests\run\test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0]]
        self.assertEqual(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\tests\run\test_grammar.py
        # check that trailing commas are permitted
        l10 = lambda a,: 0
        l11 = lambda *args,: 0
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\tests\run\test_grammar.py
        # the next line is not allowed anymore
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\tests\run\test_grammar.py
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
        self.assertEqual([ x(False) for x in (lambda x: False if x else True, lambda x: True if x else False) if x(False) ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\cython-master\tests\run\yield_inside_lambda.py
# mode: run
# tag: generators, lambda

#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.oneOf
        enum=lambda: 'a value equal to: {}'.format(
            ', '.join(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.oneOfType
        union=lambda: '{}'.format(
            ' | '.join(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.arrayOf
        arrayOf=lambda: 'list'.format(  # pylint: disable=too-many-format-args
            ' of {}s'.format(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.objectOf
        objectOf=lambda: (
            'dict with strings as keys and values of type {}'
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.shape
        shape=lambda: 'dict containing keys {}.\n{}'.format(
            ', '.join(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.oneOfType
        union=lambda: '{}'.format(
            ' | '.join(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # Flow's Array type
        Array=lambda: 'list{}'.format(
            ' of {}s'.format(
#########################################################################################
C:\Users\muvva\Desktop\testing\dash-master\dash\development\_py_components_generation.py
        # React's PropTypes.shape
        signature=lambda indent_num: 'dict containing keys {}.\n{}'.format(
            ', '.join("'{}'".format(d['key'])
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\linalg.py
        # retrieve R_stacked for recursion with tsqr
        vchunks_rstacked = tuple([sum(map(lambda x: x[1], sub_block_info)) for sub_block_info in all_blocks])
        graph = HighLevelGraph(layers, dependencies)
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\stats.py
        # TODO: public api
        if lambda_ not in scipy.stats.stats._power_div_lambda_names:
            names = repr(list(scipy.stats.stats._power_div_lambda_names.keys()))[1:-1]
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\stats.py
    # the test statistic.  We use some specialized code for a few special
    # cases of lambda_.
    if lambda_ == 1:
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\stats.py
    # cases of lambda_.
    if lambda_ == 1:
        # Pearson's chi-squared statistic
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\stats.py
        # General Cressie-Read power divergence.
        terms = f_obs * ((f_obs / f_exp)**lambda_ - 1)
        terms /= 0.5 * lambda_ * (lambda_ + 1)
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\stats.py
    # vals = da.where(~zero, (m2, m3),
    #                 lambda m2, m3: m3 / m2**1.5,
    #                 0.)
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\array\tests\test_array_core.py
    # Error on shape mismatch
    pytest.raises(ValueError, lambda: a + y.T)
    pytest.raises(ValueError, lambda: a + np.arange(2))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\bag\core.py
    >>> numbers = db.range(20) # doctest: +SKIP
    >>> fizz = numbers.filter(lambda n: n % 3 == 0) # doctest: +SKIP
    >>> buzz = numbers.filter(lambda n: n % 5 == 0) # doctest: +SKIP
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\bag\core.py
    >>> fizz = numbers.filter(lambda n: n % 3 == 0) # doctest: +SKIP
    >>> buzz = numbers.filter(lambda n: n % 5 == 0) # doctest: +SKIP
    >>> fizzbuzz = db.zip(fizz, buzz) # doctest: +SKIP
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\io\parquet.py
    # Determine valid pieces
    _open = lambda fn: pq.ParquetFile(fs.open(fn, mode='rb'))
    for piece in dataset.pieces:
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_arithmetics_reduction.py
        for s in [ddf1.a, pdf1.a]:    # both must behave the same
            pytest.raises(ValueError, lambda: s.sum(axis=axis))
            pytest.raises(ValueError, lambda: s.prod(axis=axis))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_arithmetics_reduction.py
            # only count doesn't have axis keyword
            pytest.raises(TypeError, lambda: s.count(axis=axis))
            pytest.raises(ValueError, lambda: s.std(axis=axis))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_dataframe.py
    # scalar
    # lambdas are present, so only test cloudpickle
    s = df.A.sum()
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_dataframe.py
    # Test aca without passing in token string
    f = lambda a: a.nlargest(5)
    f2 = lambda a: a.nlargest(3)
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_dataframe.py
    # Should infer as a scalar
    res = aca([ddf.x], chunk=lambda x: pd.Series([x.sum()]),
              aggregate=lambda x: x.sum())
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_dataframe.py
    # specify meta
    assert_eq(ddf.apply(lambda xy: xy[0] + xy[1], axis=1, meta=(None, int)),
              df.apply(lambda xy: xy[0] + xy[1], axis=1))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_dataframe.py
    # specify meta
    func = lambda x: pd.Series([x, x])
    assert_eq(ddf.x.apply(func, meta=[(0, int), (1, int)]), df.x.apply(func))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
    # test raises with incorrect key
    pytest.raises(KeyError, lambda: ddf.groupby('x'))
    pytest.raises(KeyError, lambda: ddf.groupby(['a', 'x']))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
    with pytest.warns(UserWarning):  # meta inference
        assert_eq(ddf.groupby('A').apply(lambda x: x.sum()),
                  pdf.groupby('A').apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
        # SeriesGroupBy
        assert_eq(ddf.groupby('A')['B'].apply(lambda x: x.sum()),
                  pdf.groupby('A')['B'].apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
        # DataFrameGroupBy with column slice
        assert_eq(ddf.groupby('A')[['B', 'C']].apply(lambda x: x.sum()),
                  pdf.groupby('A')[['B', 'C']].apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
        # DataFrameGroupBy
        assert_eq(ddf.groupby(grouper(ddf)).apply(lambda x: x.sum()),
                  pdf.groupby(grouper(pdf)).apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
        # SeriesGroupBy
        assert_eq(ddf.groupby(grouper(ddf))['B'].apply(lambda x: x.sum()),
                  pdf.groupby(grouper(pdf))['B'].apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_groupby.py
        # DataFrameGroupBy with column slice
        assert_eq(ddf.groupby(grouper(ddf))[['B', 'C']].apply(lambda x: x.sum()),
                  pdf.groupby(grouper(pdf))[['B', 'C']].apply(lambda x: x.sum()))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tests\test_rolling.py
    # Provide meta spec, but not full metadata
    res = ddf.map_overlap(lambda df: df.rolling(2).sum(), 2, 0,
                          meta={'x': 'i8', 'y': 'i8'})
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\dataframe\tseries\tests\test_resample.py
    # Frequency doesn't evenly divide day
    pytest.raises(NotImplementedError, lambda: resample(ds, '57T'))

#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\tests\test_base.py
    # any found in other packages.
    inc = np.frompyfunc(lambda x: x + 1, 1, 1)
    assert tokenize(inc) == tokenize(inc)
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\tests\test_delayed.py
    # Immutable
    pytest.raises(TypeError, lambda: setattr(a, 'foo', 1))
    pytest.raises(TypeError, lambda: setitem(a, 1, 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\tests\test_delayed.py
    # Can't iterate, or check if contains
    pytest.raises(TypeError, lambda: 1 in a)
    pytest.raises(TypeError, lambda: list(a))
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\tests\test_delayed.py
    # No dynamic generation of magic/hidden methods
    pytest.raises(AttributeError, lambda: a._hidden())
    # Truth of delayed forbidden
#########################################################################################
C:\Users\muvva\Desktop\testing\dask-master\dask\tests\test_delayed.py
    # Truth of delayed forbidden
    pytest.raises(TypeError, lambda: bool(a))

#########################################################################################
C:\Users\muvva\Desktop\testing\data-science-ipython-notebooks-master\data\titanic\myfirstforest.py
Ports_dict = { name : i for i, name in Ports }              # set up a dictionary in the form  Ports : index
train_df.Embarked = train_df.Embarked.map( lambda x: Ports_dict[x]).astype(int)     # Convert all Embark strings to int

#########################################################################################
C:\Users\muvva\Desktop\testing\data-science-ipython-notebooks-master\data\titanic\myfirstforest.py
# Again convert all Embarked strings to int
test_df.Embarked = test_df.Embarked.map( lambda x: Ports_dict[x]).astype(int)

#########################################################################################
C:\Users\muvva\Desktop\testing\data-science-ipython-notebooks-master\scipy\thinkstats2.py
    # sort by index
    resorted = sorted(ranked, key=lambda trip: trip[1][0])

#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\algorithms.py
        # Vary the population
        offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)

#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\algorithms.py
        # Vary the population
        offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)

#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\cma.py
        # Selection :
        self.lambda_ = params.get("lambda_", 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\cma.py
        # Step size control :
        self.d = params.get("d", 1.0 + self.dim / (2.0 * self.lambda_))
        self.ptarg = params.get("ptarg", 1.0 / (5 + sqrt(self.lambda_) / 2.0))
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\cma.py
        # self.y = numpy.dot(self.A, numpy.random.standard_normal(self.dim))
        arz = numpy.random.standard_normal((self.lambda_, self.dim))
        arz = self.parent + self.sigma * numpy.dot(arz, self.A.T)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\cma.py
        # Each parent produce an offspring
        if self.lambda_ == self.mu:
            for i in range(self.lambda_):
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\deap\gp.py
        # Cutoff point selection
        sortednatural = sorted(naturalpop, key=lambda ind: ind.fitness)
        cutoffcandidates = sortednatural[int(len(population) * rho - 1):]
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\eda\emna.py
        # Generate lambda_ individuals and put them into the provided class
        arz = self.centroid + self.sigma * numpy.random.randn(self.lambda_, self.dim)
        return list(map(ind_init, arz))
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\eda\pbil.py
    # Statistics computation
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", numpy.mean)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\es\cma_bipop.py
        # We start with a centroid in [-4, 4]**D
        strategy = cma.Strategy(centroid=numpy.random.uniform(-4, 4, N), sigma=sigma, lambda_=lambda_)
        toolbox.register("generate", strategy.generate, creator.Individual)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\es\cma_minfct.py
    # for more details about the rastrigin and other tests for CMA-ES    
    strategy = cma.Strategy(centroid=[5.0]*N, sigma=5.0, lambda_=20*N)
    toolbox.register("generate", strategy.generate, creator.Individual)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\es\cma_plotting.py
    # for more details about the rastrigin and other tests for CMA-ES    
    strategy = cma.Strategy(centroid=[5.0]*N, sigma=5.0, lambda_=20*N)
    toolbox.register("generate", strategy.generate, creator.Individual)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\es\cma_plotting.py
    # The x-axis will be the number of evaluations
    x = list(range(0, strategy.lambda_ * NGEN, strategy.lambda_))
    avg, max_, min_ = logbook.select("avg", "max", "min")
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\gp\spambase.py
# terminals
pset.addEphemeralConstant("rand100", lambda: random.random() * 100, float)
pset.addTerminal(False, bool)
#########################################################################################
C:\Users\muvva\Desktop\testing\deap-master\examples\pso\speciation.py
        # Sort swarm into species, best individual comes first
        sorted_swarm = sorted(swarm, key=lambda ind: ind.bestfit, reverse=True)
        species = []
#########################################################################################
C:\Users\muvva\Desktop\testing\DeepLearn-master\Attention_Based_CNN (ABCNN)\model_abcnn.py
                    #h1 = Lambda(lambda a: K.sum(a,axis=1))(attn_pool_1)
                    #h2 = Lambda(lambda a: K.sum(a,axis=2))(attn_pool_2)
                    
#########################################################################################
C:\Users\muvva\Desktop\testing\dejavu-master\setup.py
        # remove spaces
        stripped = map((lambda x: x.strip()), lines)
        # remove comments
#########################################################################################
C:\Users\muvva\Desktop\testing\dejavu-master\setup.py
        # remove comments
        nocomments = filter((lambda x: not x.startswith('#')), stripped)
        # remove empty lines
#########################################################################################
C:\Users\muvva\Desktop\testing\dejavu-master\setup.py
        # remove empty lines
        reqs = filter((lambda x: x), nocomments)
        return reqs
#########################################################################################
C:\Users\muvva\Desktop\testing\denite.nvim-master\rplugin\python3\denite\vim.py
# For Vim8 compatibility module
# https://github.com/lambdalisue/vim-rplugin/blob/master/python3/rplugin.py

#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\contrib\data\knowledge_graph.py
            # sort indices by destination
            edge_list = sorted(edge_list, key=lambda x: (x[1], x[0], x[2]))
            edge_list = np.array(edge_list, dtype=np.int)
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\graph.py
            # mapping from feature name to a list of tensors to be concatenated
            attr_dict = defaultdict(lambda: [None] * self.number_of_edges())
            # each defaultdict value is initialized to be a list of None
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\scheduler.py
    # generate send and reduce schedule
    uv_getter = lambda: (var_u, var_v)
    adj_creator = lambda: spmv.build_adj_matrix_uv((u, v), recv_nodes, graph.number_of_nodes())
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\scheduler.py
        # generate send and reduce schedule
        uv_getter = lambda: (var_u, var_v)
        adj_creator = lambda: spmv.build_adj_matrix_uv((u, v), pull_nodes, graph.number_of_nodes())
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\scheduler.py
        # generate send and reduce schedule
        uv_getter = lambda: (var_u, var_v)
        adj_creator = lambda: spmv.build_adj_matrix_uv((u, v), dest_nodes,
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\spmv.py
    # inc mat will not use data tensor so conversion index is not needed
    return lambda ctx: graph.block_incidence_matrix(block_id, 'in', ctx)[0], None

#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\spmv.py
    # inc mat will not use data tensor so conversion index is not needed
    return lambda ctx: gidx.incidence_matrix('in', ctx)[0], None

#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\runtime\spmv.py
    # inc mat will not use data tensor so conversion index is not needed
    return utils.CtxCachedObject(lambda ctx: F.copy_to(mat, ctx)), None

#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\subgraph.py
        # The parent eid might be lazily evaluated and thus may not
        # be an index. Instead, it's a lambda function that returns
        # an index.
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\python\dgl\_ffi\base.py
    # to convert ctypes.char_p .value back to python str
    py_str = lambda x: x.decode('utf-8')
else:
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\tests\compute\test_frame.py
    # add new partial column should fail with error initializer
    f.set_initializer(lambda shape, dtype : assert_(False))
    def failed_add_col():
#########################################################################################
C:\Users\muvva\Desktop\testing\dgl-master\tests\compute\test_frame.py
    # setting rows with new column should raise error with error initializer
    f.set_initializer(lambda shape, dtype : assert_(False))
    def failed_update_rows():
#########################################################################################
C:\Users\muvva\Desktop\testing\Diamond-master\src\collectors\netscalersnmp\netscalersnmp.py
            # Filter excluded service types
            if serviceType in map(lambda v: int(v),
                                  self.config.get('exclude_service_type')):
#########################################################################################
C:\Users\muvva\Desktop\testing\Diamond-master\src\collectors\netscalersnmp\netscalersnmp.py
            # Filter excluded service states
            if serviceState in map(lambda v: int(v),
                                   self.config.get('exclude_service_state')):
#########################################################################################
C:\Users\muvva\Desktop\testing\Diamond-master\src\collectors\netscalersnmp\netscalersnmp.py
            # filter excluded vserver types
            if vserverType in map(lambda v: int(v),
                                  self.config.get('exclude_vserver_type')):
#########################################################################################
C:\Users\muvva\Desktop\testing\Diamond-master\src\collectors\netscalersnmp\netscalersnmp.py
            # Filter excluded vserver state
            if vserverState in map(lambda v: int(v),
                                   self.config.get('exclude_vserver_state')):
#########################################################################################
C:\Users\muvva\Desktop\testing\dirsearch-master\thirdparty\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # because self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\discord.py-master\discord\channel.py
                # accidentally quadratic
                target = utils.find(lambda r: r.id == ow.id, self.server.roles)
            elif ow.type == 'member':
#########################################################################################
C:\Users\muvva\Desktop\testing\discord.py-master\discord\gateway.py
        # an empty dispatcher to prevent crashes
        self._dispatch = lambda *args: None
        # generic event listeners
#########################################################################################
C:\Users\muvva\Desktop\testing\discord.py-master\discord\message.py
        # clear the cached properties
        cached = filter(lambda attr: attr[0] == '_', self.__slots__)
        for attr in cached:
#########################################################################################
C:\Users\muvva\Desktop\testing\discord.py-master\discord\state.py
            # sort the roles by ID since they can be "randomised"
            member.roles.sort(key=lambda r: int(r.id))
            self.dispatch('member_update', old_member, member)
#########################################################################################
C:\Users\muvva\Desktop\testing\Django-facebook-master\docs\docs_env\Lib\site-packages\pip-1.0-py2.5.egg\pip\commands\search.py
    # each record has a unique name now, so we will convert the dict into a list sorted by score
    package_list = sorted(packages.values(), key=lambda x: x['score'], reverse=True)
    return package_list
#########################################################################################
C:\Users\muvva\Desktop\testing\django-fsm-master\django_fsm\__init__.py
        # Select state fields to filter on
        filter_on = filter(lambda field: field.model == base_qs.model, self.state_fields)

#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\contrib\admin\sites.py
        # Sort the apps alphabetically.
        app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())

#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\contrib\admin\sites.py
        # Sort the models alphabetically within each app.
        app_dict['models'].sort(key=lambda x: x['name'])
        app_name = apps.get_app_config(app_label).verbose_name
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\contrib\sessions\backends\file.py
            # the create() method.
            session.create = lambda: None
            session.load()
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\core\management\commands\makemessages.py
            r'^(#: .*)(' + re.escape(old_path) + r')',
            lambda match: match.group().replace(old_path, new_path),
            msgs,
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\db\migrations\serializer.py
        # Further error checking
        if self.value.__name__ == '<lambda>':
            raise ValueError("Cannot serialize function: lambda")
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\db\migrations\state.py
        # to their index in the MRO.
        flattened_bases = sorted(set(flatten_bases(model)), key=lambda x: model.__mro__.index(x))

#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\db\migrations\state.py
        # Sort all managers by their creation counter
        sorted_managers = sorted(self.managers, key=lambda v: v[1].creation_counter)
        for mgr_name, manager in sorted_managers:
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\db\migrations\writer.py
        # "from" in "from ... import ..." or after "import" in "import ...").
        sorted_imports = sorted(imports, key=lambda i: i.split()[1])
        items["imports"] = "\n".join(sorted_imports) + "\n" if imports else ""
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\db\models\options.py
        # pass these three filters as filters to the generator.
        # The third lambda is a longwinded way of checking f.related_model - we don't
        # use that property directly because related_model is a cached property,
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\template\smartif.py
# Operator precedence follows Python.
# We defer variable evaluation to the lambda to ensure that terms are
# lazily evaluated using Python's boolean parsing logic.
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\test\client.py
        # Attach the ResolverMatch instance to the response.
        response.resolver_match = SimpleLazyObject(lambda: resolve(request['PATH_INFO']))
        # Flatten a single context. Not really necessary anymore thanks to the
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\utils\autoreload.py
        # Group sorted watched_files by their parent directory.
        sorted_files = sorted(watched_files, key=lambda p: p.parent)
        for directory, group in itertools.groupby(sorted_files, key=lambda p: p.parent):
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\django\utils\translation\trans_real.py
        # pluralization: anything except one is pluralized.
        self.plural = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\tests\auth_tests\test_management.py
        # 'Julia' with accented 'u':
        management.get_system_username = lambda: 'J\xfalia'
        self.assertEqual(management.get_default_username(), 'julia')
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\tests\generic_relations\tests.py
        # Original list of tags:
        self.comp_func = lambda obj: (
            obj.tag, obj.content_type.model_class(), obj.object_id
#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\tests\prefetch_related\models.py
        # Assume business logic forces every person to have at least one house.
        return sorted(self.houses.all(), key=lambda house: -house.rooms.count())[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\django-master\tests\urlpatterns\tests.py
        # \u0394 is "GREEK CAPITAL LETTER DELTA", a valid identifier.
        p = path('hello/<str:\u0394>/', lambda r: None)
        match = p.resolve('hello/1/')
#########################################################################################
C:\Users\muvva\Desktop\testing\django-oauth-toolkit-master\oauth2_provider\oauth2_validators.py
                # slightly inefficient on Python2, but the queryset contains only one instance
                list(map(lambda t: t.revoke(), other_type.objects.filter(token=token)))

#########################################################################################
C:\Users\muvva\Desktop\testing\django-rest-framework-master\rest_framework\request.py
        # plaintext or html error responses.
        self._request.is_ajax = lambda: value

#########################################################################################
C:\Users\muvva\Desktop\testing\dpark-master\examples\cos.py
# print 'sim', final.first()
final = final.reduceByKey(lambda x, y: x + y).mapValue(lambda x: sorted(x, reverse=True)[:5])
print('final', final.count())
#########################################################################################
C:\Users\muvva\Desktop\testing\dpark-master\examples\cos_c.py
# print 'sim', final.first()
final = final.reduceByKey(lambda x, y: x + y).mapValue(lambda x: sorted(x, reverse=True)[:5])
print('final', final.count())
#########################################################################################
C:\Users\muvva\Desktop\testing\dpark-master\examples\demo.py
# text search
f = dpark.textFile("./", ext='py').map(lambda x: x.strip())
log = f.filter(lambda line: 'logging' in line).cache()
#########################################################################################
C:\Users\muvva\Desktop\testing\dpark-master\examples\demo.py
# word count
counts = f.flatMap(lambda x: x.split()).map(lambda x: (x, 1)).reduceByKey(lambda x, y: x + y).cache()
pprint(counts.filter(lambda __v1: __v1[1] > 50).collectAsMap())
#########################################################################################
C:\Users\muvva\Desktop\testing\dpark-master\tests\test_dstream.py
    #    def op(s):
    #        return s.map(lambda x:(x % 10, 1)).window(2, 1).window(4, 2)
    #    ssc = self._setupStreams(d, None, op)
#########################################################################################
C:\Users\muvva\Desktop\testing\dulwich-master\dulwich\contrib\release_robot.py
    # return list of tags sorted by their datetimes from newest to oldest
    return sorted(tags.items(), key=lambda tag: tag[1][0], reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\dulwich-master\dulwich\tests\test_refs.py
        # HEAD is now a broken symref
        self.assertRaises(KeyError, lambda: self._refs[b'HEAD'])
        self.assertEqual(b'ref: refs/heads/master',
#########################################################################################
C:\Users\muvva\Desktop\testing\Eel-master\examples\02 - callbacks\callbacks.py
# Do the same with an inline callback
eel.js_random()(lambda n: print('Got this from Javascript:', n))

#########################################################################################
C:\Users\muvva\Desktop\testing\erpnext-master\erpnext\accounts\general_ledger.py
	# filter zero debit and credit entries
	merged_gl_map = filter(lambda x: flt(x.debit, 9)!=0 or flt(x.credit, 9)!=0, merged_gl_map)
	merged_gl_map = list(merged_gl_map)
#########################################################################################
C:\Users\muvva\Desktop\testing\erpnext-master\erpnext\agriculture\doctype\crop\crop.py
		# maintaining the order for same-day tasks
		self.agriculture_task.sort(key=lambda task: task.start_day)

#########################################################################################
C:\Users\muvva\Desktop\testing\erpnext-master\erpnext\erpnext_integrations\doctype\quickbooks_migrator\quickbooks_migrator.py
						# Invoice saved as a Journal Entry must have party and party_type set on line containing Receivable Account
						customer_account_line = list(filter(lambda acc: acc.party_type == "Customer", journal_entry.accounts))[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\erpnext-master\erpnext\manufacturing\doctype\work_order\work_order.py
				# For instance in BOM Explosion Item child table, the items coming from sub assembly items
				for item in sorted(item_dict.values(), key=lambda d: d['idx'] or 9999):
					self.append('required_items', {
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\io\mongo\mongo.py
            # when SCHEMA_ENDPOINT is active, 'coerce' rule is likely to
            # contain a lambda/callable which can't be jSON serialized
            # (and we probably don't want it to be exposed anyway). See #790.
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\methods\common.py
    # NOTE(Gonéri): We resolve the embedded documents at the end.
    for field in sorted(embedded_fields, key=lambda a: a.count(".")):
        data_relation = field_definition(resource, field)["data_relation"]
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=all requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_item += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=diffs requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_item += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=all requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_item_contacts += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=diffs requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_item_contacts += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=all requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_diffs += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=diffs requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_diffs += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=all requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_diffs_contacts += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\eve-master\eve\tests\versioning.py
        # check for ?version=diffs requests
        devent = DummyEvent(lambda: True)
        self.app.on_fetched_diffs_contacts += devent
#########################################################################################
C:\Users\muvva\Desktop\testing\factory_boy-master\factory\base.py
        # values = kwargs.values()
        values = [v for k, v in sorted(kwargs.items(), key=lambda item: int(item[0]))]
        return model_class(values)
#########################################################################################
C:\Users\muvva\Desktop\testing\factory_boy-master\tests\test_using.py
            # biggest = 'b' if .b > .a else 'a'
            biggest = factory.Maybe(factory.LazyAttribute(lambda o: o.a < o.b), 'b', 'a')
            # max_value = .b if .b > .a else .a = max(.a, .b)
#########################################################################################
C:\Users\muvva\Desktop\testing\fail2ban-master\fail2ban\tests\actiontestcase.py
		# Error will now trip, demonstrating delayed call
		self.assertRaises(ValueError, lambda x: "%(error)i" % x, mymap)

#########################################################################################
C:\Users\muvva\Desktop\testing\fail2ban-master\fail2ban\tests\filtertestcase.py
			# on those where text file lines end with '\r\n', remove '\r'
			srepr = lambda x: repr(x).replace(r'\r', '')
		else:
#########################################################################################
C:\Users\muvva\Desktop\testing\fairseq-master\fairseq\sequence_generator.py
                    # find new worst finalized hypo for this sentence
                    idx, s = min(enumerate(finalized[sent]), key=lambda r: r[1]['score'])
                    worst_finalized[sent] = {
#########################################################################################
C:\Users\muvva\Desktop\testing\fairseq-master\interactive.py
        # sort output to match input order
        for id, src_tokens, hypos in sorted(results, key=lambda x: x[0]):
            if src_dict is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\faker-master\faker\providers\automotive\ar_SA\__init__.py
            r'\#',
            lambda x: self.PLATE_MAP[nums.pop()],
            self.LICENSE_FORMAT_AR,
#########################################################################################
C:\Users\muvva\Desktop\testing\fbs-master\fbs_runtime\_signal.py
        # the signal handler, so add a dummy handler first
        self.readyRead.connect(lambda : None)
        # Second handler does the real handling
#########################################################################################
C:\Users\muvva\Desktop\testing\featuretools-master\featuretools\demo\flight.py
    # Combine strings like 0130 (1:30 AM) with dates (2017-01-01)
    clean_data['scheduled_dep_time'] = clean_data['scheduled_dep_time'].apply(lambda x: str(x)) + clean_data['flight_date'].astype('str')

#########################################################################################
C:\Users\muvva\Desktop\testing\featuretools-master\featuretools\primitives\base\aggregation_primitive_base.py
        # creates a lambda function that returns function every time
        new_class.get_function = lambda self, f=function: f

#########################################################################################
C:\Users\muvva\Desktop\testing\featuretools-master\featuretools\primitives\base\transform_primitive_base.py
        # creates a lambda function that returns function every time
        new_class.get_function = lambda self, f=function: f

#########################################################################################
C:\Users\muvva\Desktop\testing\featuretools-master\featuretools\tests\primitive_tests\test_agg_feats.py
    # test with lambdas
    Sum = make_agg_primitive(lambda x: x.sum(), input_types=[Numeric],
                             return_type=Numeric, name="sum")
#########################################################################################
C:\Users\muvva\Desktop\testing\FeelUOwn-master\mpv.py
            # INVALID_PARAMETER when setting a property-mapped option to an invalid value.
            -9:     lambda *a: TypeError('Tried to get/set mpv property using wrong format, or passed invalid value', *a),
            -10:    lambda *a: PropertyUnavailableError('mpv property is not available', *a),
#########################################################################################
C:\Users\muvva\Desktop\testing\FeelUOwn-master\mpv.py
            # This is necessary since otherwise the event thread would deadlock itself.
            grim_reaper = threading.Thread(target=lambda: _mpv_terminate_destroy(handle))
            grim_reaper.start()
#########################################################################################
C:\Users\muvva\Desktop\testing\flanker-master\tests\addresslib\validator_test.py
        # This is how `dnsq` actually returns mx_records. Emulating it in tests
        lookup_results = filter(lambda x: True, lookup_results)

#########################################################################################
C:\Users\muvva\Desktop\testing\flanker-master\tests\mime\message\headers\headers_test.py
    # transform tracks whether anything actually changed
    h.transform(lambda key,val: (key, val))
    assert_false(h.have_changed())
#########################################################################################
C:\Users\muvva\Desktop\testing\flanker-master\tests\mime\message\headers\headers_test.py
    # ok, now something have changed, make sure we've preserved order and did not collapse anything
    h.transform(lambda key,val: ("X-{0}".format(key), "t({0})".format(val)))
    ok_(h.have_changed())
#########################################################################################
C:\Users\muvva\Desktop\testing\flanker-master\tests\mime\message\headers\headers_test.py
    # transform should decode it for us when we pass decode=True
    h.transform(lambda key,val: (key, val.replace(u'✓', u'☃')), decode=True)
    eq_(u'Hello ☃', h.get('Subject'))
#########################################################################################
C:\Users\muvva\Desktop\testing\flask-ask-master\flask_ask\core.py
            # AWS Lambda function. By default, AWS calls this function
            # lambda_handler.
            def lambda_handler(event, _context):
#########################################################################################
C:\Users\muvva\Desktop\testing\flask-ask-master\flask_ask\core.py
            # lambda_handler.
            def lambda_handler(event, _context):
                return ask.run_aws_lambda(event)
#########################################################################################
C:\Users\muvva\Desktop\testing\flask-ask-master\flask_ask\core.py
        # calbacks for on_playback requests are optional
        view_func = self._intent_view_funcs.get(player_request_type, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\flask-ask-master\samples\tidepooler\tidepooler.py
    # http://stackoverflow.com/a/20007730/1163855
    ordinal = lambda n: "%d%s" % (n,"tsnrhtdd"[(n/10%10!=1)*(n%10<4)*n%10::4])
    month_and_day_of_week = dt.strftime('%A %B')
#########################################################################################
C:\Users\muvva\Desktop\testing\flask-oauthlib-master\flask_oauthlib\provider\oauth1.py
                # didn't match when doing the testing
                server._check_signature = lambda *args, **kwargs: True
            return server
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\core\user\update.py
    # TODO(anr): Change to str.lower once Python2 is dropped
    old_email = attr.ib(converter=lambda x: x.lower())
    new_email = attr.ib(converter=lambda x: x.lower())
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\forum\views.py
                # TODO(anr): consider the referrer -- for now, back to topic
                endpoint=lambda *a, **k: current_topic.url
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\forum\views.py
                # TODO(anr): consider the referrer -- for now, back to topic
                endpoint=lambda *a, **k: current_topic.url
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\forum\views.py
                # TODO(anr): consider the referrer -- for now, back to topic
                endpoint=lambda *a, **k: current_topic.url
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\forum\views.py
                # TODO(anr): consider the referrer -- for now, back to topic
                endpoint=lambda *a, **k: current_topic.url
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\forum\views.py
                # TODO(anr): consider the referrer -- for now, back to topic
                endpoint=lambda *a, **k: current_topic.url
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\flaskbb-master\flaskbb\utils\helpers.py
            # to add query params on...
            endpoint_ = lambda *a, **k: url_for(endpoint)  # noqa
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\flexx-master\flexx\app\bsdf_lite.py
# Defining extensions as a dict would be more compact and feel lighter, but
# that would only allow lambdas, which is too limiting, e.g. for ndarray
# extension.
#########################################################################################
C:\Users\muvva\Desktop\testing\flexx-master\flexx\app\tests\test_live.py
    # too much to be worthwhile.
    c1 = app.App(PyComponentA, foo=lambda:shared.foo).launch()
    c2 = app.App(PyComponentA, foo=lambda:shared.foo).launch()
#########################################################################################
C:\Users\muvva\Desktop\testing\flexx-master\flexx\ui\layouts\_form.py
        # What is the cumulative "flex-value"?
        cum_vflex = vflexes.reduce(lambda pv, cv: pv + cv, 0)
        cum_hflex = hflexes.reduce(lambda pv, cv: pv + cv, 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\flexx-master\flexx\ui\widgets\_dropdown.py
        # <div class='flx-dd-strud'>&nbsp;</div>
        f2 = lambda e: self._submit_text() if e.which == 13 else None
        return [create_element('span',
#########################################################################################
C:\Users\muvva\Desktop\testing\flexx-master\flexxamples\howtos\oneliners.py
# This is the line that this is about
g = Greeter(message=lambda: p.first_name + ' ' + p.last_name)

#########################################################################################
C:\Users\muvva\Desktop\testing\fn.py-master\fn\immutable\list.py
        # in other case we need to copy right to left before
        d = reduce(lambda acc, el: acc.cons(el), self.right, LinkedList())
        return d.head, Queue(d.tail, LinkedList())
#########################################################################################
C:\Users\muvva\Desktop\testing\fn.py-master\tests.py
        self.assertEqual(0, len(v)) # previous value didn't change
        up = reduce(lambda acc, el: acc.cons(el), range(513), Vector())
        self.assertEqual(513, len(up))
#########################################################################################
C:\Users\muvva\Desktop\testing\fn.py-master\tests.py
        # long vector
        up = reduce(lambda acc, el: acc.assoc(el, el*2), range(1500), Vector())
        self.assertEqual(2800, up.get(1400))
#########################################################################################
C:\Users\muvva\Desktop\testing\folium-master\folium\features.py
    >>> # Provide a style_function that color all states green but Alabama.
    >>> style_function = lambda x: {'fillColor': '#0000ff' if
    ...                             x['properties']['name']=='Alabama' else
#########################################################################################
C:\Users\muvva\Desktop\testing\folium-master\folium\features.py
    >>> # Provide a style_function that color all states green but Alabama.
    >>> style_function = lambda x: {'fillColor': '#0000ff' if
    ...                             x['properties']['name']=='Alabama' else
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\cffLib\width.py
	# Cost per nominal choice, without default consideration.
	nomnCostU = missingdict(lambda x: cumFrqU[x] + cumFrqU[x-108] + cumFrqU[x-1132]*3)
	nomnCostD = missingdict(lambda x: cumFrqD[x] + cumFrqD[x+108] + cumFrqD[x+1132]*3)
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\cffLib\width.py
	# Cost-saving per nominal choice, by best default choice.
	dfltCostU = missingdict(lambda x: max(cumMaxU[x], cumMaxU[x-108]*2, cumMaxU[x-1132]*5))
	dfltCostD = missingdict(lambda x: max(cumMaxD[x], cumMaxD[x+108]*2, cumMaxD[x+1132]*5))
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\cffLib\width.py
	# Combined cost per nominal choice.
	bestCost  = missingdict(lambda x: nomnCost[x] - dfltCost[x])

#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\cffLib\width.py
	# Best nominal.
	nominal = min(domain, key=lambda x: bestCost[x])

#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\feaLib\builder.py
        # https://github.com/fonttools/fonttools/issues/568
        sortFeatureTag = lambda f: (f[0][2], f[0][1], f[0][0], f[1])
        for key, lookups in sorted(self.features_.items(), key=sortFeatureTag):
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\fontBuilder.py
# to insert in setupNameTable doc string:
# print("\n".join(("%s (nameID %s)" % (k, v)) for k, v in sorted(_nameIDs.items(), key=lambda x: x[1])))

#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\merge.py
	5: bitwise_and, # Font is vertical
	6: lambda bit: 0, # Always set to zero
	11: bitwise_and, # Font data is 'lossless'
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\merge.py
	14: bitwise_and, # Last resort font. FIXME? equal or first may be better
	15: lambda bit: 0, # Always set to zero
}
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\merge.py
	# TODO: Merge duplicate entries
	'BaseScriptRecord': lambda lst: sorted(sumLists(lst), key=lambda s: s.BaseScriptTag),
}
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\otlLib\builder.py
    # by glyph ID so that our output is deterministic.
    result.sort(key=lambda t: _getSinglePosTableKey(t, glyphMap))
    return result
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\otlLib\builder.py
        # in the output file. We don't get this right with the key below.
        result = sorted(self.classes_, key=lambda s: (len(s), s), reverse=True)
        if not self.useClass0_:
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\otConverters.py
	# "Template" types
	"AATLookup":	lambda C: partial(AATLookup, tableClass=C),
	"AATLookupWithDataOffset":	lambda C: partial(AATLookupWithDataOffset, tableClass=C),
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\otTables.py
		# suffixes.
		for a in sorted(actions, key=lambda x:(-len(x), x)):
			if a not in actionIndex:
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\otTables.py
		# shorter ones.
		for action in sorted(actions, key=lambda x:(-len(x), x)):
			# We insert all sub-sequences of the action glyph sequence
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\otTables.py
			# this when writing font out.
			sorted_ranges = sorted(ranges, key=lambda a: a.StartCoverageIndex)
			if ranges != sorted_ranges:
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\S__i_l_f.py
        # build it all up backwards
        oActions = reduce(lambda a, x: (a[0]+len(x), a[1]+[a[0]]), self.actions + [b""], (0, []))[1]
        oConstraints = reduce(lambda a, x: (a[0]+len(x), a[1]+[a[0]]), self.ruleConstraints + [b""], (1, []))[1]
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Lib\fontTools\ttLib\tables\TupleVariation.py
			# when starting a new run (40 66 66 00 02 40 77 77).
			isByteEncodable = lambda value: value >= -128 and value <= 127
			if isByteEncodable(value) and pos+1 < numDeltas and isByteEncodable(deltas[pos+1]):
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Tests\subset\subset_test.py
        # Look for a few things we know should happen
        self.assertTrue(filter(lambda l: l.args['msg'] == "load 'cmap'", logs))
        self.assertTrue(filter(lambda l: l.args['msg'] == "subset 'cmap'", logs))
#########################################################################################
C:\Users\muvva\Desktop\testing\fonttools-master\Tests\ttLib\tables\TupleVariation_test.py
		numPointsInGlyph = 500  # greater than 255, so we also exercise code path for 16-bit encoding
		compile = lambda points: TupleVariation.compilePoints(points, numPointsInGlyph)
		decompile = lambda data: set(TupleVariation.decompilePoints_(numPointsInGlyph, data, 0, "gvar")[0])
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\edge\__init__.py
                ('nb_trades', 'count'),  # number of all trades
                ('profit_sum', lambda x: x[x > 0].sum()),  # cumulative profit of all winning trades
                ('loss_sum', lambda x: abs(x[x < 0].sum())),  # cumulative loss of all losing trades
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\edge\__init__.py
                ('profit_sum', lambda x: x[x > 0].sum()),  # cumulative profit of all winning trades
                ('loss_sum', lambda x: abs(x[x < 0].sum())),  # cumulative loss of all losing trades
                ('nb_win_trades', lambda x: x[x > 0].count())  # number of winning trades
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\edge\__init__.py
                ('loss_sum', lambda x: abs(x[x < 0].sum())),  # cumulative loss of all losing trades
                ('nb_win_trades', lambda x: x[x > 0].count())  # number of winning trades
            ],
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\exchange\__init__.py
        # Sort data again after extending the result - above calls return in "async order"
        data = sorted(data, key=lambda x: x[0])
        logger.info("downloaded %s with length %s.", pair, len(data))
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\exchange\__init__.py
                # get next-higher step in the limit_range list
                limit = min(list(filter(lambda x: limit <= x, limit_range)))
                # above script works like loop below (but with slightly better performance):
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\optimize\backtesting.py
                    # Interface.py skips on trade_duration <= duration
                    roi_entry = max(list(filter(lambda x: trade_dur >= x,
                                                self.strategy.minimal_roi.keys())))
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\strategy\interface.py
        # Get highest entry in ROI dict where key >= trade-duration
        roi_entry = max(list(filter(lambda x: trade_dur >= x, self.minimal_roi.keys())))
        threshold = self.minimal_roi[roi_entry]
#########################################################################################
C:\Users\muvva\Desktop\testing\freqtrade-master\freqtrade\tests\conftest.py
    # and we want to match line against foobar in the tuple
    return reduce(lambda a, b: a or b,
                  filter(lambda x: x[2] == line, logs),
#########################################################################################
C:\Users\muvva\Desktop\testing\funcy-master\tests\test_funcs.py
    assert curry(__add__)(10)(1) == 11  # Introspect builtin
    assert curry(lambda x,y,z: x+y+z)('a')('b')('c') == 'abc'

#########################################################################################
C:\Users\muvva\Desktop\testing\funcy-master\tests\test_interface.py
    # NOTE: we are testing this way and not with all() to immediately get a list of offenders
    assert [name for name, f in exports if f.__name__ in ('<lambda>', '_decorator')] == []
    assert [name for name, f in exports if f.__doc__ is None] == []
#########################################################################################
C:\Users\muvva\Desktop\testing\furl-master\furl\furl.py
except ImportError:  # Graceful fallback if IceCream isn't installed.
    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)  # noqa

#########################################################################################
C:\Users\muvva\Desktop\testing\fuzzywuzzy-master\fuzzywuzzy\process.py
            # alpha sort
            filtered = sorted(filtered, key=lambda x: x[0])
            # length sort
#########################################################################################
C:\Users\muvva\Desktop\testing\fuzzywuzzy-master\fuzzywuzzy\process.py
            # length sort
            filter_sort = sorted(filtered, key=lambda x: len(x[0]), reverse=True)
            # take first item as our 'canonical example'
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\gam.py
  # sort results similar to how they list in admin console
  csvRows.sort(key=lambda x: x[u'orgUnitPath'].lower(), reverse=False)
  writeCSVfile(csvRows, titles, u'Orgs', todrive)
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\googleapiclient\discovery.py
          # msgRoot should not write out it's own headers
          setattr(msgRoot, '_write_headers', lambda self: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\googleapiclient\http.py
    # Message should not write out it's own headers.
    setattr(message, '_write_headers', lambda self: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\passlib\handlers\bcrypt.py
    # clone bcrypt's ident aliases so they can be used here as well...
    ident_aliases = (lambda ident_values: dict(item for item in bcrypt.ident_aliases.items()
                                               if item[1] in ident_values))(ident_values)
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\passlib\tests\test_totp.py
        # require returns non-negative value
        self.assertRaisesRegex(AssertionError, msg_re, TOTP.using, now=lambda: -1)

#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\passlib\tests\test_totp.py
        # time dependant bits...
        otp.now = lambda : 1419622739.5
        self.assertEqual(result.remaining, 0.5)
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\passlib\tests\test_totp.py
        # omitting value should use current time
        otp2 = TOTP.using(now=lambda: time)(key=otp.base32_key)
        self.assertEqual(otp2.generate().token, token)
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\codec\ber\decoder.py
                if not options.get('recursiveFlag', True) and not substrateFun:  # deprecate this
                    substrateFun = lambda a, b, c: (a, b[:c])

#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    ints2octs = lambda s: ''.join([int2oct(x) for x in s])
    null = ''
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2ints = lambda s: [oct2int(x) for x in s]
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    str2octs = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2str = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    isOctetsType = lambda s: isinstance(s, str)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    isStringType = lambda s: isinstance(s, (str, unicode))
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    int2oct = lambda x: ints2octs((x,))
    null = ints2octs()
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    oct2int = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2ints = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    str2octs = lambda x: x.encode('iso-8859-1')
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2str = lambda x: x.decode('iso-8859-1')
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    isOctetsType = lambda s: isinstance(s, bytes)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\GAM-master\src\pyasn1\compat\octets.py
    # noinspection PyPep8
    isStringType = lambda s: isinstance(s, str)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\gef-master\gef.py
        # sort by command name
        self.loaded_commands = sorted(self.loaded_commands, key=lambda x: x[1]._cmdline_)

#########################################################################################
C:\Users\muvva\Desktop\testing\gef-master\scripts\ida_gef.py
        # post it to the ida main thread to prevent race conditions
        idaapi.execute_sync(lambda: idc.Jump(_current_instruction), idaapi.MFF_WRITE)

#########################################################################################
C:\Users\muvva\Desktop\testing\geopandas-master\geopandas\tests\test_pandas_methods.py
    # applying on the geometry column
    res = df.groupby('value2')['geometry'].apply(lambda x: x.cascaded_union)
    exp = pd.Series([shapely.geometry.MultiPoint([(0, 0), (2, 2)]),
#########################################################################################
C:\Users\muvva\Desktop\testing\geopandas-master\geopandas\tests\test_types.py
            # suppress it
            assert type(self.pts.select(lambda x: x % 2 == 0)) is GeoSeries

#########################################################################################
C:\Users\muvva\Desktop\testing\geopandas-master\geopandas\tools\sjoin.py
    # insert the bounds in the rtree spatial index
    right_df_bounds = right_df.geometry.apply(lambda x: x.bounds)
    stream = ((i, b, None) for i, b in enumerate(right_df_bounds))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\benchmarks\bench_dns_resolver.py
    # severe disadvantage. We turn that off here.
    res._getaliases = lambda hostname, family: []

#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\libuv\watcher.py
        # and test__core uses it too
        fd = property(lambda self: getattr(self._watcher_ref, '_fd', -1),
                      lambda self, nv: self._watcher_ref._set_fd(nv))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\os.py
        # replaced by the signal module.
        _on_child_hook = lambda: None

#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__core_fork.py
    # Use a thread to make us multi-threaded
    hub.threadpool.apply(lambda: None)
    # If the Queue is global, q.get() hangs on Windows; must pass as
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__greenlet.py
        # manually that they are
        p = gevent.spawn(lambda: 5)
        results = []
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
# setting up signal does not affect join()
gevent.signal(1, lambda: None)  # wouldn't work on windows

#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
        # exiting because the spawned greenlet finished execution (spawn (=callback) variant)
        x = gevent.spawn(lambda: 5)
        with self.runs_in_no_time():
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
        # exiting because the spawned greenlet finished execution (spawn_later (=timer) variant)
        x = gevent.spawn_later(SMALL_TICK, lambda: 5)
        with self.runs_in_given_time(SMALL_TICK):
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
        # exiting because of timeout (the spawned greenlet still runs)
        x = gevent.spawn_later(10, lambda: 5)
        with self.runs_in_given_time(SMALL_TICK):
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
        # exiting because of event (the spawned greenlet still runs)
        x = gevent.spawn_later(10, lambda: 5)
        event = Event()
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__hub_join_timeout.py
        # checking "ref=False" argument
        gevent.get_hub().loop.timer(10, ref=False).start(lambda: None)
        with self.runs_in_no_time():
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\tests\test__threadpool.py
            # Adding the callback again runs immediately
            future.add_done_callback(lambda f: calledback.append(True))
            self.assertEqual(calledback, [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_fileobjectcommon.py
                  # that, but we still support it.
                  lambda s, nv: setattr(s, '_io', nv) or s._do_delegate_methods())

#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_socket2.py
    # we could either patch in place:
    #_fileobject.__enter__ = lambda self: self
    #_fileobject.__exit__ = lambda self, *args: self.close() if not self.closed else None
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_socket2.py
    #_fileobject.__enter__ = lambda self: self
    #_fileobject.__exit__ = lambda self, *args: self.close() if not self.closed else None
    # or we could subclass. subclassing has the benefit of not
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_socket3.py
        # provide.
        timeout = property(lambda s: s.gettimeout(),
                           lambda s, nv: s.settimeout(nv))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_ssl2.py
    # pywsgi can depend on that.
    SSLSocket.timeout = property(lambda self: self.gettimeout(),
                                 lambda self, value: self.settimeout(value))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\gevent\_sslgte279.py
    # pywsgi can depend on that.
    SSLSocket.timeout = property(lambda self: self.gettimeout(),
                                 lambda self, value: self.settimeout(value))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.5\test_subprocess.py
            # on error.
            func = lambda: None
            gc.enable()
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.6\test_asyncore.py
        # run the thread 500 ms: the socket should be connected in 200 ms
        t = threading.Thread(target=lambda: asyncore.loop(timeout=0.1,
                                                          count=5))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.6\test_subprocess.py
            # on error.
            func = lambda: None
            gc.enable()
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.6pypy\test_subprocess.py
            # on error.
            func = lambda: None
            gc.enable()
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.7\test_asyncore.py
        # run the thread 500 ms: the socket should be connected in 200 ms
        t = threading.Thread(target=lambda: asyncore.loop(timeout=0.1,
                                                          count=5))
#########################################################################################
C:\Users\muvva\Desktop\testing\gevent-master\src\greentest\3.7\test_subprocess.py
            # on error.
            func = lambda: None
            gc.enable()
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\models\selection.py
    # to provide higher-level pseudo-selections.
    unstaged = property(lambda self:
                        self.unmerged + self.modified + self.untracked)
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\qtutils.py
    # Some versions of Qt send the `bool` argument to the clicked callback,
    # and some do not.  The lambda consumes all callback-provided arguments.
    button.clicked.connect(lambda *args, **kwargs: fn())
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\qtutils.py
    # and some do not.  The lambda consumes all callback-provided arguments.
    button.clicked.connect(lambda *args, **kwargs: fn())

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\browse.py
    # Read-only mode property
    mode = property(lambda self: self.model.mode)

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\commitmsg.py
            # description starts at line 2
            lambda row, col: self.cursor_changed.emit(row + 2, col))

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\diff.py
        # Observe the image mode combo box
        options.image_mode.currentIndexChanged.connect(lambda _: self.render())
        options.zoom_mode.currentIndexChanged.connect(lambda _: self.render())
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\main.py
    # Accessors
    mode = property(lambda self: self.model.mode)

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\status.py
    # Read-only access to the mode state
    mode = property(lambda self: self.m.mode)

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\text.py
        # Translate cursorPositionChanged into cursor_changed(int, int)
        widget.cursorPositionChanged.connect(lambda old, new: self.emit())

#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\toolbarcmds.py
#         'title': 'Start Interactive Rebase...',
#         'action': lambda: app().activeWindow().rebase_start(),
#         'icon': None
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\toolbarcmds.py
#         'title': 'Edit...',
#         'action': lambda: cmds.rebase_edit_todo(),
#         'icon': None
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\toolbarcmds.py
#         'title': 'Continue',
#         'action': lambda: cmds.rebase_continue(),
#         'icon': None
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\toolbarcmds.py
#         'title': 'Skip Current Patch',
#         'action': lambda: cmds.rebase_skip(),
#         'icon': None
#########################################################################################
C:\Users\muvva\Desktop\testing\git-cola-master\cola\widgets\toolbarcmds.py
#         'title': 'Abort',
#         'action': lambda: cmds.rebase_abort(),
#         'icon': None
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\index\base.py
            # in PY3, readlink is string, but we need bytes. In PY2, it's just OS encoded bytes, we assume UTF-8
            open_stream = lambda: BytesIO(force_bytes(os.readlink(filepath), encoding=defenc))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\index\base.py
            # FIXME: Reading from GIL!
            make_exc = lambda: GitCommandError(("git-checkout-index",) + tuple(args), 128, proc.stderr.read())
            checked_out_files = []
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_commit.py
        # prune
        self.assertEqual(next(start.traverse(branch_first=1, prune=lambda i, d: i == p0)), p1)

#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_commit.py
        # predicate
        self.assertEqual(next(start.traverse(branch_first=1, predicate=lambda i, d: i == p1)), p1)

#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_fun.py
        # single tree
        is_no_tree = lambda i, d: i.type != 'tree'
        entries = traverse_trees_recursive(odb, [B.binsha], '')
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_index.py
        # ITERATE BLOBS
        merge_required = lambda t: t[0] != 0
        merge_blobs = list(three_way_index.iter_blobs(merge_required))
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_tree.py
        # only choose trees
        trees_only = lambda i, d: i.type == "tree"
        trees = list(root.traverse(predicate=trees_only))
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\test\test_tree.py
        # test prune
        lib_folder = lambda t, d: t.path == "lib"
        pruned_trees = list(root.traverse(predicate=trees_only, prune=lib_folder))
#########################################################################################
C:\Users\muvva\Desktop\testing\GitPython-master\git\util.py
    (re.compile(r"(\w{2,}:.*)"),  # remote URL, do nothing
     (lambda url: url),
     False),
#########################################################################################
C:\Users\muvva\Desktop\testing\glances-master\glances\plugins\glances_docker.py
        # Get the maximum containers name (cutted to 20 char max)
        name_max_width = min(20, len(max(self.stats['containers'], key=lambda x: len(x['name']))['name']))
        msg = ' {:{width}}'.format('Name', width=name_max_width)
#########################################################################################
C:\Users\muvva\Desktop\testing\glances-master\glances\processes.py
    # Check if a specific sort should be done
    sort_lambda = _sort_lambda(sortedby=sortedby,
                               sortedby_secondary=sortedby_secondary)
#########################################################################################
C:\Users\muvva\Desktop\testing\glances-master\glances\processes.py
            # If an error is detected, fallback to cpu_percent
            stats.sort(key=lambda process: (weighted(process['cpu_percent']),
                                            weighted(process[sortedby_secondary])),
#########################################################################################
C:\Users\muvva\Desktop\testing\glances-master\glances\processes.py
            # Fallback to name
            stats.sort(key=lambda process: process['name'] if process['name'] is not None else '~',
                       reverse=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\gmail-master\gmail\message.py
        # combine and sort sent and received messages
        return sorted(dict(received_messages.items() + sent_messages.items()).values(), key=lambda m: m.sent_at)

#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\gmtools\tools.py
    # Zip on ordering, sort by it, then remove ordering.
    return [el[1] for el in sorted(zip(order, l), key=lambda el: el[0])]

#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\gmtools\tools.py
        # Replace query with a regex, where punc matches any (or no) characters.
        lambda q: re.sub(r"[^a-zA-Z0-9\s]", ".*", q),
        # Don't change the song.
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\gmtools\tools.py
        # Don't change the song.
        lambda s: s,
        # The comparator becomes regex matching.
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\gmtools\tools.py
        # The comparator becomes regex matching.
        lambda sd, q: re.search(q, sd)
    )
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\gmtools\tools.py
        # Create the transformers by composing all of them.
        q_t = compose(*list(map((lambda sm: sm.q_t), mods_to_apply)))
        s_t = compose(*list(map((lambda sm: sm.s_t), mods_to_apply)))
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\protocol\shared.py
        config = {}  # stores key: val for static or f(*args, **kwargs) -> val for dyn
        dyn = lambda key: 'dynamic_' + key  # noqa
        stat = lambda key: 'static_' + key  # noqa
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\protocol\shared.py
        dyn = lambda key: 'dynamic_' + key  # noqa
        stat = lambda key: 'static_' + key  # noqa
        has_key = lambda key: hasattr(new_cls, key)  # noqa
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\protocol\shared.py
        stat = lambda key: 'static_' + key  # noqa
        has_key = lambda key: hasattr(new_cls, key)  # noqa
        get_key = lambda key: getattr(new_cls, key)  # noqa
#########################################################################################
C:\Users\muvva\Desktop\testing\gmusicapi-master\gmusicapi\protocol\shared.py
        has_key = lambda key: hasattr(new_cls, key)  # noqa
        get_key = lambda key: getattr(new_cls, key)  # noqa

#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\gmv\gmvault.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\gmv\gmvault.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\sandbox\common_gmvault.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\sandbox\common_gmvault.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\sandbox\gmvault_multiprocess.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\sandbox\gmvault_multiprocess.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\gmvault-master\src\sandbox\gmvault_multiprocess.py
            #remove all None elements from group_imap_ids
            group_imap_ids = itertools.ifilter(lambda x: x != None, group_imap_ids)
           
#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\googleapiclient\discovery.py
          # msgRoot should not write out it's own headers
          setattr(msgRoot, '_write_headers', lambda self: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\googleapiclient\http.py
    # Message should not write out it's own headers.
    setattr(message, '_write_headers', lambda self: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\tests\test_http.py
    download._sleep = lambda _x: 0  # do nothing
    download._rand = lambda: 10

#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\tests\test_http.py
    request._sleep = lambda _x: 0  # do nothing
    request._rand = lambda: 10
    with self.assertRaises(socket.error):
#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\tests\test_http.py
    request._sleep = lambda _x: 0  # do nothing
    request._rand = lambda: 10
    response = request.execute(num_retries=4)
#########################################################################################
C:\Users\muvva\Desktop\testing\google-api-python-client-master\tests\test_http.py
    request._sleep = lambda _x: 0  # do nothing
    request._rand = lambda: 10
    response = request.execute(num_retries=4)
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\api_core\tests\unit\test_retry.py
# sleep time.
@mock.patch("random.uniform", autospec=True, side_effect=lambda m, n: n / 2.0)
def test_exponential_sleep_generator_base_2(uniform):
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\api_core\tests\unit\test_retry.py
    # sleep time.
    @mock.patch("random.uniform", autospec=True, side_effect=lambda m, n: n / 2.0)
    @mock.patch("time.sleep", autospec=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\bigquery\tests\system.py
    # Removes blanks & terminal code (result of display clearing)
    updates = list(filter(lambda x: bool(x) and x != "\x1b[2K", lines))
    assert re.match("Executing query with job ID: .*", updates[0])
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\bigquery\tests\unit\test_magics.py
    # Removes blanks & terminal code (result of display clearing)
    updates = list(filter(lambda x: bool(x) and x != "\x1b[2K", lines))

#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\firestore\tests\unit\v1beta1\test_watch.py
            # don't really do the comparison, just return 0 (equal) for all
            self._comparator = lambda x, y: 1
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\storage\docs\snippets.py
    # [START delete_blobs]
    bucket.delete_blobs([blob], on_error=lambda blob: None)
    # [END delete_blobs]
#########################################################################################
C:\Users\muvva\Desktop\testing\google-cloud-python-master\storage\google\cloud\storage\bucket.py
            # Ignore 404 errors on delete.
            self.delete_blobs(blobs, on_error=lambda blob: None, client=client)

#########################################################################################
C:\Users\muvva\Desktop\testing\google-images-download-master\google_images_download\google_images_download.py
        # if ".jpg" in image_name or ".gif" in image_name or ".png" in image_name or ".bmp" in image_name or ".svg" in image_name or ".webp" in image_name or ".ico" in image_name:
        if any(map(lambda extension: extension in image_name, extensions)):
            file_name = main_directory + "/" + image_name
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\h\util\uri.py
    # the same key doesn't require any work from us
    items = sorted(items, key=lambda x: x[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\common\factories\document.py
    # claimant).
    claimant = factory.Sequence(lambda n: "http://example.com/document_" + str(n) + "/")

#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\common\factories\document.py
    # in your own claimant).
    claimant = factory.Sequence(lambda n: "http://example.com/document_" + str(n) + "/")

#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\common\factories\user.py
        # A count that's appended to non-unique usernames to make them unique.
        count = factory.Sequence(lambda n: "%d" % n)
        # The non-unique part of the generated username.
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\h\auth\tokens_test.py
    # Valid
    lambda k: jwt.encode({"exp": _seconds_from_now(3600)}, key=k),
    # Expired, but within leeway
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\h\auth\tokens_test.py
    # Expired, but within leeway
    lambda k: jwt.encode({"exp": _seconds_from_now(-120)}, key=k),
]
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\h\auth\tokens_test.py
    # Expired 1 hour ago
    lambda k: jwt.encode({"exp": _seconds_from_now(-3600)}, key=k),
    # Incorrect encoding key
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\h\auth\tokens_test.py
    # Incorrect encoding key
    lambda k: jwt.encode({"exp": _seconds_from_now(3600)}, key="somethingelse"),
]
#########################################################################################
C:\Users\muvva\Desktop\testing\h-master\tests\h\search\query_test.py
        # Mark all these uri's as equivalent uri's.
        storage.expand_uri.side_effect = lambda _, x: [
            "urn:x-pdf:1234",
#########################################################################################
C:\Users\muvva\Desktop\testing\hangups-master\hangups\ui\__main__.py
        # TODO: handle adding new conversations
        self.sort(key=lambda conv_button: conv_button.last_modified,
                  reverse=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\hmmlearn-master\lib\hmmlearn\hmm.py
        # Maximizing means
        lambdas, mus = self.means_weight, self.means_prior
        new_means_numer = np.einsum(
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\auth\models.py
    )  # type: perm_mdl.PermissionLookup
    id = attr.ib(type=str, factory=lambda: uuid.uuid4().hex)
    is_owner = attr.ib(type=bool, default=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\calendar\caldav.py
        # whole day. Convert everything to datetime to be able to sort it
        results.sort(key=lambda x: self.to_datetime(
            x.instance.vevent.dtstart.value
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\history\__init__.py
    # Append all changes to it
    for ent_id, group in groupby(states, lambda state: state.entity_id):
        result[ent_id].extend(group)
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\http\__init__.py
        # pylint: disable=protected-access
        self.app._router.freeze = lambda: None

#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\huawei_lte\sensor.py
        # http://www.lte-anbieter.info/technik/rsrq.php
        icon=lambda x:
        x >= -5 and "mdi:signal-cellular-3"
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\huawei_lte\sensor.py
        # http://www.lte-anbieter.info/technik/rsrp.php
        icon=lambda x:
        x >= -80 and "mdi:signal-cellular-3"
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\huawei_lte\sensor.py
        # https://eyesaas.com/wi-fi-signal-strength/
        icon=lambda x:
        x >= -60 and "mdi:signal-cellular-3"
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\huawei_lte\sensor.py
        # http://www.lte-anbieter.info/technik/sinr.php
        icon=lambda x:
        x >= 10 and "mdi:signal-cellular-3"
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\sensor\filter.py
            # Sort the window states
            history_list = sorted(history_list, key=lambda s: s.last_updated)
            _LOGGER.debug("Loading from history: %s",
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\components\utility_meter\sensor.py
                # Fake cancellation function to init the meter paused
                self._collecting = lambda: None

#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\helpers\config_validation.py
        # pylint: disable=unnecessary-lambda
        [lambda value: CONDITION_SCHEMA(value)],
    )
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\helpers\config_validation.py
        # pylint: disable=unnecessary-lambda
        [lambda value: CONDITION_SCHEMA(value)],
    )
#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\homeassistant\util\color.py
    # Bring all negative components to zero.
    r, g, b = map(lambda x: max(0, x), [r, g, b])

#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\tests\common.py
            # We run this in executor, wrap it in function
            self.setup = lambda *args: setup(*args)

#########################################################################################
C:\Users\muvva\Desktop\testing\home-assistant-master\tests\common.py
            # We run this in executor, wrap it in function
            self.setup_platform = lambda *args: setup_platform(*args)

#########################################################################################
C:\Users\muvva\Desktop\testing\httpbin-master\httpbin\core.py
            "rule_filter": lambda rule: True,  # all in
            "model_filter": lambda tag: True,  # all in
        }
#########################################################################################
C:\Users\muvva\Desktop\testing\HTTPretty-master\tests\functional\testserver.py
# if not PY3:
#     bytes = lambda s, *args: str(s)

#########################################################################################
C:\Users\muvva\Desktop\testing\HTTPretty-master\tests\unit\test_core.py
    # Background: the potential http ports are 80 and 443
    POTENTIAL_HTTP_PORTS.__contains__.side_effect = lambda other: int(other) in (80, 443)

#########################################################################################
C:\Users\muvva\Desktop\testing\HTTPretty-master\tests\unit\test_core.py
    # And the potential http port is 4000
    POTENTIAL_HTTP_PORTS.__contains__.side_effect = lambda other: int(other) == 4000
    POTENTIAL_HTTP_PORTS.union.side_effect = lambda other: POTENTIAL_HTTP_PORTS
#########################################################################################
C:\Users\muvva\Desktop\testing\hy-master\hy\errors.py
        # Avoid "...expected str instance, ColoredString found"
        return reduce(lambda x, y: x + y, output)

#########################################################################################
C:\Users\muvva\Desktop\testing\hyperopt-master\hyperopt\mongoexp.py
    # TODO: rename jobs -> coll throughout
    coll = property(lambda s: s.jobs)

#########################################################################################
C:\Users\muvva\Desktop\testing\hyperopt-master\hyperopt\pyll\base.py
#
# It provides types to build ASTs in a simple lambda-notation style
#
#########################################################################################
C:\Users\muvva\Desktop\testing\hypertools-master\hypertools\plot\draw.py
                fig.canvas.mpl_connect('motion_notify_event', lambda event: onMouseMotion(event, X, labels)) # on mouse motion
                # fig.canvas.mpl_connect('button_press_event', lambda event: onMouseClick(event, X, labels))  # on mouse click
            else:
#########################################################################################
C:\Users\muvva\Desktop\testing\hypertools-master\hypertools\plot\draw.py
                fig.canvas.mpl_connect('motion_notify_event', lambda event: onMouseMotion(event, X)) # on mouse motion
                # fig.canvas.mpl_connect('button_press_event', lambda event: onMouseClick(event, X, labels))  # on mouse click

#########################################################################################
C:\Users\muvva\Desktop\testing\hypertools-master\hypertools\tools\format_data.py
    # handle text data:
    if any(map(lambda x: x in ['list_str', 'str', 'arr_str'], dtypes)):

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\src\hypothesis\internal\conjecture\engine.py
                # failure, allowing 'slips' to any bug with a smaller minimal example.
                self.shrink(example, lambda d: d.status == Status.INTERESTING)
                return
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\src\hypothesis\internal\conjecture\shrinking\floats.py
        # k as an integer, but without the precision issues that would have.
        self.call_shrinker(Integer, i, lambda k: self.consider((i * n + r) / n))

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\src\hypothesis\internal\reflection.py
    # handling these properly, but it's important to not crash on them.
    bad_lambda = False
    for a in argspec.args:
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\src\hypothesis\internal\reflection.py
    #
    # because slicing on `lambda_ast.col_offset` will account for bytes, but
    # the slice will be on Unicode characters.
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\src\hypothesis\searchstrategy\types.py
            if type_ is None:  # pragma: no cover
                return lambda f: f

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_attrs_inference.py
    has_default_factory_takes_self = attr.ib(  # uninferrable but has default
        default=attr.Factory(lambda _: list(), takes_self=True)
    )
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_conjecture_engine.py
    # We normally would have populated this in minimize_individual_blocks
    shrinker.is_shrinking_block = lambda x: True

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_conjecture_engine.py
    # that phase in this test.
    monkeypatch.setattr(Shrinker, "is_shrinking_block", lambda self, i: i == 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_conjecture_float_encoding.py
    # from the starting point and trigger an internal exception.
    assert minimal_from(1.1, lambda x: x == 1.1 or 0 < x < 1) == 1.1

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_conjecture_order_shrinking.py
    # optimisation.
    shrinker = Ordering(ls, lambda ls: True, random=Random(0), full=False)
    shrinker.run_step()
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_deferred_strategies.py
    # to determine the non-emptiness of the tuples.
    x = st.deferred(lambda: st.tuples(st.none(), x, st.integers().map(abs)) | st.none())
    assert not x.is_empty
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
        # This will break ast.parse, but the brackets are needed for the real
        # parser to accept this lambda
        x][0]
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    # fmt: on
    assert get_pretty_function_description(t) == "lambda x: <unknown>"

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    # fmt: on
    assert get_pretty_function_description(t) == "lambda x, y: 1"

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    t = lambda x: 1  # A lambda comment
    assert get_pretty_function_description(t) == "lambda x: 1"

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    t = lambda x: "#"
    assert get_pretty_function_description(t) == 'lambda x: "#"'

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    # fmt: off
    f = (lambda n:
         'aaa')
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_lambda_formatting.py
    # fmt: off
    f = lambda n:\
        'aaa'
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_reflection.py
# fmt: off
pi = "π"; is_str_pi = lambda x: x == pi  # noqa: E731
# fmt: on
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_regex.py
    # "a" is case insensitive
    find_any(strategy, lambda s: s[0] == u"a")
    find_any(strategy, lambda s: s[0] == u"A")
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_regex.py
    # "b" is case sensitive
    find_any(strategy, lambda s: s[1] == u"b")

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\cover\test_statistical_events.py
    # 0<=drawtime<= runtime due to changing clocks or floating-point issues.
    engine = ConjectureRunner(lambda: None)
    engine.exit_reason = ExitReason.finished
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\lark\test_grammar.py
    # must contain ignorable whitespace in the initial string.
    find_any(strategy, lambda s: "\t" in s)

#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\nocover\test_fancy_repr.py
# fmt: off
# The linebreaks here can force our lambda repr code into specific paths,
# so we tell Black to leave them as-is.
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\py3\test_lookup.py
    # By default, leaves args with defaults and minimises to 2+4=6
    assert minimal(st.builds(annotated_func), lambda ex: True) == 6
    # Inferring integers() for args makes it minimise to zero
#########################################################################################
C:\Users\muvva\Desktop\testing\hypothesis-master\hypothesis-python\tests\py3\test_lookup.py
    # Inferring integers() for args makes it minimise to zero
    assert minimal(st.builds(annotated_func, b=infer, d=infer), lambda ex: True) == 0

#########################################################################################
C:\Users\muvva\Desktop\testing\ignite-master\tests\ignite\engine\test_engine.py
    # Dummy engine
    engine = Engine(lambda engine, batch: 0)
    engine.register_events(*Custom_Events)
#########################################################################################
C:\Users\muvva\Desktop\testing\image-match-master\image_match\signature_database_base.py
            # initialize an iterator of composed transformations
            inversions = [lambda x: x, lambda x: -x]

#########################################################################################
C:\Users\muvva\Desktop\testing\image-match-master\image_match\signature_database_base.py
            # an ugly solution for function composition
            rotations = [lambda x: x,
                         np.rot90,
#########################################################################################
C:\Users\muvva\Desktop\testing\image-match-master\image_match\signature_database_base.py
            # otherwise just use the identity transformation
            orientations = [lambda x: x]

#########################################################################################
C:\Users\muvva\Desktop\testing\implicit-master\implicit\nearest_neighbours.py
        # remove items that are not in the selected_items
        best = sorted(zip(recommendations.indices, recommendations.data), key=lambda x: -x[1])
        ret = [rec for rec in best if rec[0] in selected_items]
#########################################################################################
C:\Users\muvva\Desktop\testing\implicit-master\implicit\recommender_base.py
        # return sorted results
        return sorted(zip(selected_items, scores), key=lambda x: -x[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\invoke\collection.py
        # Failing that, make our own collection from the module's tasks.
        tasks = filter(lambda x: isinstance(x, Task), vars(module).values())
        # Again, explicit name wins over implicit one from module path
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\invoke\parser\argument.py
        # Default to do-nothing/identity function
        func = lambda x: x
        # If cast, set to self.kind, which should be str/int/etc
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\invoke\parser\argument.py
            # TODO: explode nicely if self._value was not an int to start with
            func = lambda x: self._value + 1
        self._value = func(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\invoke\vendor\decorator.py
            if self.name == '<lambda>':  # small hack for lambda functions
                self.name = '_lambda_'
            self.doc = func.__doc__
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\tests\runners.py
            # 1 byte at a time. See farther-down test for fileno-bearing stdin
            calls = list(map(lambda x: call(x), "Text!"))
            klass.write_proc_stdin.assert_has_calls(calls, any_order=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\tests\runners.py
            # stdin mirroring occurs char-by-char
            calls = list(map(lambda x: call(x), "Hey, listen!"))
            klass.write_proc_stdin.assert_has_calls(calls, any_order=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\invoke-master\tests\terminals.py
            # to fail util.has_fileno().
            assert bytes_to_read(Mock(fileno=lambda: None)) == 1
            assert not fcntl.ioctl.called
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\interengine\bintree_script.py
# gather the connection information into a dict
ar = view.apply_async(lambda : com.info)
peers = ar.get_dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\interengine\interengine.py
# gather the connection information into a dict
ar = view.apply_async(lambda : com.info)
peers = ar.get_dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\interengine\interengine.py
# connect the engines to each other:
view.apply_sync(lambda pdict: com.connect(pdict), peers)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\wave2D\parallelwave-mpi.py
    # lambda for calling solver.solve:
    _solve = lambda *args, **kwargs: solver.solve(*args, **kwargs)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\wave2D\parallelwave.py
    # gather the connection information into a single dict
    ar = view.apply_async(lambda : com.info)
    peers = ar.get_dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\examples\wave2D\parallelwave.py
    # convenience lambda to call solver.solve:
    _solve = lambda *args, **kwargs: solver.solve(*args, **kwargs)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\client\client.py
            # don't trigger close on shutdown notification, which will prevent us from receiving the reply
            self._notification_handlers['shutdown_notification'] = lambda msg: None
            msg = self._send_recv(self._query_stream, 'shutdown_request')
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\controller\dictdb.py
# Python can't copy memoryviews, but creating another memoryview works for us
copy._deepcopy_dispatch[memoryview] = lambda x, memo: memoryview(x)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\controller\hub.py
        # ignore resubmit replies
        self.resubmit.on_recv(lambda msg: None, copy=False)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\nbextension\clustermanager.py
        # sorted list, but ensure that 'default' always comes first
        default_first = lambda name: name if name != 'default' else ''
        result = [self.profile_info(p) for p in sorted(self.profiles, key=default_first)]
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\tests\clienttest.py
        # close fds:
        for e in filter(lambda e: e.poll() is not None, launchers):
            launchers.remove(e)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\tests\test_client.py
        # simple apply
        r = v.apply_sync(lambda : 1)
        self.assertEqual(r, [1] * n1)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipyparallel-master\ipyparallel\tests\test_client.py
        # apply
        r = v.apply_sync(lambda : 1)
        self.assertEqual(r, [1] * n2)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\core\completer.py
                        # true if txt is _not_ a __ name, false otherwise:
                        no__name = (lambda txt:
                                    re.match(r'.*\.__.*?__',txt) is None)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\core\completer.py
                        # true if txt is _not_ a _ name, false otherwise:
                        no__name = (lambda txt:
                                    re.match(r'\._.*?',txt[txt.rindex('.'):]) is None)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\core\interactiveshell.py
        # implement a __nonzero__ method
        main_mod.__nonzero__ = lambda : True
        
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\lib\backgroundjobs.py
        # Note that the actual API for text() requires the three args to be
        # passed in, so we wrap it in a simple lambda.
        self._make_tb = lambda : make_tb(None, None, None)
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\lib\backgroundjobs.py
        # passed in, so we wrap it in a simple lambda.
        self._make_tb = lambda : make_tb(None, None, None)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\testing\decorators.py
    # dry run on a dummy function.
    tmp = lambda : None
    for label in labels:
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\testing\decorators.py
# generic skip without module
skip_without = lambda mod: skipif(module_not_available(mod), "This test requires %s" % mod)

#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\testing\decorators.py
# between different decorators based on OS or other conditions
null_deco = lambda f: f

#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\utils\ipstruct.py
            add_flip = lambda old,new: new + old  # note change of order!
            add_s    = lambda old,new: old + ' ' + new  # only for str!

#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\utils\ipstruct.py
        # the value that will go in the new struct
        preserve = lambda old,new: old
        update   = lambda old,new: new
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\utils\ipstruct.py
        add_flip = lambda old,new: new + old  # note change of order!
        add_s    = lambda old,new: old + ' ' + new

#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\IPython\utils\path.py
    # path separator:
    unescape = unescape_glob if sys.platform != 'win32' else lambda x: x
    for a in args:
#########################################################################################
C:\Users\muvva\Desktop\testing\ipython-master\setupbase.py
    # get its work done.  See cmd.py for more info.
    sub_commands = [('install_lib_symlink', lambda self:True),
                    ('install_scripts_sym', lambda self:True),
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\ivre\target.py
            # a - 1 is divisible by all prime factors of m
            mfactors = reduce(lambda x, y: x * y,
                              set(mathutils.factors(self.lcg_m)))
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\tests\tests.py
        # In the whole database
        self.find_record_cgi(lambda rec: addr == rec['addr'])
        # In the /24 network
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\tests\tests.py
        # In the /24 network
        self.find_record_cgi(lambda rec: addr == rec['addr'],
                             webflt='net:%s' % addr_net)
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\tests\tests.py
        #   In the whole database
        self.find_record_cgi(lambda rec: addr == rec['addr'])
        #   In the /24 network
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\tests\tests.py
        #   In the /24 network
        self.find_record_cgi(lambda rec: addr == rec['addr'],
                             webflt='net:%s' % addr_net)
#########################################################################################
C:\Users\muvva\Desktop\testing\ivre-master\tests\tests.py
        # Python 2.6
        IvreTests.assertIsNone = lambda self, obj: self.assertTrue(obj is None)
    result = unittest.TextTestRunner(verbosity=2).run(
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\examples\gaussian_process_regression.py
  # Create a really simple toy 1D function
  y_fun = lambda x: np.sin(x) + 0.01 * random.normal(key, shape=(x.shape[0], 1))
  x = np.linspace(1., 4., numpts)[:, None]
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\examples\onnx2xla.py
  # The interpreter is differentiable too! Even the compiled one:
  fun = lambda inputs: np.sum(compiled_predict(inputs))
  print("a derivative with respect to inputs:")
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\jax\lax_linalg.py
  # Forward-mode rule from https://arxiv.org/pdf/1602.07527.pdf
  phi = lambda X: np.tril(X) / (1 + np.eye(X.shape[-1], dtype=X.dtype))
  tmp = triangular_solve(L, sigma_dot,
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\jax\numpy\lax_numpy.py
  # Handle int index
  _int = lambda aval: not aval.shape and onp.issubdtype(aval.dtype, onp.integer)
  try:
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\jax\scipy\special.py
# need to create new functions because _wraps sets the __name__ attribute
gammaln = _wraps(osp_special.gammaln)(lambda x: lax.lgamma(x))
digamma = _wraps(osp_special.digamma)(lambda x: lax.digamma(x))
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\lapax_test.py
    # pylint: disable=invalid-name
    T = lambda X: onp.swapaxes(X, -1, -2)
    K = rng(lhs_shape, dtype)
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\lapax_test.py
    # pylint: disable=invalid-name
    T = lambda X: onp.swapaxes(X, -1, -2)
    K = rng(lhs_shape, dtype)
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\lax_test.py
    # TODO(mattjj): make this test pass
    args_maker = lambda: [rng(lhs_shape, dtype), rng(rhs_shape, dtype)]

#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\lax_test.py
    # can hit different code paths
    fun = lambda operand: lax.reduce(operand, init_val, op, dims)
    args_maker = lambda: [rng(shape, dtype)]
#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\lax_test.py
    # check looping into a compiled computation works
    jit_result = api.jit(lambda x: lax.add(x, make_const()))(zero)

#########################################################################################
C:\Users\muvva\Desktop\testing\jax-master\tests\linalg_test.py
    else:  # only check eigenvalue grads for complex matrices
      f = lambda a: partial(np.linalg.eigh, UPLO=uplo, symmetrize_input=True)(a)[0]
    jtu.check_grads(f, (a,), 2, rtol=1e-1)
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\jedi\api\helpers.py
    # Note: `or ''` below is required because `module_path` could be
    return sorted(defs, key=lambda x: (x.module_path or '', x.line or 0, x.column or 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\dynamic_params.py
# -----------------
# lambdas
# -----------------
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\dynamic_params.py
#? int()
x_lambda = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\dynamic_params.py
    #? str()
    x_method = lambda self, a: a

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
# -----------------
# lambdas
# -----------------
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
# -----------------
a = lambda: 3
#? int()
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? float()
(lambda x: x)(3.0)

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? int()
with_lambda(arg_l, 1.0)[1]
#? float()
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? float()
with_lambda(arg_l, 1.0)[0]
#? float()
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? float()
with_lambda(arg_l, y=1.0)[0]
#? int()
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? int()
with_lambda(lambda x: x)
#? float()
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? float()
with_lambda(lambda x, y: y, y=1.0)

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
# magic method
a = lambda: 3
#? ['__closure__']
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
# -----------------
# lambda param (#379)
# -----------------
#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
# Doesn't need to do anything yet. It should just not raise an error. These
# nocond lambdas make no sense at all.

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\lambdas.py
#? int()
[a for a in [1,2] if lambda: 3][0]

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\named_param.py
#? 22 ['lambda_param']
my_lambda(lambda_param)

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\completion\stdlib.py
#? type(x)
type(lambda: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\jedi-master\test\test_api\test_classes.py
        # Assure that names are definitely sorted.
        ns = sorted(ns, key=lambda name: (name.line, name.column))
        return [name.is_definition() for name in ns]
#########################################################################################
C:\Users\muvva\Desktop\testing\jinja-master\jinja2\lexer.py
        # shortcuts
        c = lambda x: re.compile(x, re.M | re.S)
        e = re.escape
#########################################################################################
C:\Users\muvva\Desktop\testing\jinja-master\jinja2\runtime.py
#: the identity function.  Useful for certain things in the environment
identity = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\jinja-master\jinja2\utils.py
# special singleton representing missing values for the runtime
missing = type('MissingType', (), {'__repr__': lambda x: 'missing'})()

#########################################################################################
C:\Users\muvva\Desktop\testing\jinja-master\tests\test_debug.py
        # be fixed though.
        self.assert_traceback_matches(lambda: fs_env.get_template('syntaxerror.html'), r'''(?sm)
  File ".*?syntaxerror.html", line 4, in (template|<module>)
#########################################################################################
C:\Users\muvva\Desktop\testing\joblib-master\joblib\externals\cloudpickle\cloudpickle.py
        # reference (as is done in default pickler), via save_function_tuple.
        if (islambda(obj)
                or getattr(obj.__code__, 'co_filename', None) == '<stdin>'
#########################################################################################
C:\Users\muvva\Desktop\testing\joblib-master\joblib\parallel.py
        # functions that are defined in the __main__ module, functions that are
        # defined locally (inside another function) and lambda expressions.
        self._pickle_cache = dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\joblib-master\joblib\test\test_my_exceptions.py
    # example.
    non_inheritable_classes = [type(lambda: None), bool]
    for exception in non_inheritable_classes:
#########################################################################################
C:\Users\muvva\Desktop\testing\jupyterhub-master\jupyterhub\oauth\provider.py
# for internal services
authorization_code.is_absolute_uri = lambda uri: True

#########################################################################################
C:\Users\muvva\Desktop\testing\jupyterhub-master\jupyterhub\tests\mocking.py
        # ignore the call that will fire in atexit
        self.cleanup = lambda: None
        self.db_file.close()
#########################################################################################
C:\Users\muvva\Desktop\testing\jupyterhub-master\jupyterhub\tests\test_services_auth.py
# mock for sending monotonic counter way into the future
monotonic_future = mock.patch('time.monotonic', lambda: sys.maxsize)

#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\admin\client.py
            # extra values (usually the error_message)
            for topic, error_code in map(lambda e: e[:2], topic_error_tuples):
                error_type = Errors.for_code(error_code)
#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\codec.py
        # buffer... likely a python-snappy bug, so just use a slice copy
        chunker = lambda payload, i, size: payload[i:size+i]

#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\codec.py
        # pylint: disable-msg=undefined-variable
        chunker = lambda payload, i, size: buffer(payload, i, size)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\codec.py
        # pylint: disable-msg=undefined-variable
        chunker = lambda payload, i, size: memoryview(payload)[i:size+i].tobytes()

#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\consumer\fetcher.py
        # which can be passed to FetchRequest() via .items()
        fetchable = collections.defaultdict(lambda: collections.defaultdict(list))

#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\kafka\coordinator\assignors\roundrobin.py
        # construct {member_id: {topic: [partition, ...]}}
        assignment = collections.defaultdict(lambda: collections.defaultdict(list))

#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\test\test_producer_legacy.py
        # Mock offsets counter for closure
        offsets = collections.defaultdict(lambda: collections.defaultdict(lambda: 0))
        self.client.is_first_time = True
#########################################################################################
C:\Users\muvva\Desktop\testing\kafka-python-master\test\test_producer_legacy.py
        # Mock offsets counter for closure
        offsets = collections.defaultdict(lambda: collections.defaultdict(lambda: 0))
        self.client.is_first_time = True
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\examples\conv_filter_visualization.py
        # we will only keep the top n*n filters.
        filters.sort(key=lambda x: x[1], reverse=True)
        filters = filters[:n * n]
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\examples\image_ocr.py
    # Keras doesn't currently support loss funcs with extra parameters
    # so CTC loss is implemented in a lambda layer
    loss_out = Lambda(
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\examples\image_ocr.py
    # the loss calc occurs elsewhere, so use a dummy lambda func for the loss
    model.compile(loss={'ctc': lambda y_true, y_pred: y_pred}, optimizer=sgd)
    if start_epoch > 0:
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\examples\lstm_stateful.py
    # some reshaping
    reshape_3 = lambda x: x.values.reshape((x.shape[0], x.shape[1], 1))
    x_train = reshape_3(x_train)
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\backend\theano_backend.py
    # first parameter and accumulator as second
    return theano.foldl(lambda x, acc: fn(acc, x),
                        elems, initializer, name=name)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\backend\theano_backend.py
    # first parameter and accumulator as second
    return theano.foldr(lambda x, acc: fn(acc, x),
                        elems, initializer, name=name)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\engine\network.py
        # here we order them by traversal order.
        layers_for_depth.sort(key=lambda x: layer_indices[x])
        layers.extend(layers_for_depth)
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\engine\saving.py
    # This will never loop forever thanks to the test above.
    while any(map(lambda x: x.nbytes > HDF5_OBJECT_HEADER_LIMIT, chunked_data)):
        num_chunks += 1
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\layers\core.py
        # add a x -> x^2 layer
        model.add(Lambda(lambda x: x ** 2))
    ```
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\utils\data_utils.py
            # We do not need the init since it's threads.
            self.executor_fn = lambda _: ThreadPool(workers)
        self.workers = workers
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\utils\data_utils.py
            # Wait for them to complete
            list(map(lambda f: f.wait(), last_ones))
            # Keep the good ones
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\keras\utils\io_utils.py
            # This will never loop forever thanks to the test above.
            is_too_big = lambda x: x.nbytes > HDF5_OBJECT_HEADER_LIMIT
            while any(map(is_too_big, chunked_data)):
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\activations_test.py
    # 3. Callables return themselves for some reason
    a = activations.get(lambda x: 5)
    assert a(None) == 5
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\test_callbacks.py
    # test a layer with a list of output tensors
    inp_pair = Lambda(lambda x: x)([inp_3d, inp_2d])
    hidden = dot(inp_pair, axes=-1)
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\test_sequential_model.py
    # Layer with single input and multiple outputs
    layer1 = keras.layers.Lambda(lambda x: [x + 1, x],
                                 lambda shapes: [shapes, shapes])
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\utils\generic_utils_test.py
    # lambda
    (lambda x: x, 'x', False, True),
    (lambda x: x, 'y', False, False),
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\utils\io_utils_test.py
    # test normalizer
    normalizer = lambda x: x + 1
    normalized_X_train = HDF5Matrix(h5_path, 'my_data', start=0, end=150,
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\utils\io_utils_test.py
    # test resizing normalizer
    normalizer_rs = lambda x: x[:, ::2]
    normalized_rs_X_train = HDF5Matrix(h5_path, 'my_data', start=0, end=150,
#########################################################################################
C:\Users\muvva\Desktop\testing\keras-master\tests\keras\utils\io_utils_test.py
    # test dtype changing normalizer
    normalizer_dtype = lambda x: x.astype(np.uint8)
    normalized_dtype_X_train = HDF5Matrix(h5_path, 'my_data', start=0, end=150,
#########################################################################################
C:\Users\muvva\Desktop\testing\keyboard-master\keyboard\_keyboard_tests.py
# Mock out side effects.
keyboard._os_keyboard.init = lambda: None
keyboard._os_keyboard.listen = lambda callback: None
#########################################################################################
C:\Users\muvva\Desktop\testing\keyboard-master\keyboard\__init__.py
# Press PAGE UP then PAGE DOWN to type "foobar".
keyboard.add_hotkey('page up, page down', lambda: keyboard.write('foobar'))

#########################################################################################
C:\Users\muvva\Desktop\testing\keyboard-master\keyboard\__init__.py
    # Python3
    _is_str = lambda x: isinstance(x, str)
    _is_number = lambda x: isinstance(x, int)
#########################################################################################
C:\Users\muvva\Desktop\testing\keyboard-master\keyboard\__init__.py
        # for.
        handler = lambda e: (event_type == KEY_DOWN and e.event_type == KEY_UP and e.scan_code in _logically_pressed_keys) or (event_type == e.event_type and callback())
        remove_step = _add_hotkey_step(handler, steps[0], suppress)
#########################################################################################
C:\Users\muvva\Desktop\testing\keyboard-master\keyboard\__init__.py
            # that is always on.
            state.remove_catch_misses = lambda: None
        elif new_index == 1:
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
            # string representation of `attribute` is equal to `value`
            return lambda el: el._attr_value_as_string(attribute) == value
        elif operator == '~':
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
            # string representation of `attribute` starts with `value`
            return lambda el: el._attr_value_as_string(
                attribute, '').startswith(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
            # string representation of `attribute` ends with `value`
            return lambda el: el._attr_value_as_string(
                attribute, '').endswith(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
            # string representation of `attribute` contains `value`
            return lambda el: value in el._attr_value_as_string(attribute, '')
        elif operator == '|':
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
                # direct children of each tag in the current context.
                recursive_candidate_generator = lambda tag: tag.children
            elif token == '~':
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\bs4\element.py
                # siblings of each tag in the current context.
                recursive_candidate_generator = lambda tag: tag.next_siblings
            elif token == '+':
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\calibre\ebooks\BeautifulSoup.py
        # Convert any HTML, XML, or numeric entities in the attribute values.
        convert = lambda(k, val): (k,
                                   re.sub("&(#\d+|#x[0-9a-fA-F]+|\w+);",
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\calibre\ebooks\oeb\transforms\flatcss.py
        # :hover must come after link and :active must come after :hover
        psels = sorted(pseudo_styles.iterkeys(), key=lambda x :
                {'hover':1, 'active':2}.get(x, 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\calibre\ebooks\unihandecode\unidecoder.py
        # Replace characters larger than 127 with their ASCII equivelent.
        return re.sub('[^\x00-\x7f]',lambda x: self.replace_point(x.group()), text)

#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\calibre\startup.py
# immediately translated to the environment language
__builtin__.__dict__['__'] = lambda s: s
__builtin__.__dict__['P'] = lambda s: s
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\csscomment.py
    # constant but needed:
    wellformed = property(lambda self: True)

#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssfontfacerule.py
    # constant but needed:
    wellformed = property(lambda self: True)

#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssimportrule.py
    _href = None # needs to be set 
    href = property(lambda self: self._href, _setHref,
                    doc=u"Location of the style sheet to be imported.")
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\csspagerule.py
    # constant but needed:
    wellformed = property(lambda self: True)
#########################################################################################
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
#                      Prod(name='RGBColor',
#                           match=lambda t, v: t == self._prods.FUNCTION and (
#                              cssutils.helper.normalize(v) in (u'rgb(',
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
#                           nextSor=nextSor,
#                                  toSeq=lambda t, tokens: (RGBColor._functionName,
#                                                           RGBColor(
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        # pc: picas - 1 pica is equal to 12 points
        (CSS_CM, CSS_MM): lambda x: x * 10,
        (CSS_MM, CSS_CM): lambda x: x / 10,
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        # hz <-> khz
        (CSS_KHZ, CSS_HZ): lambda x: x * 1000,
        (CSS_HZ, CSS_KHZ): lambda x: x / 1000,
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        # s <-> ms
        (CSS_S, CSS_MS): lambda x: x * 1000,
        (CSS_MS, CSS_S): lambda x: x / 1000,
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        # TODO: convert grad <-> deg or rad
        #(CSS_RAD, CSS_GRAD): lambda x: math.degrees(x),
        #(CSS_DEG, CSS_GRAD): lambda x: math.radians(x),
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        #(CSS_RAD, CSS_GRAD): lambda x: math.degrees(x),
        #(CSS_DEG, CSS_GRAD): lambda x: math.radians(x),
        #(CSS_GRAD, CSS_RAD): lambda x: math.radians(x),
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        #(CSS_DEG, CSS_GRAD): lambda x: math.radians(x),
        #(CSS_GRAD, CSS_RAD): lambda x: math.radians(x),
        #(CSS_GRAD, CSS_DEG): lambda x: math.radians(x)
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
        #(CSS_GRAD, CSS_RAD): lambda x: math.radians(x),
        #(CSS_GRAD, CSS_DEG): lambda x: math.radians(x)
    }
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
                             # FUNC is actually not in spec but used in e.g. Prince
                             PreDef.function(toSeq=lambda t,
                                                          tokens: ('FUNCTION',
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvalue.py
    # TODO: writable? check if var (value) available?
    name = property(lambda self: self._name)

#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvariablesdeclaration.py
            #PreDef.S(toSeq=False, optional=True),
            Prod(name=u'term', match=lambda t, v: True,
                 toSeq=lambda t, tokens: (u'value', 
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\cssvariablesrule.py
    # constant but needed:
    wellformed = property(lambda self: True)

#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\css\value.py
    # TODO: writable? check if var (value) available?
    name = property(lambda self: self._name,
                    doc=u"The name identifier of this variable referring to "
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\cssutils\util.py
        # returns namespace rule where prefix == key
        for rule in ifilter(lambda r: r.type == r.NAMESPACE_RULE,
                            reversed(self.parentStyleSheet.cssRules)):
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\feedparser.py
        # all tags must be in a restricted subset of valid HTML tags
        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,
            re.findall(r'</?(\w+)',s)):
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\feedparser.py
        # all entities must have been defined as valid HTML entities
        if filter(lambda e: e not in entitydefs.keys(), re.findall(r'&(\w+);', s)):
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
# Precompute bit count limits, indexed by error correction level and code size
_data_count = lambda block: block.data_count
BIT_LIMIT_TABLE = [
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 0:   # 000
        return lambda i, j: (i + j) % 2 == 0
    if pattern == 1:   # 001
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 1:   # 001
        return lambda i, j: i % 2 == 0
    if pattern == 2:   # 010
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 2:   # 010
        return lambda i, j: j % 3 == 0
    if pattern == 3:   # 011
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 3:   # 011
        return lambda i, j: (i + j) % 3 == 0
    if pattern == 4:   # 100
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 4:   # 100
        return lambda i, j: (math.floor(i / 2) + math.floor(j / 3)) % 2 == 0
    if pattern == 5:  # 101
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 5:  # 101
        return lambda i, j: (i * j) % 2 + (i * j) % 3 == 0
    if pattern == 6:  # 110
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 6:  # 110
        return lambda i, j: ((i * j) % 2 + (i * j) % 3) % 2 == 0
    if pattern == 7:  # 111
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\qrcode\util.py
    if pattern == 7:  # 111
        return lambda i, j: ((i * j) % 3 + (i + j) % 2) % 2 == 0
    raise TypeError("Bad mask pattern: " + pattern)  # pragma: no cover
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\web\template.py
            # make base a function, so that it can be passed to sub-renders
            self._base = lambda page: self._template(base)(page)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\KindleEar-master\lib\web\wsgiserver\__init__.py
        # Sort the apps by len(path), descending
        apps.sort(cmp=lambda x,y: cmp(len(x[0]), len(y[0])))
        apps.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\kombu-master\kombu\clocks.py
            # return first item sorted by process id
            return sorted(same, key=lambda event: event[1])[0]
        # clock values unique, return first item
#########################################################################################
C:\Users\muvva\Desktop\testing\kombu-master\t\unit\asynchronous\test_timer.py
        # we don't care about results, just that it's possible
        Entry(lambda x: 1) < Entry(lambda x: 2)
        Entry(lambda x: 1) > Entry(lambda x: 2)
#########################################################################################
C:\Users\muvva\Desktop\testing\labelme-master\labelme\app.py
            # Set to one to scale to 100% when loading files.
            self.MANUAL_ZOOM: lambda: 1,
        }
#########################################################################################
C:\Users\muvva\Desktop\testing\Lasagne-master\lasagne\tests\layers\test_normalization.py
        # initializer for a tensor of unique values
        return lambda shape: np.arange(np.prod(shape)).reshape(shape)

#########################################################################################
C:\Users\muvva\Desktop\testing\Lasagne-master\lasagne\tests\layers\test_special.py
        # initializer for a tensor of unique values
        return lambda shape: np.arange(np.prod(shape)).reshape(shape)

#########################################################################################
C:\Users\muvva\Desktop\testing\Lasagne-master\lasagne\tests\layers\test_special.py
        # initializer for a tensor of unique values
        return lambda shape: np.arange(np.prod(shape)).reshape(shape)

#########################################################################################
C:\Users\muvva\Desktop\testing\Lasagne-master\lasagne\tests\layers\test_special.py
        # initializer for a tensor of unique values
        return lambda shape: floatX((np.arange(
            np.prod(shape)).reshape(shape)) / floatX(np.prod(shape)))
#########################################################################################
C:\Users\muvva\Desktop\testing\learn-python-master\src\data_types\test_lists.py
    # the loop completes. We can calculate the list of squares without any side effects using:
    squares = list(map(lambda x: x ** 2, range(10)))
    assert squares == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
#########################################################################################
C:\Users\muvva\Desktop\testing\learn-python-master\src\functions\test_lambda_expressions.py
    # This function returns the sum of its two arguments: lambda a, b: a+b
    # Like nested function definitions, lambda functions can reference variables from the
    # containing scope.
#########################################################################################
C:\Users\muvva\Desktop\testing\learn-python-master\src\functions\test_lambda_expressions.py
    # Sort pairs by text key.
    pairs.sort(key=lambda pair: pair[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\librosa-master\tests\test_filters.py
    # should behave like a box filter, which has enbw == 1
    assert librosa.filters.window_bandwidth(lambda n: np.ones(n)) == 1

#########################################################################################
C:\Users\muvva\Desktop\testing\locust-master\examples\custom_wait_function.py
    # We will model this wait time as exponentially distributed with a mean of 1 second
    wait_function = lambda self: random.expovariate(1)*1000 # *1000 to convert to milliseconds
    task_set = UserTasks
#########################################################################################
C:\Users\muvva\Desktop\testing\logbook-master\logbook\base.py
        # TODO: Replace the lambda with str when we remove support for python 2
        self.extra = defaultdict(lambda: u'', extra or ())
        #: If available, optionally the interpreter frame that pulled the
#########################################################################################
C:\Users\muvva\Desktop\testing\logbook-master\logbook\base.py
        # TODO: Replace the lambda with str when we remove support for python 2`
        self.extra = defaultdict(lambda: u'', self.extra)
        return self
#########################################################################################
C:\Users\muvva\Desktop\testing\lore-master\lore\features\base.py
            key_prefix = self.cache_key_prefix() + "#" + column
            self._data['cache_key'] = self._data[key_list].apply(lambda xdf: key_prefix + "=" + '#'.join(xdf.astype(str).values), axis=1)
            result[column] = dict(zip(self._data.cache_key.values, self._data[column].values))
#########################################################################################
C:\Users\muvva\Desktop\testing\lore-master\lore\features\base.py
            key_prefix = self.cache_key_prefix() + "#" + column
            self._data['cache_key'] = self._data[keys].apply(lambda xdf: key_prefix + "=" + '#'.join(xdf.astype(str).values),
                                                 axis=1)
#########################################################################################
C:\Users\muvva\Desktop\testing\luigi-master\luigi\contrib\hadoop.py
                    # Only dump one json string, and skip another one, maybe key or value.
                    output = filter(lambda x: x, output)
                else:
#########################################################################################
C:\Users\muvva\Desktop\testing\luigi-master\luigi\task.py
        # The order the parameters are created matters. See Parameter class
        params.sort(key=lambda t: t[1]._counter)
        return params
#########################################################################################
C:\Users\muvva\Desktop\testing\luigi-master\test\worker_test.py
        # So if we do not disable the shutdown handler, this would fail.
        t = threading.Thread(target=lambda: luigi.build([task], local_scheduler=True))
        t.start()
#########################################################################################
C:\Users\muvva\Desktop\testing\lxml-master\doc\s5\ep2008\atom.py
E = builder.ElementMaker(#parser=atom_parser,
                         typemap={datetime: lambda e, v: _strftime(v)})
__all__.append('E')
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\2\em.py
# z(n) ~ N(0, I) (latent variables)
# W ~ N(0, 1/lambda)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
# variational-inference for linear regression
# y(i) ~ N( x(i).dot(w), 1/lambda )
# w ~ N( 0, diag(alpha_1, alpha_2, ..., alpha_D)^-1 )
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
# alpha_i ~ Gamma(a, b)
# lambda ~ Gamma(e, f)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
  # E(lnX) = digamma(a) - ln(b) for X ~ Gamma(a,b)
  E_ln_lambda = digamma(e) - np.log(f)
  E_ln_alpha = digamma(a) - np.log(b)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
  # model likelihood
  total = (N/2.0)*(E_ln_lambda - log2pi)
  data_total = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
  # lambda likelihood
  total += e0*np.log(f0) - np.log(gamma(e0)) + (e0 - 1)*E_ln_lambda - f0*(float(e)/f)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
  # total -= e_ln_q_gamma(e, f)
  # print "total after lnq(lambda):", total
  for k in xrange(D):
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\3\run.py
  # 1/E[lambda]
  print "1/E[lambda]:", f/e

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\4\vigmm.py
  Elnpi = digamma(alphas) - digamma(alphas.sum()) # E[ln(pi)]
  Elambda = np.empty((K, D, D))
  Elnlambda = np.empty(K)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\4\vigmm.py
  # total -= N*D*ln2pi
  # total += 0.5*Elnlambda.sum()
  # for j in xrange(K):
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\4\vigmm.py
  # for j in xrange(K):
  #   # total += 0.5*Elnlambda[j] # vectorized
  #   for i in xrange(N):
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\bayesian_ml\4\vigmm.py
  #       diff_ij = X[i] - mu_means[j]
  #       total -= 0.5*( diff_ij.dot(Elambda[j]).dot(diff_ij) + np.trace(Elambda[j].dot(mu_covs[j])) )

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\nlp_class2\pmi.py
# sort in descending order
all_word_counts = sorted(all_word_counts.items(), key=lambda x: x[1], reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\nlp_class3\attention.py
  # we need a different layer for each time step
  selector = Lambda(lambda x: x[:, t:t+1])
  xt = selector(decoder_inputs_x)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\nlp_class3\bilstm_mnist.py
# custom layer
permutor = Lambda(lambda t: K.permute_dimensions(t, pattern=(0, 2, 1)))

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\preprocess.py
# takes awhile
df['movie_idx'] = df.apply(lambda row: movie2idx[row.movieId], axis=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark.py
header = data.first() #extract header
data = data.filter(lambda row: row != header)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark.py
# train
x = train.map(lambda p: (p[0], p[1]))
p = model.predictAll(x).map(lambda r: ((r[0], r[1]), r[2]))
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark.py
# each row of result is: ((user_id, movie_id), (rating, prediction))
mse = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()
print("train mse: %s" % mse)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark.py
# test
x = test.map(lambda p: (p[0], p[1]))
p = model.predictAll(x).map(lambda r: ((r[0], r[1]), r[2]))
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark2.py
header = data.first() #extract header
data = data.filter(lambda row: row != header)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark2.py
# train
x = train.map(lambda p: (p[0], p[1]))
p = model.predictAll(x).map(lambda r: ((r[0], r[1]), r[2]))
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark2.py
# each row of result is: ((user_id, movie_id), (rating, prediction))
mse = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()
print("***** train mse: %s *****" % mse)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\recommenders\spark2.py
# test
x = test.map(lambda p: (p[0], p[1]))
p = model.predictAll(x).map(lambda r: ((r[0], r[1]), r[2]))
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\atari\dqn_theano.py
    # final layer
    layer = HiddenLayer(M1, K, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\dqn_tf.py
    # final layer
    layer = HiddenLayer(M1, K, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\dqn_theano.py
    # final layer
    layer = HiddenLayer(M1, K, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\pg_tf.py
    # final layer
    # layer = HiddenLayer(M1, K, lambda x: x, use_bias=False)
    layer = HiddenLayer(M1, K, tf.nn.softmax, use_bias=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\pg_tf.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\pg_theano.py
    # final layer
    layer = HiddenLayer(M1, K, lambda x: x, use_bias=False)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\pg_theano.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\td_lambda.py
    #   if action != a:
    #     self.eligibilities[action] *= gamma*lambda_
    #   else:
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\td_lambda.py
    #   else:
    #     self.eligibilities[a] = grad + gamma*lambda_*self.eligibilities[a]

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\td_lambda.py
# returns a list of states_and_rewards, and the total reward
def play_one(model, env, eps, gamma, lambda_):
  observation = env.reset()
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\cartpole\td_lambda.py
    # eps = 0.1
    states_actions_rewards, totalreward = play_one(model, env, eps, gamma, lambda_)
    totalrewards[n] = totalreward
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_tf.py
    # final layer mean
    self.mean_layer = HiddenLayer(M1, 1, lambda x: x, use_bias=False, zeros=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_tf.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_tf_random.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x, use_bias=False, zeros=True)
    self.mean_layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_theano.py
    # final layer mean
    self.mean_layer = HiddenLayer(M1, 1, lambda x: x, use_bias=False, zeros=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_theano.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x)
    self.layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\pg_theano_random.py
    # final layer
    layer = HiddenLayer(M1, 1, lambda x: x, use_bias=False, zeros=True)
    self.mean_layers.append(layer)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\q_learning.py
  # both X and Y will be of shape (num_tiles, num_tiles)
  Z = np.apply_along_axis(lambda _: -np.max(estimator.predict(_)), 2, np.dstack([X, Y]))
  # Z will also be of shape (num_tiles, num_tiles)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\td_lambda.py
#
# Adapt Q-Learning script to use TD(lambda) method instead

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\td_lambda.py
# returns a list of states_and_rewards, and the total reward
def play_one(model, env, eps, gamma, lambda_):
  observation = env.reset()
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\rl2\mountaincar\td_lambda.py
    # eps = 0.5/np.sqrt(n+1)
    totalreward = play_one(model, env, eps, gamma, lambda_)
    totalrewards[n] = totalreward
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\supervised_class2\rf_classification.py
  # e = edible = 0, p = poisonous = 1
  df[0] = df.apply(lambda row: 0 if row[0] == 'e' else 1, axis=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class2\pca_impl.py
# some may be slightly negative due to precision
idx = np.argsort(-lambdas)
lambdas = lambdas[idx] # sort in proper order
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class2\pca_impl.py
lambdas = lambdas[idx] # sort in proper order
lambdas = np.maximum(lambdas, 0) # get rid of negatives
Q = Q[:,idx]
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class2\pca_impl.py
# plot variances
plt.plot(lambdas)
plt.title("Variance of each component")
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class2\pca_impl.py
# cumulative variance
plt.plot(np.cumsum(lambdas))
plt.title("Cumulative variance")
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class3\vae_tf.py
    # since there needs to be M_out means + M_out variances
    h = DenseLayer(M_in, 2 * M, f=lambda x: x)
    self.encoder_layers.append(h)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class3\vae_tf.py
    # so no activation function is needed at the final layer
    h = DenseLayer(M_in, D, f=lambda x: x)
    self.decoder_layers.append(h)
#########################################################################################
C:\Users\muvva\Desktop\testing\machine_learning_examples-master\unsupervised_class3\vae_theano.py
    # since there needs to be M_out means + M_out variances
    h = DenseLayer(M_in, 2 * M, f=lambda x: x)
    self.encoder_layers.append(h)
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\core\__init__.py
    # Misc
    type(None):     lambda tree, i: "",
    Literal:        lambda tree, i: "$Literal(%s)" % rec(tree.body, i),
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\core\__init__.py
    #Statements
    ast.Expr:       lambda tree, i: tabs(i) + rec(tree.value, i),
    ast.Import:     lambda tree, i: (tabs(i) + "import " +
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\core\__init__.py
                                #unicode_literals
    ast.Str:        lambda tree, i: repr(tree.s),
    ast.Name:       lambda tree, i: str(tree.id),
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\core\__init__.py
                                     mix(" from ", rec(tree.cause, i))), # See PEP-344 for semantics
    ast.Try:        lambda tree, i: (tabs(i) + "try:" + rec(tree.body, i+1) +
                                     jmap("", lambda t: rec(t,i), tree.handlers) +
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\experimental\pinq.py
    # return q[(lambda query: query.bind.execute(query).fetchall())(ast[x])]
    new_tree = hq[(lambda query: name[sym].bind.execute(
        name[sym]).fetchall())(ast_literal[x])]
#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\experimental\pinq.py
            # ast.Lambda taking a single param 'x'
            out = hq[(lambda x: ast_literal[out])()]

#########################################################################################
C:\Users\muvva\Desktop\testing\macropy-master\macropy\experimental\test\js_snippets.py
        # cross-compiling a trivial predicate
        code, javascript = pyjs[lambda x: x > 5 and x % 2 == 0]

#########################################################################################
C:\Users\muvva\Desktop\testing\manticore-master\manticore\utils\command_line.py
    # Sort by impact, confidence, and name
    detectors_list = sorted(detectors_list, key=lambda element: (element[2], element[3], element[0]))
    idx = 1
#########################################################################################
C:\Users\muvva\Desktop\testing\manticore-master\scripts\stats.py
    print('#PC:  frequency')
    for pc, freq in sorted(list(db.items()), key=lambda x: -x[1]):
        print(f'{pc:x}: {freq}')
#########################################################################################
C:\Users\muvva\Desktop\testing\manticore-master\tests\other\test_smtlibv2.py
        #Testing some slicing combinations
        self.assertRaises(IndexError, lambda i: translate_to_smtlib(array_slice[0:1000][i]), 1002)
        self.assertTrue(self.solver.must_be_true(cs, array_slice[0:1000][0] == ord('A')))
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\executor.py
        # executed key to ref counts
        self.key_to_ref_counts = defaultdict(lambda: 0)
        # synchronous provider
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\promise.py
        # should be called when current Promise finishes. For instance,
        # in ``p2 = p1.then(lambda arg: promise_call())``, the value of
        # _bind_item of the Promise object returned by ``promise_call()``
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\promise.py
        # _bind_item of the Promise object returned by ``promise_call()``
        # is p2, thus when the lambda finishes, subsequent operations in
        # p2 can be executed.
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\scheduler\analyzer.py
        # note that different orders can contribute to different efficiency
        return sorted(zero_degrees, key=lambda n: descendant_sizes[n.op.key])

#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\scheduler\analyzer.py
            # compute data amounts held in workers
            worker_stores = defaultdict(lambda: 0)
            for meta in input_chunk_metas[op_key].values():
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\scheduler\analyzer.py
        # assign pass 1: assign from fixed groups
        sorted_workers = sorted(worker_op_keys, reverse=True, key=lambda k: len(worker_op_keys[k]))
        for worker in sorted_workers:
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\scheduler\operands\tests\test_common_ut.py
            # test entering state with failure in fetching sizes
            with patch_method(ChunkMetaActor.batch_get_chunk_size, new=lambda *_: [None, None]):
                test_entering_state(OperandState.UNSCHEDULED)
#########################################################################################
C:\Users\muvva\Desktop\testing\mars-master\mars\worker\execution.py
            # fetch data from other workers, if one fails, try another
            sorted_workers = sorted(worker_priorities, key=lambda pr: pr[1])
            p = promise.Promise(failed=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\afm.py
        # this field, just return it as straight bytes.
        b'Notice': lambda x: x,
        b'EncodingScheme': _to_str,
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\backends\backend_gtk3.py
            # A hack to remove the title since we have no group naming.
            group.forall(lambda widget, data: widget.set_visible(False), None)

#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\backends\backend_pgf.py
            # dummy==True deactivate all methods
            nop = lambda *args, **kwargs: None
            for m in RendererPgf.__dict__:
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\backends\backend_ps.py
                    # file.
                    fh.close = lambda: None
                else:
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\backend_tools.py
            # Make sure we add a home view for new axes as they're added
            figure.add_axobserver(lambda fig: self.update_home_views(fig))

#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\dates.py
    # If it's sufficiently datetime-like, it will have a `date()` method
    cdate = getattr(dt, 'date', lambda: None)()
    if cdate is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\docstring.py
    #  http://mail.python.org/pipermail/patches/2007-February/021687.html
    return lambda target: dedent(copy(source)(target))

#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\font_manager.py
    # Delay the warning by 5s.
    timer = Timer(5, lambda: _log.warning(
        'Matplotlib is building the font cache using fc-list. '
#########################################################################################
C:\Users\muvva\Desktop\testing\matplotlib-master\lib\matplotlib\mathtext.py
    # make a lambda and call it to get the namespace right
    _snowflake = (lambda am: [p for p in tex2uni if
                              any(p.startswith(a) and a != p for a in am)]
#########################################################################################
C:\Users\muvva\Desktop\testing\memory_profiler-master\memory_profiler.py
        # .. cross-platform but but requires Python 3.4 or higher ..
        stat = next(filter(lambda item: str(item).startswith(filename),
                           tracemalloc.take_snapshot().statistics('filename')))
#########################################################################################
C:\Users\muvva\Desktop\testing\memory_profiler-master\memory_profiler.py
        # Make a fake function
        func = lambda x: x
        func.__module__ = ""
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\analysis\cst_propag.py
    # Function used to test if an Expression is considered as a constant
    is_expr_cst = lambda _, ir_arch, expr: is_expr_cst(ir_arch, expr)

#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\analysis\modularintervals.py
            # Python >> is the arithmetic one
            ashr = lambda x, y: self._signed2unsigned(self._unsigned2signed(x) >> y)
            end_min, end_max = ashr(x_min, shift), ashr(x_max, shift)
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\analysis\ssa.py
        # Replace non modified node used in phi with new variable
        self.ircfg.simplify(lambda expr:expr.replace_expr(var_to_newname))

#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\arch\x86\sem.py
# SSE
pminsw = vec_vertical_instr('min', 16, lambda x: _min_max(x, signed=True))
pminub = vec_vertical_instr('min', 8, lambda x: _min_max(x, signed=False))
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\core\asmblock.py
# Out of _merge_blocks to be computed only once
_acceptable_block = lambda graph, loc_key: (not isinstance(graph.loc_key_to_block(loc_key), AsmBlockBad) and
                                   len(graph.loc_key_to_block(loc_key).lines) > 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\core\asmblock.py
    # Try to place bigger blockChains first
    pinned_chains.sort(key=lambda x: x.offset_min)
    blockChains.sort(key=lambda x: -x.max_size)
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\core\types.py
            # Patch the field to propagate the MemSelf replacement
            dst_type._get_self_type = lambda: self._get_self_type()
            # dst_type cannot be patched here, since _get_self_type of the outer
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\core\utils.py
# Little endian
upck8le = lambda x: struct.unpack('<B', x)[0]
upck16le = lambda x: struct.unpack('<H', x)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\core\utils.py
# Big endian
upck8be = lambda x: struct.unpack('>B', x)[0]
upck16be = lambda x: struct.unpack('>H', x)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\ir\ir.py
            # Find collision
            e_colision = reduce(lambda x, y: x.union(y),
                                (self.get_modified_slice(dst, src)
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\jitter\jitcore_python.py
            # Update PC helper
            update_pc = lambda value: setattr(cpu, self.ir_arch.pc.name, value)

#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\loader\minidump.py
        # Floating point
        ("Header", "M128A", lambda ctx: 2),
        ("Legacy", "M128A", lambda ctx: 8),
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\miasm\loader\minidump.py
        # Vector registers
        ("VectorRegister", "M128A", lambda ctx: 16),
        ("VectorControl", "u64"),
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\test\arch\mep\asm\ut_helpers_asm.py
    # Rename objdump registers names
    mn_str = re.sub("\$([0-9]+)", lambda m: "R"+m.group(1), mn_str)
    mn_str = mn_str.replace("$", "")
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\test\arch\mep\jit\ut_helpers_jit.py
    # Set the breakpoint
    jitter.add_breakpoint(len(asm), lambda x: False)

#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\test\expression\simplifications.py
    # Dummy 'check' method to avoid checking the '--z3' argument each time
    check = lambda expr_in, expr_out: None

#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\test\utils\testset.py
        # Init internals
        self.task_done_cb = lambda tst, err: None  # On task done callback
        self.task_new_cb = lambda tst: None       # On new task callback
#########################################################################################
C:\Users\muvva\Desktop\testing\miasm-master\test\utils\testset.py
        self.task_done_cb = lambda tst, err: None  # On task done callback
        self.task_new_cb = lambda tst: None       # On new task callback
        self.todo_queue = Queue()                 # Tasks to do
#########################################################################################
C:\Users\muvva\Desktop\testing\Misago-master\devproject\settings.py
# without need for Django's i18n features be initialized first.
_ = lambda s: s

#########################################################################################
C:\Users\muvva\Desktop\testing\Misago-master\misago\threads\api\postingendpoint\attachments.py
            # sort final attachments by id, descending
            self.final_attachments.sort(key=lambda a: a.pk, reverse=True)
            self.context["user"].attachment_set.filter(
#########################################################################################
C:\Users\muvva\Desktop\testing\Misago-master\misago\threads\viewmodels\posts.py
            # sort both by pk
            posts.sort(key=lambda p: p.pk)

#########################################################################################
C:\Users\muvva\Desktop\testing\mitmproxy-master\examples\complex\tls_passthrough.py
        # A server_address -> interception results mapping
        self.history = collections.defaultdict(lambda: collections.deque(maxlen=200))

#########################################################################################
C:\Users\muvva\Desktop\testing\mitmproxy-master\mitmproxy\tools\console\flowdetailview.py
        # sort operations by timestamp
        parts = sorted(parts, key=lambda p: p[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\modin-master\modin\pandas\groupby.py
    def plot(self):  # pragma: no cover
        return self._default_to_pandas(lambda df: df.plot)

#########################################################################################
C:\Users\muvva\Desktop\testing\modin-master\modin\pandas\groupby.py
        # This operation requires a SeriesGroupBy Object
        return self._default_to_pandas(lambda df: df.__getitem__(key))

#########################################################################################
C:\Users\muvva\Desktop\testing\modin-master\modin\pandas\test\test_groupby.py
        # TODO Add more apply functions
        apply_functions = [lambda df: df.sum(), min]
        for func in apply_functions:
#########################################################################################
C:\Users\muvva\Desktop\testing\modin-master\modin\pandas\test\utils.py
# Test functions for groupby apply
groupby_apply_func = {"sum": lambda df: df.sum(), "negate": lambda df: -df}
groupby_apply_func_keys = list(groupby_apply_func.keys())
#########################################################################################
C:\Users\muvva\Desktop\testing\modin-master\modin\pandas\test\utils.py
# Test functions for groupby pipe
groupby_pipe_func = {"sum": lambda df: df.sum()}
groupby_pipe_func_keys = list(groupby_pipe_func.keys())
#########################################################################################
C:\Users\muvva\Desktop\testing\molecule-master\molecule\util.py
    # https://github.com/jpvanhal/inflection
    return re.sub(r"(?:^|_)(.)", lambda m: m.group(1).upper(), string)

#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\qcheck.py
    # which I haven't quite tracked down, so I'm just ignoring it...
    pattern = lambda: u"".join(gen_list(choose_lifted(u"a"), gen_length)())

#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_collection.py
        # The insert failed duplicate key...
        wait_until(lambda: 2 == db.test.count_documents({}),
                   'forcing duplicate key error')
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_gridfs_spec.py
# Commands.
_COMMANDS = {"delete": lambda coll, doc: [coll.delete_many(d["q"])
                                          for d in doc['deletes']],
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_legacy_api.py
        # Only the first and third documents are inserted.
        wait_until(lambda: 2 == db.collection_4.count(),
                   'insert 2 documents', timeout=60)
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_legacy_api.py
        # find() before insert() is prohibited.
        self.assertRaises(AttributeError, lambda: bulk.find({}).insert({}))

#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_legacy_api.py
        # remove() must be preceded by find().
        self.assertRaises(AttributeError, lambda: bulk.remove())
        bulk.find({}).remove()
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_legacy_api.py
        # remove_one() must be preceded by find().
        self.assertRaises(AttributeError, lambda: bulk.remove_one())

#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_mongos_load_balancing.py
        # all of them.
        wait_until(lambda: len(client.nodes) == 3, 'connect to all mongoses')

#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_mongos_load_balancing.py
        # Discover only b is within latency window.
        wait_until(lambda: set([('b', 2)]) == writable_addresses(topology),
                   'discover server "a" is too far')
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_replica_set_reconfig.py
        # MongoClient connects to primary by default.
        wait_until(lambda: c.address is not None, 'connect to primary')
        self.assertEqual(c.address, ('a', 1))
#########################################################################################
C:\Users\muvva\Desktop\testing\mongo-python-driver-master\test\test_session.py
            # Tests from Driver Sessions Spec.
            ('ping', lambda: client.admin.command('ping')),
            ('aggregate', lambda: list(collection.aggregate([]))),
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\examples\moving_letters.py
# helper function
rotMatrix = lambda a: np.array( [[np.cos(a),np.sin(a)], 
                                 [-np.sin(a),np.cos(a)]] )
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\examples\the_end.py
# The mask is a circle with vanishing radius r(t) = 800-200*t               
clip.mask.get_frame = lambda t: circle(screensize=(clip.w,clip.h),
                                       center=(clip.w/2,clip.h/4),
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\examples\ukulele_concerto.py
# I am *NOT* explaining the formula, understands who can/want.
txt_mov = txt_col.set_pos( lambda t: (max(w/30,int(w-0.5*w*t)),
                                  max(5*h/6,int(100*t))) )
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\Clip.py
        #mf = copy(self.make_frame)
        newclip = self.set_make_frame(lambda t: fun(self.get_frame, t))

#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\Clip.py
        >>> # plays the clip (and its mask and sound) twice faster
        >>> newclip = clip.fl_time(lambda: 2*t, apply_to=['mask', 'audio'])
        >>>
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\Clip.py
        >>> # plays the clip starting at t=3, and backwards:
        >>> newclip = clip.fl_time(lambda: 3-t)

#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\compositing\transitions.py
    ts = clip.duration - duration  # start time of the effect.
    pos_dict = {'left': lambda t: (min(0, w*(1-(t-ts)/duration)), 'center'),
                'right': lambda t: (max(0, w*((t-ts)/duration-1)), 'center'),
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\fx\mask_color.py
    # code a little sloppy, it just works.
    hill = lambda x: (1.0*(x!=0) if (thr==0) else (x**s/ (thr**s+x**s)))
    color = np.array(color)
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\fx\resize.py
    >>> myClip.resize(width=800) # height computed automatically.
    >>> myClip.resize(lambda t : 1+0.02*t) # slow swelling of the clip
    
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\tools\cuts.py
        >>> # Only keep the matches corresponding to (> 1 second) sequences.
        >>> new_matches = matches.filter( lambda match: match.time_span > 1)
        """
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\tools\cuts.py
        >>> matches = find_matching_frames(clip, 10, 3) # will take time
        >>> best = matches.filter(lambda m: m.time_span > 1.5).best()
        >>> clip.subclip(best.t1, best.t2).write_gif("foo.gif")
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\tools\segmenting.py
    # Sort the slices from left to right
    islices = sorted(enumerate(slices), key = lambda s : s[1][1].start)
    
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\VideoClip.py
        >>> # be played twice slower in ``newclip``
        >>> newclip = clip.subapply(lambda c:c.speedx(0.5) , 3,6)

#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\VideoClip.py
        >>> # clip's position is horizontally centered, and moving up !
        >>> clip.set_position(lambda t: ('center', 50+t) )

#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\moviepy\video\VideoClip.py
        # unchanged
        self.make_frame = lambda t: img
        self.size = img.shape[:2][::-1]
#########################################################################################
C:\Users\muvva\Desktop\testing\moviepy-master\tests\test_fx.py
    # I get a general stream error when playing this video.
    # clip4=clip.resize(lambda t : 1+0.02*t) # slow swelling of the clip
    #clip4.write_videofile(os.path.join(TMP_DIR, "resize4.webm"))
#########################################################################################
C:\Users\muvva\Desktop\testing\MusicBot-master\musicbot\bot.py
                    process=True,    # ASYNC LAMBDAS WHEN
                    on_error=lambda e: asyncio.ensure_future(
                        self.safe_send_message(channel, "```\n%s\n```" % e, expire_in=120), loop=self.loop),
#########################################################################################
C:\Users\muvva\Desktop\testing\MusicBot-master\musicbot\downloader.py
# Fuck your useless bugreports message that gets two link embeds and confuses users
youtube_dl.utils.bug_reports_message = lambda: ''

#########################################################################################
C:\Users\muvva\Desktop\testing\MusicBot-master\musicbot\entry.py
            # Trigger ready callbacks.
            self._for_each_future(lambda future: future.set_result(self))

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\build.py
            if manager.options.verbosity >= 3:  # Dump all mtimes for extreme debugging.
                all_ids = sorted(ascc | viable, key=lambda id: graph[id].xmeta.data_mtime)
                for id in all_ids:
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\build.py
        # Filtered dependencies are uniform -- order by global order.
        return sorted(ascc, key=lambda id: -graph[id].order)
    pri_max = max(pri_spread)
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
# In normal mode one can defer functions and methods (also decorated and/or overloaded)
# and lambda expressions. Nested functions can't be deferred -- only top-level functions
# and methods of classes not defined within a function can be deferred.
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
            # Don't report an error yet. Just defer. Note that we don't defer
            # lambdas because they are coupled to the surrounding function
            # through the binder and the inferred type of the lambda, so it
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
            # lambdas because they are coupled to the surrounding function
            # through the binder and the inferred type of the lambda, so it
            # would get messy.
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
                # E.g. `return f()` for some `f` that returns None.  We allow
                # this only if we're in a lambda or in a function that returns
                # `None` or `Any`.
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
                # `None` or `Any`.
                allow_none_func_call = is_lambda or declared_none_return or declared_any_return

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checker.py
                    # Functions returning a value of type None are allowed to have a None return.
                    if is_lambda or isinstance(typ, NoneTyp):
                        return
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\checkexpr.py
            #     variables in an expression are inferred at the same time.
            #     (And this is hard, also we need to be careful with lambdas that require
            #     two passes.)
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\errors.py
            # Sort the errors specific to a file according to line number and column.
            a = sorted(errors[i0:i], key=lambda x: (x.line, x.column))
            result.extend(a)
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\messages.py
        # use an ordered dictionary sorted by variable name
        sorted_locals = OrderedDict(sorted(type_map.items(), key=lambda t: t[0]))
        self.fail("Revealed local types are:", context)
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\message_registry.py
INVALID_SLICE_INDEX = 'Slice index must be an integer or None'  # type: Final
CANNOT_INFER_LAMBDA_TYPE = 'Cannot infer type of lambda'  # type: Final
CANNOT_ACCESS_INIT = 'Cannot access "__init__" directly'  # type: Final
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\newsemanal\semanal.py
            # classes may be incomplete. Postpone the calculation.
            self.schedule_patch(PRIORITY_FALLBACKS, lambda: calculate_tuple_fallback(base))

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\report.py
        # index_path = os.path.join(self.output_dir, 'index.xml')
        output_files = sorted(self.files, key=lambda x: x.module)

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\server\update.py
        # TODO: Preserve order (set is not optimal)
        for id, nodes in sorted(todo.items(), key=lambda x: x[0]):
            assert id not in up_to_date_modules
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\stubdoc.py
        # Move functions with (*args, **kwargs) in their signature to last place.
        return list(sorted(self.signatures, key=lambda x: 1 if args_kwargs(x) else 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\stubgenc.py
    obj_dict = getattr(obj, '__dict__')  # type: Mapping[str, Any]
    items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))
    methods = []  # type: List[str]
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\mypy\test\helpers.py
    # Use retries to work around potential flakiness on Windows (AppVeyor).
    retry_on_error(lambda: shutil.copy(source_path, target_path))

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\test-data\stdlib-samples\3.2\random.py
        # lambd: rate lambd = 1/mean
        # ('lambda' is a Python reserved word)

#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\test-data\stdlib-samples\3.2\test\test_posixpath.py
        # mypy: can't modify os directly
        setattr(os, 'getcwd', lambda: r"/home/user/bar")
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\mypy-master\test-data\stdlib-samples\3.2\test\test_posixpath.py
        # mypy: can't modify os directly
        setattr(os, 'getcwdb', lambda: br"/home/user/bar")
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\nameko-master\docs\examples\testing\unit_test.py
    # add side effects to the mock proxy to the "maths" service
    service.maths_rpc.multiply.side_effect = lambda x, y: x * y
    service.maths_rpc.divide.side_effect = lambda x, y: x / y
#########################################################################################
C:\Users\muvva\Desktop\testing\nameko-master\nameko\testing\services.py
        # replace "maths" service
        service.maths_rpc.multiply.side_effect = lambda x, y: x * y
        service.maths_rpc.divide.side_effect = lambda x, y: x / y
#########################################################################################
C:\Users\muvva\Desktop\testing\nameko-master\test\test_container.py
            # the container dies before the second exception gets raised
            kill.side_effect = lambda exc: sleep()

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\approximation\kcomponents.py
    # There is no k-component of k > maximum core number
    # \kappa(G) <= \lambda(G) <= \delta(G)
    g_cnumber = core_number(G)
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\bipartite\generators.py
                # flatten the list of lists into a list.
                bbstubs = reduce(lambda x, y: x + y, bb)
                # choose preferentially a bottom node.
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\coloring\greedy_coloring.py
            # degree.
            node = max(saturation, key=lambda v: (saturation[v], G.degree(v)))
            yield node
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\connectivity\disjoint_paths.py
        # https://docs.python.org/3/library/itertools.html
        # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
        if predicate is None:
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\connectivity\edge_augmentation.py
    # sort so we choose minimum degree nodes first
    inverse = {mu: sorted(mapped, key=lambda u: (G.degree(u), u))
               for mu, mapped in inverse.items()}
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\connectivity\edge_kcomponents.py
        # workaround for classmethod decorator
        not_implemented_for('multigraph')(lambda G: G)(G)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\dag.py
        # non-negative, otherwise terminate.
        maxu = max(us, key=lambda x: x[0]) if us else (0, v)
        dist[v] = maxu if maxu[0] >= 0 else (0, v)
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # distance from tree root
        self.height = defaultdict(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # None -> missing edge
        self.parent_edge = defaultdict(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # index of next edge to handle in adjacency list of each node
        ind = defaultdict(lambda: 0)
        # boolean to indicate whether to skip the initial work for an edge
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # boolean to indicate whether to skip the initial work for an edge
        skip_init = defaultdict(lambda: False)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # index of next edge to handle in adjacency list of each node
        ind = defaultdict(lambda: 0)
        # boolean to indicate whether to skip the initial work for an edge
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # boolean to indicate whether to skip the initial work for an edge
        skip_init = defaultdict(lambda: False)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # index of next edge to handle in adjacency list of each node
        ind = defaultdict(lambda: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\planarity.py
        # dict to remember reference edges
        old_ref = defaultdict(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\shortest_paths\dense.py
    # for dist the default is the floating point inf value
    dist = defaultdict(lambda: defaultdict(lambda: float('inf')))
    for u in G:
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\similarity.py
        # yield from
        for t in sorted(other, key=lambda t: t[4] + t[1].ls + t[3].ls):
            yield t
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\tests\test_dag.py
    #     # Get the left and right children, nodes 1 and 2, respectively.
    #     left, right = sorted(children, key=lambda v: B.node[v]['label'])
    #     assert_equal(B.node[left]['label'], '1')
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\algorithms\tournament.py
    # an edge to `v`, then insert `v` before that node.
    index = index_satisfying(hampath, lambda u: v not in G[u])
    hampath.insert(index, v)
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\classes\reportviews.py
        else:  # data is attribute name
            self._report = lambda n, nbr, dd: \
                (n, nbr, dd[data]) if data in dd else (n, nbr, default)
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\convert_matrix.py
    # coordinates will become the edges in the graph.
    edges = map(lambda e: (int(e[0]), int(e[1])),
                zip(*(np.asarray(A).nonzero())))
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\generators\geometric.py
    # if p_dist function not supplied the default function is an exponential
    # distribution with rate parameter :math:`\lambda=1`.
    if p_dist is None:
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\algebraicconnectivity.py
        M = A.diagonal() # or some other preconditioner
        solver = _PCGSolver(lambda x: A * x, lambda x: M * x)
        x = solver.solve(b)
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\attrmatrix.py
        # For example,
        #     node_attr = lambda u: G.nodes[u].get('size', .5) * 3
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\attrmatrix.py
        # Alternative default value:
        #     edge_attr = lambda u,v: G[u][v].get('thickness', .5)
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\attrmatrix.py
        # Function on an attribute:
        #     edge_attr = lambda u,v: abs(G[u][v]['weight'])
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\attrmatrix.py
        # Handle Multi(Di)Graphs differently:
        #     edge_attr = lambda u,v: numpy.prod([d['size'] for d in G[u][v].values()])
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\linalg\attrmatrix.py
        # Ignore multiple edges
        #     edge_attr = lambda u,v: 1 if len(G[u][v]) else 0
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\utils\decorators.py
# Then add the extension to _dispatch_dict.
_dispatch_dict = defaultdict(lambda: open)
_dispatch_dict['.gz'] = _open_gz
#########################################################################################
C:\Users\muvva\Desktop\testing\networkx-master\networkx\utils\union_find.py
        # Find the heaviest root according to its weight.
        heaviest = max(roots, key=lambda r: self.weights[r])
        for r in roots:
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\benchmark\plotting.py
    # errors with no recommendation
    errordf = df.select(error=lambda x: isinstance(x, str) and x, loss=np.isnan)
    for _, row in errordf.iterrows():
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\benchmark\plotting.py
    # error with recoreded recommendation
    handlederrordf = df.select(error=lambda x: isinstance(x, str) and x, loss=lambda x: not np.isnan(x))
    for _, row in handlederrordf.iterrows():
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\functions\arcoating\core.py
        # Wave length range
        self.lambdas = np.arange(400, 900, 5)  # lambda values from min to max, in nm
        # AR parameters
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\functions\arcoating\core.py
            RE = impedance_pix(x, self.dpix, lam, self.ep0, self.epf)  # only normal incidence
            value = value + RE / len(self.lambdas)
        return value
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\optimization\base.py
            if np.array_equal(x, self.current_bests[name].x):   # reboot
                y: bytes = min(self.archive.bytesdict, key=lambda z, n=name: self.archive.bytesdict[z].get_estimation(n))  # type: ignore
                # rebuild best point may change, and which value did not track the updated value anyway
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\optimization\mutations.py
    # best pessimistic value in a random set of keys
    return np.frombuffer(min(my_keys, key=lambda x: archive.bytesdict[x].pessimistic_confidence_bound))

#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\optimization\optimizerlib.py
            # Sorting the population.
            self._evaluated_population.sort(key=lambda p: p.loss)
            # Computing the new parent.
#########################################################################################
C:\Users\muvva\Desktop\testing\nevergrad-master\nevergrad\optimization\optimizerlib.py
        # population is increased only if queue is empty (otherwise tell_not_asked does not work well at the beginning)
        if self.population.is_queue_empty() and len(self.population) < self.llambda:
            additional = [PSOParticle.random_initialization(self.dimension) for _ in range(self.llambda - len(self.population))]
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\apps\reader\models.py
        # print pctfeeds[:5]
        # orderedpctfeeds = sorted(pctfeeds, key=lambda f: .5*f[3]+.5*f[4], reverse=True)[:8]
        # pprint([(Feed.get_by_id(o[0]), o[1], o[2], o[3], o[4]) for o in orderedpctfeeds])
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\apps\recommendations\models.py
            # print "%-20s - %s" % (folder_title if folder_title != '' else '[Top]', sub.user_id)
        print sorted(found_folders.items(), key=lambda f: f[1], reverse=True)
        
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\config\pystartup.py
    # Now filter out those line containing the saveMacro
    lines= filter(lambda lineP, endMarkerStr=endMarkerStr:
                      not lineP.strip().endswith(endMarkerStr), open(historyPath).readlines())
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\utils\feedparser.py
        # all tags must be in a restricted subset of valid HTML tags
        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,
            re.findall(r'</?(\w+)',s)):
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\utils\feedparser.py
        # all entities must have been defined as valid HTML entities
        if filter(lambda e: e not in entitydefs.keys(), re.findall(r'&(\w+);', s)):
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\soupselect.py
        # attribute includes value as one of a set of space separated tokens
        '~': lambda el: value in el.get(attribute, '').split(),
        # attribute starts with value
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\soupselect.py
        # attribute starts with value
        '^': lambda el: el.get(attribute, '').startswith(value),
        # attribute ends with value
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\soupselect.py
        # attribute ends with value
        '$': lambda el: el.get(attribute, '').endswith(value),
        # attribute contains value
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\soupselect.py
        # attribute contains value
        '*': lambda el: value in el.get(attribute, ''),
        # attribute is either exactly value or starts with value-
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\soupselect.py
        # attribute is either exactly value or starts with value-
        '|': lambda el: el.get(attribute, '') == value \
            or el.get(attribute, '').startswith('%s-' % value),
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\__init__.py
            # ascending sort of prop_lists based on specificity
            props = sorted(props, key=lambda p: p['specificity'])
            # for each prop_list, apply to CSSStyleDeclaration
#########################################################################################
C:\Users\muvva\Desktop\testing\NewsBlur-master\vendor\pynliner\__init__.py
            # for each prop_list, apply to CSSStyleDeclaration
            for prop_list in map(lambda obj: obj['props'], props):
                for prop in prop_list:
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\nikola.py
        # string, arguments
        local_context["formatmsg"] = lambda s, *a: s % a
        for h in local_context['template_hooks'].values():
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\nikola.py
        # First let lxml replace most of them
        doc.rewrite_links(lambda dst: self.url_replacer(src, dst, lang, url_type), resolve_base_href=False)

#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\nikola.py
        # Last tie breaker: sort by source path (A-Z)
        posts = sorted(posts, key=lambda p: p.source_path)
        # Next tie breaker: sort by title if language is given (A-Z)
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\nikola.py
        # Next tie breaker: sort by date (reverse chronological order)
        posts = sorted(posts, key=lambda p: p.date, reverse=True)
        # Finally, sort by priority meta value (descending)
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\nikola.py
        # Finally, sort by priority meta value (descending)
        posts = sorted(posts, key=lambda p: int(p.meta('priority')) if p.meta('priority') else 0, reverse=True)
        # Return result
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\plugins\task\galleries.py
        else:  # Sort by name
            all_data.sort(key=lambda a: a[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\plugins\task\galleries.py
        else:  # Sort by name
            all_data.sort(key=lambda a: a[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\plugins\task\indexes.py
        # Redirect automatically generated 'index_rss' path handler to 'rss' for compatibility with old rss plugin
        site.register_path_handler('rss', lambda name, lang: site.path_handlers['index_rss'](name, lang))
        site.path_handlers['rss'].__doc__ = """A link to the RSS feed path.
#########################################################################################
C:\Users\muvva\Desktop\testing\nikola-master\nikola\post.py
        # Load data field from metadata
        self.data = Functionary(lambda: None, self.default_lang)
        for lang in self.translations:
#########################################################################################
C:\Users\muvva\Desktop\testing\nlib-master\nlib.py
        # create weights
        self.wi = Matrix(self.ni, self.nh, fill=lambda r,c: self.rand(-0.2, 0.2))
        self.wo = Matrix(self.nh, self.no, fill=lambda r,c: self.rand(-2.0, 2.0))
#########################################################################################
C:\Users\muvva\Desktop\testing\nlib-master\nlib.py
def D(f,h=1e-6): # first derivative of f
    return lambda x,f=f,h=h: (f(x+h)-f(x-h))/2/h

#########################################################################################
C:\Users\muvva\Desktop\testing\nlib-master\nlib.py
def DD(f,h=1e-6): # second derivative of f
    return lambda x,f=f,h=h: (f(x+h)-2.0*f(x)+f(x-h))/(h*h)

#########################################################################################
C:\Users\muvva\Desktop\testing\nose-master\nose\plugins\manager.py
            # call all plugins and yield a flattened iterator of their results
            return lambda *arg, **kw: list(self.generate(*arg, **kw))
        elif getattr(meth, 'chainable', False):
#########################################################################################
C:\Users\muvva\Desktop\testing\nose-master\unit_tests\test_loader.py
        # a suite test and doesn't belong here..
        assert filter(lambda t: isinstance(t, nose.case.Test), tests[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\cpp.py
# What's up with that?
l = sorted(CPP_to_Python_Ops_Dict.keys(), key=lambda a: len(a), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\Node\__init__.py
        # report them relative to the top-level SConstruct directory,
        # so we only print them after running them through this lambda
        # to turn them into the right relative Node and then return
#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\Taskmaster.py
        # list.
        self.tm.will_not_build(self.targets, lambda n: n.set_state(NODE_FAILED))

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\Tool\msvs.py
            #TODO 2.4: compat layer supports sorted(key=) but not sort(key=)
            #TODO 2.4: self.sources[n].sort(key=lambda a: a.lower())
            self.sources[n] = sorted(self.sources[n], key=lambda a: a.lower())
#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\Tool\msvs.py
            #TODO 2.4: self.sources[n].sort(key=lambda a: a.lower())
            self.sources[n] = sorted(self.sources[n], key=lambda a: a.lower())

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-2.3.2\SCons\Variables\ListVariable.py
            None, #_validator,
            lambda val: _converter(val, names, map))

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-3.0.4\SCons\cpp.py
# What's up with that?
l = sorted(list(CPP_to_Python_Ops_Dict.keys()), key=lambda a: len(a), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-3.0.4\SCons\Node\__init__.py
        # report them relative to the top-level SConstruct directory,
        # so we only print them after running them through this lambda
        # to turn them into the right relative Node and then return
#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-3.0.4\SCons\Taskmaster.py
        # list.
        self.tm.will_not_build(self.targets, lambda n: n.set_state(NODE_FAILED))

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\build\inline_copy\lib\scons-3.0.4\SCons\Variables\ListVariable.py
            None, #_validator,
            lambda val: _converter(val, names, map))

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\MainControl.py
    # apply an @1/@2 to disambiguate the filenames.
    for module in sorted(modules, key=lambda x: x.getFullName()):
        if module.isPythonShlibModule():
#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\nuitka\tree\ReformulationLambdaExpressions.py
#
""" Reformulation of lambda expressions.

#########################################################################################
C:\Users\muvva\Desktop\testing\Nuitka-master\tests\benchmarks\constructs\CallLambdaExpressionDirectly.py
# construct_begin
    return (lambda x : x)(7)
# construct_alternative
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\examples\nogil.py
    # time it
    print('{:>5.0f} ms'.format(min(repeat(lambda: func(*args, **kwargs),
                                          number=5, repeat=2)) * 1000))
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\array_analysis.py
    # Arguments must be either array, tuple, or integer
    assert all(map(lambda a: (isinstance(a, types.ArrayCompatible) or
                              isinstance(a, types.BaseTuple) or
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\compiler.py
        # Fallback typing: everything is a python object
        self.typemap = defaultdict(lambda: types.pyobject)
        self.calltypes = defaultdict(lambda: types.pyobject)
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\controlflow.py
        # This ensures that outer loops will come before inner loops
        for loop in sorted(loops.values(), key=lambda loop: len(loop.body)):
            for n in loop.body:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\cuda\args.py
        # is called.
        retr.append(lambda: devary)
        return devary
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\cuda\tests\cudapy\test_reduction.py
# Avoid recompilation of the sum_reduce function by keeping it at global scope
sum_reduce = cuda.Reduce(lambda a, b: a + b)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\inline_closurecall.py
            # We go over all loops, bigger loops first (outer first)
            for k, s in sorted(sized_loops, key=lambda tup: tup[1], reverse=True):
                visited.append(k)
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\npyufunc\array_exprs.py
    # should only create one parameter for it.
    expr_var_unique = sorted(set(expr_var_list), key=lambda var: var.name)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\parfor.py
        # print in line order, parfors loop id is based on discovery order
        for pf in sorted(self.initial_parfors, key=lambda x: x.loc.line):
            # use 0 here, the parfors are mutated by the time this routine
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\parfor.py
        # We go over all loops, smaller loops first (inner first)
        for loop, s in sorted(sized_loops, key=lambda tup: tup[1]):
            if len(loop.entries) != 1 or len(loop.exits) != 1:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\roc\target.py
    # SPIR version 2.0
    make_constant = lambda x: lc.Constant.int(lc.Type.int(), x)
    spir_version_constant = [make_constant(x) for x in SPIR_VERSION]
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\targets\arraymath.py
            # dtype cannot possibly contain NaN
            return lambda a: np.cumprod(a)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\targets\arraymath.py
            # dtype cannot possibly contain NaN
            return lambda a: np.cumsum(a)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\targets\arraymath.py
# no check performed, needed for pathway where no check is required
_check_nop = register_jitable(lambda x, y: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\targets\base.py
        # order candidates in ascending level of genericity
        ordered = sorted(candidates.keys(), key=lambda x: genericity[x])
        return ordered, genericity
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\targets\randomimpl.py
        # lambd: rate lambd = 1/mean
        # ('lambda' is a Python reserved word)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\testing\notebook.py
            #       be verifiable.
            scrub = lambda x: self.dump_canonical(list(self.scrub_outputs(x)))
            scrubbed = scrub(outputs)
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\npyufunc\test_parallel_ufunc_issues.py
            # process outputs from print
            got_output = sorted(map(lambda x: x.strip(), stdout.splitlines()))
            # build expected output
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\npyufunc\test_parallel_ufunc_issues.py
            # process outputs from print
            got_output = sorted(map(lambda x: x.strip(), stdout.splitlines()))
            # build expected output
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\recursion_usecases.py
# Mutual recursion with different arg names
def make_mutual2(jit=lambda x: x):
    @jit
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\recursion_usecases.py
# Indirect mutual recursion
def make_four_level(jit=lambda x: x):
    @jit
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_dispatcher.py
                # a tty (https://github.com/ipython/ipython/issues/9752)
                f = jit(cache=True)(lambda: 42)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_numberctor.py
            # Numpy int first.
            np_converter = lambda x: np_type(np.int64(x))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_random.py
            # Check results and their distribution
            self._check_array_results(lambda: cfunc(a, size), pop)

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_tuples.py
            # using eval here since Python 2 doesn't even support the syntax
            pyfunc = eval("lambda a: (1, *a)")
            cfunc = jit(nopython=True)(pyfunc)
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_tuples.py
            # using eval here since Python 2 doesn't even support the syntax
            pyfunc = eval("lambda a: (1, *a, (1, 2), *a)")
            cfunc = jit(nopython=True)(pyfunc)
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_tuples.py
        # empty
        check(lambda _: tuple(), ())
        # Homogeneous
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_tuples.py
        # Homogeneous
        check(lambda a: tuple(a), (4, 5))
        # Heterogeneous
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\tests\test_tuples.py
        # Heterogeneous
        check(lambda a: tuple(a), (4, 5.5))

#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\typing\context.py
        # Find the best case
        candidates.sort(key=lambda i: i[0])
        if candidates:
#########################################################################################
C:\Users\muvva\Desktop\testing\numba-master\numba\utils.py
# dummy invocation to force _at_shutdown() to be registered
finalize(lambda: None, lambda: None)
assert finalize._registered_with_atexit
#########################################################################################
C:\Users\muvva\Desktop\testing\oauthlib-master\oauthlib\common.py
        # Convert to unicode using encoding if given, else assume unicode
        encode = lambda x: to_unicode(x, encoding) if encoding else x

#########################################################################################
C:\Users\muvva\Desktop\testing\oauthlib-master\oauthlib\oauth1\rfc5849\parameters.py
    # character (ASCII code 38)
    merged.sort(key=lambda i: i[0].startswith('oauth_'))
    return merged
#########################################################################################
C:\Users\muvva\Desktop\testing\oauthlib-master\oauthlib\oauth1\rfc5849\__init__.py
        # Convert to unicode using encoding if given, else assume unicode
        encode = lambda x: to_unicode(x, encoding) if encoding else x

#########################################################################################
C:\Users\muvva\Desktop\testing\oauthlib-master\tests\unittest\__init__.py
# Form body comparison where order is insignificant
TestCase.assertFormBodyEqual = lambda self, a, b: self.assertItemsEqual(
        urlparse.parse_qsl(a), urlparse.parse_qsl(b))
#########################################################################################
C:\Users\muvva\Desktop\testing\offlineimap-master\offlineimap\repository\IMAP.py
            # default sorting by case insensitive transposed name
            retval.sort(key=lambda x: str.lower(x.getvisiblename()))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\offlineimap-master\tests\create_conf_file.py
Config.set(sect,'folderfilter', 'lambda f: f not in ["Inbox", "[Gmail]/All Mail"]') #Capitalization of Inbox INBOX was causing runtime failure.
#Config.set(sect,'folderfilter', 'lambda f: f not in ["[Gmail]/All Mail"]')

#########################################################################################
C:\Users\muvva\Desktop\testing\onionshare-master\onionshare\__init__.py
    # Parse arguments
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=28))
    parser.add_argument('--local-only', action='store_true', dest='local_only', help=strings._("help_local_only"))
#########################################################################################
C:\Users\muvva\Desktop\testing\onionshare-master\onionshare_gui\__init__.py
    # Parse arguments
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=48))
    parser.add_argument('--local-only', action='store_true', dest='local_only', help=strings._("help_local_only"))
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\canvas\utils\tests\test_propertybindings.py
#            color = property_expr(
#                lambda: 'red' if area > parent_area else 'blue',
#                type=QColor
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\classification\softmax_regression.py
    # gradient check
    m = SoftmaxRegressionLearner(lambda_=1.0)
    m.num_classes = 3
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\classification\softmax_regression.py
# for lambda_ in [0.1, 0.3, 1, 3, 10]:
# m = SoftmaxRegressionLearner(lambda_=lambda_)
# scores = []
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\classification\softmax_regression.py
#            scores.append(s)
#        print('{:4.1f} {}'.format(lambda_, np.mean(scores)))

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\data\io.py
        for encoding in (lambda: ('us-ascii', None),                 # fast
                         lambda: (detect_encoding(self.filename), None),  # precise
                         lambda: (locale.getpreferredencoding(False), None),
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\data\io.py
                         lambda: (detect_encoding(self.filename), None),  # precise
                         lambda: (locale.getpreferredencoding(False), None),
                         lambda: (sys.getdefaultencoding(), None),   # desperate
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\data\io.py
                         lambda: (sys.getdefaultencoding(), None),   # desperate
                         lambda: ('utf-8', None),                    # ...
                         lambda: ('utf-8', 'ignore')):               # fallback
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\data\io.py
                         lambda: ('utf-8', None),                    # ...
                         lambda: ('utf-8', 'ignore')):               # fallback
            encoding, errors = encoding()
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\regression\linear_bfgs.py
        data.X = np.hstack((data.X, np.ones((data.X.shape[0], 1)))) # append ones
        m = LinearRegressionLearner(lambda_=1.0)
        c = m(data) # fit
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\regression\linear_bfgs.py
#    # gradient check
#    m = LinearRegressionLearner(lambda_=1.0)
#    theta = np.random.randn(d.X.shape[1])
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\regression\linear_bfgs.py
#    ga = m.cost_grad(theta, d.X, d.Y.ravel())[1]
#    gm = numerical_grad(lambda t: m.cost_grad(t, d.X, d.Y.ravel())[0], theta)
#
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owcontinuize.py
    #     self.send("Preprocessor", PreprocessedLearner(
    #         lambda data, weightId=0, tc=(self.targetValue if self.classTreatment else -1):
    #             Table(continuizer(data, weightId, tc)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owfeatureconstructor.py
    # lambda *{args}* : EXPRESSION
    lambda_ = ast.Lambda(
        args=ast.arguments(
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owfeatureconstructor.py
    # pylint: disable=eval-used
    fouter = eval(compile(exp, "<lambda>", "eval"), GLOBALS)
    assert isinstance(fouter, types.FunctionType)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owfeaturestatistics.py
        # Filter out any matrices with size 0
        matrices = list(filter(lambda tup: tup[1].size, matrices))

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owpaintdata.py
#             command = Command(
#                 lambda: self.class_model.__setitem__(index, newvalue),
#                 lambda: self.class_model.__setitem__(index, oldvalue),
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\data\owpaintdata.py
#                 lambda: self.class_model.__setitem__(index, newvalue),
#                 lambda: self.class_model.__setitem__(index, oldvalue),
#             )
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\evaluate\owpredictions.py
            # use ItemDelegate to style prediction values
            style = lambda x: self.predictionsview.itemDelegate().displayText(x, QLocale())

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\evaluate\owpredictions.py
            # iterate only over visible columns of data's QTableView
            iter_data_cols = list(filter(lambda x: not self.dataview.isColumnHidden(x),
                                         range(data_model.columnCount())))
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\evaluate\owtestlearners.py
#         __bool__ = lambda self: True
        success = property(lambda self: True)
        value = property(lambda self: self.__value)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\evaluate\owtestlearners.py
#         __bool__ = lambda self: False
        success = property(lambda self: False)
        exception = property(lambda self: self.__exception)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\tests\test_settings_handler.py
            f.close()  # so it can be opened on windows
            handler._get_settings_filename = lambda x=f: x.name

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\unsupervised\owpca.py
            # prevent caching new features by defining compute_value
            dom = Domain([ContinuousVariable(a.name, compute_value=lambda _: None)
                          for a in self._pca.orig_domain.attributes],
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\utils\tests\test_concurrent.py
        # block the executor to test cancellation
        executor.submit(lambda: ev.wait())
        f = executor.submit(lambda: 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\utils\tests\test_concurrent.py
        # Block the single worker thread to ensure successful cancel for f2
        f1 = executor.submit(lambda: ev.wait())
        f2 = executor.submit(lambda: 42)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\utils\webview.py
                # in a event queue invoked callback
                QTimer.singleShot(0, lambda: resultCallback(result))

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\utils\webview.py
            # Wait till JS is connected to receive objects
            wait(until=lambda: self.receivers(self.objectChanged))
            self.objectChanged.emit(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owmosaic.py
        self.vizrank.toggle()  # start
        self.process_events(until=lambda: self.vizrank.saved_progress > 5)
        self.vizrank.toggle()  # stop
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owmosaic.py
        self.vizrank.toggle()  # stop
        self.process_events(until=lambda: not self.vizrank.keep_running)
        self.vizrank.toggle()  # continue
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owmosaic.py
        self.vizrank.toggle()  # continue
        self.process_events(until=lambda: self.vizrank.saved_progress > 20)

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owscatterplot.py
        # Continuous color - just a single line
        widget.is_continuous_color = lambda: True
        graph.update_regression_line()
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owscatterplot.py
        # No colors - just one line
        widget.get_color_data = lambda: None
        graph.update_regression_line()
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owscatterplot.py
        # No data
        widget.get_coordinates_data = lambda: (None, None)
        graph.update_regression_line()
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owscatterplot.py
        # One color group contains just one point - skip that line
        widget.get_color_data = lambda: np.array([0] + [1] * (len(x) - 1))

#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_owscatterplotbase.py
        shape_labels = color_labels = None  # Avoid pylint warning
        self.master.get_shape_labels = lambda: shape_labels
        self.master.get_color_labels = lambda: color_labels
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_vizrankdialog.py
        # interrupt calculation in third iteration
        task.is_interruption_requested.side_effect = lambda: \
            True if task.is_interruption_requested.call_count > 2 else False
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_vizrankdialog.py
        # continue calculation through all states
        task.is_interruption_requested.side_effect = lambda: False
        i = states.index(next_state)
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_vizrankdialog.py
        # interrupt calculation in third iteration
        task.is_interruption_requested.side_effect = lambda: \
            True if task.is_interruption_requested.call_count > 2 else False
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\Orange\widgets\visualize\tests\test_vizrankdialog.py
        # continue calculation through all states
        task.is_interruption_requested.side_effect = lambda: False
        invoke_on_partial_result()
#########################################################################################
C:\Users\muvva\Desktop\testing\orange3-master\setup.py
        # filter out meta files
        lambda path: not path.endswith((".hhc", ".hhk", ".hhp", ".stp")),
        findall(sourcedir)
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\plot.py
        # if there are parallel edges, select the shortest in length
        data = min(G.get_edge_data(u, v).values(), key=lambda x: x['length'])

#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\plot.py
            # if there are parallel edges, select the shortest in length
            data = min(G.get_edge_data(u, v).values(), key=lambda x: x['length'])

#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\save_load.py
    # create a geometry column then drop the x and y columns
    gdf_nodes['geometry'] = gdf_nodes.apply(lambda row: Point(row['x'], row['y']), axis=1)
    gdf_nodes = gdf_nodes.drop(['x', 'y'], axis=1)
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\stats.py
    # node with the highest page rank, and its value
    pagerank_max_node = max(pagerank, key=lambda x: pagerank[x])
    stats['pagerank_max_node'] = pagerank_max_node
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\stats.py
    # node with the lowest page rank, and its value
    pagerank_min_node = min(pagerank, key=lambda x: pagerank[x])
    stats['pagerank_min_node'] = pagerank_min_node
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # transform edges into evenly spaced points
        edges['points'] = edges.apply(lambda x: redistribute_vertices(x.geometry, dist), axis=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # Prepare btree arrays
        nbdata = np.array(list(zip(extended['Series'].apply(lambda x: x.x),
                                   extended['Series'].apply(lambda x: x.y))))
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # transform edges into evenly spaced points
        edges['points'] = edges.apply(lambda x: redistribute_vertices(x.geometry, dist), axis=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # haversine requires data in form of [lat, lng] and inputs/outputs in units of radians
        nodes = pd.DataFrame({'x': extended['Series'].apply(lambda x: x.x),
                              'y': extended['Series'].apply(lambda x: x.y)})
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # lowest value of minimize_key
        data = min(G.get_edge_data(u, v).values(), key=lambda x: x[minimize_key])
        if attribute is None:
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # Use Python 2/3 compatible BZ2File()
        opener = lambda fn: bz2.BZ2File(fn)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\osmnx-master\osmnx\utils.py
        # Assume an unrecognized file extension is just XML
        opener = lambda fn: open(fn, mode='rb')
    
#########################################################################################
C:\Users\muvva\Desktop\testing\pampy-master\tests\test_dict.py
        # I want the average age of a pet, but the data is inconsistent :/
        ages = [match(row, {_: {"age": int}}, lambda field, age: age) for row in data]
        average_age = sum(ages) / len(ages)
#########################################################################################
C:\Users\muvva\Desktop\testing\pampy-master\tests\test_dict.py
        # I want al the names, but data is inconsistent!
        names = [match(row, {"type": _, _: str}, lambda type, name_field, name: name) for row in data]
        self.assertEqual(names, ['fuffy', 'puffy', 'buffy'])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\asv_bench\benchmarks\strings.py
        # expected fraction of rows containing any NaN is:
        # reduce(lambda t, _: t + (1 - t) * na_frac, range(other_cols + 1), 0)
        # for other_cols=3 and na_frac=0.15, this works out to ~48%
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\algorithms.py
    # faster for larger cases to use np.in1d
    f = lambda x, y: htable.ismember_object(x, values)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\computation\expr.py
# partition all AST nodes
_all_nodes = frozenset(filter(lambda x: isinstance(x, type) and
                              issubclass(x, ast.AST),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\groupby\generic.py
        # build the multi-index w/ full levels
        codes = list(map(lambda lab: np.repeat(lab[diff], nbin), labels[:-1]))
        codes.append(left[-1])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\groupby\generic.py
        # check for rows with the same id but conflicting values
        >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())
             id  value1 value2
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\groupby\groupby.py
# Broadcastable
>>> grouped.transform(lambda x: x.max() - x.min())
   C    D
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\indexes\base.py
        # property, for now, slow to look up
        return self._engine_type(lambda: self._ndarray_values, len(self))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\indexes\category.py
        # we are going to look things up with the codes themselves
        return self._engine_type(lambda: self.codes, len(self))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\internals\managers.py
    # group by dtype
    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\internals\managers.py
    # sort by _can_consolidate, dtype
    gkey = lambda x: x._consolidate_key
    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\ops.py
# Reversed Operations not available in the stdlib operator module.
# Defining these instead of using lambdas allows us to reference them by name.

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\reshape\merge.py
    # how many levels can be done without overflow
    pred = lambda i: not is_int64_overflow_possible(shape[:i])
    nlev = next(filter(pred, range(len(shape), 0, -1)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\series.py
            # try a regular apply, this evaluates lambdas
            # row-by-row; however if the lambda is expected a Series
            # expression, e.g.: lambda x: x-x.quantile(0.25)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\series.py
            # row-by-row; however if the lambda is expected a Series
            # expression, e.g.: lambda x: x-x.quantile(0.25)
            # this will fail, so we can try a vectorized evaluation
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\strings.py
        # CPython optimized implementation
        f = lambda x: x.decode(encoding, errors)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\core\strings.py
        # CPython optimized implementation
        f = lambda x: x.encode(encoding, errors)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\io\parquet.py
            # And pass the opened s3file to the fastparquet internal impl.
            kwargs['open_with'] = lambda path, _: path
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\io\sql.py
        # (this is what sqlalchemy does)
        sqlite3.register_adapter(time, lambda _: _.strftime("%H:%M:%S.%f"))
        super(SQLiteTable, self).__init__(*args, **kwargs)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\io\stata.py
        # calculate size of a data record
        self.col_sizes = lmap(lambda x: self._calcsize(x), self.typlist)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\plotting\_tools.py
        # Python 2 compat
        ceil_ = lambda x: int(ceil(x))
        if nrows == -1 and ncols > 0:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\arithmetic\test_timedelta64.py
        # this is a union!
        # pytest.raises(TypeError, lambda : Int64Index([1,2,3]) + tdi)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\arithmetic\test_timedelta64.py
        # TODO: Add DataFrame in here?
    ], ids=lambda x: type(x).__name__)
    def test_td64arr_add_sub_numeric_arr_invalid(self, box, vec, dtype):
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\arrays\categorical\test_api.py
        # GH18862 (let rename_categories take callables)
        result = cat.rename_categories(lambda x: x.upper())
        expected = Categorical(["A", "B", "C", "A"])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\dtypes\test_inference.py
    # __iter__ attribute for our purposes.
    MockFile.__iter__ = lambda self: self

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\extension\test_integer.py
    # we are np.nan
    return lambda x, y: np.isnan(x) and np.isnan(y)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_alter_axes.py
    # MultiIndex constructor does not work directly on Series -> lambda
    # Add list-of-list constructor because list is ambiguous -> lambda
    # also test index name if append=True (name is duplicate here for B)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_alter_axes.py
    # MultiIndex constructor does not work directly on Series -> lambda
    # We also emulate a "constructor" for the label -> lambda
    # also test index name if append=True (name is duplicate here for A)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_alter_axes.py
        # when converted to numpy objects
        c = lambda x: Index(np.array(x))
        tm.assert_index_equal(c(df.B), c(df.B), check_names=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # set_index
        f = lambda x: x.set_index('a', inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # reset_index
        f = lambda x: x.reset_index(inplace=True)
        _check_f(data.set_index('a'), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # drop_duplicates
        f = lambda x: x.drop_duplicates(inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # sort
        f = lambda x: x.sort_values('b', inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # sort_index
        f = lambda x: x.sort_index(inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # fillna
        f = lambda x: x.fillna(0, inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # replace
        f = lambda x: x.replace(1, 0, inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # rename
        f = lambda x: x.rename({1: 'foo'}, inplace=True)
        _check_f(data.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # reset_index
        f = lambda x: x.reset_index(inplace=True, drop=True)
        _check_f(data.set_index('a')['c'], f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # fillna
        f = lambda x: x.fillna(0, inplace=True)
        _check_f(d.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # replace
        f = lambda x: x.replace(1, 0, inplace=True)
        _check_f(d.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_api.py
        # rename
        f = lambda x: x.rename({1: 'foo'}, inplace=True)
        _check_f(d.copy(), f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # no reduction
        result = float_frame.apply(lambda x: x * 2, raw=True)
        expected = float_frame * 2
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # non-reductions
        result = float_frame.apply(lambda x: np.repeat(x.name, len(x)))
        expected = DataFrame(np.tile(float_frame.columns,
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # GH 465: function returning tuples
        result = float_frame.applymap(lambda x: (x, x))
        assert isinstance(result['A'][0], tuple)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # compose a series
        result = (df['a'] + df['b']).apply(lambda x: {'s': x})
        expected = Series([{'s': 3}, {'s': 3}])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # broadcast result
        result = df.apply(lambda x: [1, 2, 3], axis=1, result_type='broadcast')
        expected = df.copy()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_apply.py
        # series result
        result = df.apply(lambda x: Series([1, 2, 3], index=x.index), axis=1)
        expected = df.copy()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_arithmetic.py
        # so we check dtype.kind instead of just dtype
        kinds = result.dtypes.apply(lambda x: x.kind)
        assert (kinds == 'i').all()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_dtypes.py
        # GH 11990
        df = mkdf(30, 3, data_gen_f=lambda x, y: np.random.random())
        expected = df
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_indexing.py
        # GH 12533
        result = self.frame[lambda x: 'A']
        tm.assert_series_equal(result, self.frame.loc[:, 'A'])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_indexing.py
        # return ndarray and scalar
        result = df.where(lambda x: (x % 2 == 0).values, lambda x: 99)
        exp = DataFrame([[99, 2, 99], [4, 99, 6], [99, 8, 99]])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_indexing.py
        # chain
        result = (df + 2).where(lambda x: x > 8, lambda x: x + 10)
        exp = DataFrame([[13, 14, 15], [16, 17, 18], [9, 10, 11]])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_indexing.py
        # return ndarray and scalar
        result = df.mask(lambda x: (x % 2 == 0).values, lambda x: 99)
        exp = DataFrame([[1, 99, 3], [99, 5, 99], [7, 99, 9]])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_indexing.py
        # chain
        result = (df + 2).mask(lambda x: x > 8, lambda x: x + 10)
        exp = DataFrame([[3, 4, 5], [6, 7, 8], [19, 20, 21]])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_mutate_columns.py
        # lambda syntax
        result = df.assign(C=lambda x: x.B / x.A)
        assert_frame_equal(result, expected)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_mutate_columns.py
        # lambda
        result = df.assign(A=lambda x: x.A + x.B)
        assert_frame_equal(result, expected)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\frame\test_reshape.py
    def test_unstack_nan_index(self):  # GH7466
        cast = lambda val: '{0:1}'.format('' if val != val else val)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_apply.py
    # don't die
    df_grouped.apply(lambda x: noddy(x.value, x.weight))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_categorical.py
    # function grouper
    f = lambda r: df.loc[r, 'A']
    result = df.groupby(['cat', f], as_index=False, observed=True).sum()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Group by floats (rounded); filter on strings.
    grouper = df.floats.apply(lambda x: np.round(x, -1))
    grouped = df.groupby(grouper)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter DataFrame
    actual = grouped_df.filter(lambda x: len(x) > 1)
    expected = df.iloc[expected_indexes]
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter Series
    actual = grouped_ser.filter(lambda x: len(x) > 1)
    expected = ser.take(expected_indexes)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter DataFrame
    actual = grouped_df.filter(lambda x: len(x) > 1)
    expected = df.iloc[expected_indexes]
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter Series
    actual = grouped_ser.filter(lambda x: len(x) > 1)
    expected = ser.take(expected_indexes)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter DataFrame
    actual = grouped_df.filter(lambda x: len(x) > 1)
    expected = df.iloc[expected_indexes]
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter Series
    actual = grouped_ser.filter(lambda x: len(x) > 1)
    expected = ser.take(expected_indexes)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter DataFrame
    actual = grouped_df.filter(lambda x: len(x) > 1)
    expected = df.iloc[expected_indexes]
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter Series
    actual = grouped_ser.filter(lambda x: len(x) > 1)
    expected = ser.take(expected_indexes)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter DataFrame
    actual = grouped_df.filter(lambda x: len(x) > 1)
    expected = df.iloc[expected_indexes]
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_filters.py
    # Filter Series
    actual = grouped_ser.filter(lambda x: len(x) > 1)
    expected = ser.take(expected_indexes)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # Series
    ts_grouped = ts.groupby(lambda x: x.month)
    agg_result = ts_grouped.agg(np.percentile, 80, axis=0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # DataFrame
    df_grouped = tsframe.groupby(lambda x: x.month)
    agg_result = df_grouped.agg(np.percentile, 80, axis=0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # transform
    grouped = tsframe.head(30).groupby(lambda x: x.weekday())
    transformed = grouped.transform(lambda x: x - x.mean())
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # transform propagate
    transformed = grouped.transform(lambda x: x.mean())
    for name, group in grouped:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # transform
    tf = lambda x: x - x.mean()
    groupedT = tsframe.T.groupby(mapping, axis=0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_groupby.py
    # accessing the index elements causes segfault
    f = lambda x: len(set(map(id, x.index)))
    grouped.agg(f)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_grouping.py
        # not sure it's useful
        grouped = tsframe.groupby([lambda x: x.weekday(), lambda x: x.year])

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_transform.py
    # this does date math and causes the transform to return timedelta
    result = df.groupby('A')['A'].transform(lambda x: x.max() - x.min())
    assert_series_equal(result, expected)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\groupby\test_transform.py
    # int downcasting
    result = df.groupby('A').transform(lambda x: x * 2 / 2)
    expected = DataFrame(dict(B=1, C=[2, 3, 4, 10, 5, -1]))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexes\datetimelike.py
        # map to NaT
        result = self.index.map(lambda x: pd.NaT if x == self.index[0] else x)
        expected = pd.Index([pd.NaT] + self.index[1:].tolist())
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # return bool indexer
        res = df.loc[lambda x: x.A > 2]
        tm.assert_frame_equal(res, df.loc[df.A > 2])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # scalar
        res = df.loc[lambda x: 1, lambda x: 'A']
        assert res == df.loc[1, 'A']
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # return label
        res = df.loc[lambda x: ['A', 'C']]
        tm.assert_frame_equal(res, df.loc[['A', 'C']])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # mixture
        res = df.loc[['A', 'C'], lambda x: 'X']
        tm.assert_series_equal(res, df.loc[['A', 'C'], 'X'])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # return location
        res = df.iloc[lambda x: [1, 3]]
        tm.assert_frame_equal(res, df.iloc[[1, 3]])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_callable.py
        # mixture
        res = df.iloc[[1, 3], lambda x: 0]
        tm.assert_series_equal(res, df.iloc[[1, 3], 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_chaining_and_caching.py
        # Explicitly copy
        indexer = df.letters.apply(lambda x: len(x) > 10)
        df = df.loc[indexer].copy()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
                # getting
                for idxr, getitem in [(lambda x: x.ix, False),
                                      (lambda x: x.iloc, False),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
                    # and are inconsisten between series/dataframe ATM
                    # for idxr in [lambda x: x.ix,
                    #             lambda x: x]:
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
                    # for idxr in [lambda x: x.ix,
                    #             lambda x: x]:
                    #    s2 = s.copy()
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
        # with an invalid indexer
        for idxr in [lambda x: x.ix,
                     lambda x: x,
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
        # indexing
        for idxr in [lambda x: x]:

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
        # indexing
        for idxr in [lambda x: x.ix]:
            with catch_warnings(record=True):
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
                # coerce to equal int
                for idxr, getitem in [(lambda x: x.ix, False),
                                      (lambda x: x.loc, False),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_floats.py
                # coerce to equal int
                for idxr, getitem in [(lambda x: x.ix, False),
                                      (lambda x: x.loc, False),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_indexing.py
        # this works, new column is created correctly
        df['test'] = df['a'].apply(lambda x: '_' if x == 'aaa' else x)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_indexing_engines.py
        # monotonic increasing
        engine = engine_type(lambda: arr, len(arr))
        assert engine.is_monotonic_increasing is True
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_indexing_engines.py
        # monotonic decreasing
        engine = engine_type(lambda: arr[::-1], len(arr))
        assert engine.is_monotonic_increasing is False
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_indexing_engines.py
        # monotonic increasing
        engine = self.engine_type(lambda: arr, len(arr))
        assert engine.is_monotonic_increasing is True
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\indexing\test_indexing_engines.py
        # monotonic decreasing
        engine = self.engine_type(lambda: arr[::-1], len(arr))
        assert engine.is_monotonic_increasing is False
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\io\test_sql.py
            # comes back as strings
            expected = df.applymap(lambda _: _.strftime("%H:%M:%S.%f"))
            tm.assert_frame_equal(res, expected)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\resample\test_datetime_index.py
    # doesn't make sense
    result = ts.resample('M').aggregate({'foo': lambda x: x.mean(),
                                         'bar': lambda x: x.std(ddof=1)})
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\reshape\merge\test_join.py
    # get rid of suffixes, if any
    group = group.rename(columns=lambda x: x.replace(suffix, ''))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\reshape\merge\test_merge.py
        # change them all to categorical variables
        df = df.apply(lambda x: x.astype('category'))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\reshape\test_pivot.py
        # margins not supported??
        f = lambda func: pivot_table(self.data, values=['D', 'E'],
                                     index=['A', 'B'], columns='C',
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\indexing\test_callable.py
    # GH 13299
    inc = lambda x: x + 1

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_analytics.py
        # returns 1 if exact equality, 0 otherwise
        my_corr = lambda a, b: 1. if (a == b).all() else 0.

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_api.py
        # and bool (is_month_start)
        get_ops = lambda x: x._datetimelike_ops

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # boxed value must be Timestamp instance
        res = s.apply(lambda x: '{0}_{1}_{2}'.format(x.__class__.__name__,
                                                     x.day, x.tz))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # GH 14506 : Returned dtype changed from int32 to int64
        result = s.apply(lambda x: x.hour)
        exp = pd.Series(list(range(24)) + [0], name='XX', dtype=np.int64)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # before vectorized evaluation
        result = string_series.apply(lambda x: str(x))
        expected = string_series.agg(lambda x: str(x))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # .agg with a reducer and a transform, what to do
        result = datetime_series.apply(lambda x: Series(
            [x, x ** 2], index=['x', 'x^2']))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # function
        result = datetime_series.map(lambda x: x * 2)
        tm.assert_series_equal(result, datetime_series * 2)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # boxed value must be Timestamp instance
        res = s.map(lambda x: '{0}_{1}_{2}'.format(x.__class__.__name__,
                                                   x.day, x.tz))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # keep tz
        result = s.map(lambda x: x + pd.offsets.Day())
        exp_values = pd.date_range('2011-01-02', '2011-01-03',
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_apply.py
        # GH 14506 : Returned dtype changed from int32 to int64
        result = s.map(lambda x: x.hour)
        exp = pd.Series(list(range(24)) + [0], name='XX', dtype=np.int64)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\series\test_operators.py
        # bind op at definition time...
        requiv = lambda x, y, op=op: getattr(operator, op)(y, x)
        pairings.append((lop, lequiv, fv))
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\sparse\frame\test_apply.py
    res = sparse.apply(lambda s: s[0], axis=0)  # noqa
    exp = orig.T.apply(lambda s: s[0], axis=0)

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\sparse\frame\test_apply.py
    # just test that it works
    result = frame.applymap(lambda x: x * 2)
    assert isinstance(result, SparseDataFrame)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\sparse\series\test_series.py
            # _check_op(a, b, operator.pow)
            # _check_op(a, b, lambda x, y: operator.pow(y, x))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_multilevel.py
        # skipna=True
        leftside = grouped.agg(lambda x: getattr(x, op)(skipna=skipna))
        rightside = getattr(self.series, op)(level=level, skipna=skipna)
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_nanops.py
        # TODO: unused?
        # func2 = lambda x: np.any(nanops._isfinite(x).values.ravel())

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # restore once GH 8086 is fixed
        # lambda v: Series(v).skew(), 3, 'skew'),
        # (lambda v: Series(v).kurt(), 4, 'kurt'),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # lambda v: Series(v).skew(), 3, 'skew'),
        # (lambda v: Series(v).kurt(), 4, 'kurt'),

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # restore once GH 8084 is fixed
        # lambda v: Series(v).quantile(0.3), None, 'quantile'),

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # Use floats instead of ints as values
        series = series.map(lambda x: float(x))
        # Sort chronologically
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # Use floats instead of ints as values
        series = series.map(lambda x: float(x))
        # Sort chronologically
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # Use floats instead of ints as values
        series = series.map(lambda x: float(x))
        # Sort chronologically
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # Use floats instead of ints as values
        series = series.map(lambda x: float(x))
        # Sort chronologically
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # reduction
        result = r.apply(lambda x: x.sum(), raw=raw)
        expected = g.apply(
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\tests\test_window.py
        # reduction
        result = r.apply(lambda x: x.sum(), raw=raw)
        expected = g.apply(
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\util\testing.py
    # make the data a random int between 1 and 100
    >> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))

#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\pandas\util\_print_versions.py
        # (MODULE_NAME, f(mod) -> mod version)
        ("pandas", lambda mod: mod.__version__),
        ("pytest", lambda mod: mod.__version__),
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\scripts\find_commits_touching_func.py
        lines = [x for x in lines if not re.search(r"^\w+\s*\(.+\)\s*#", x)]
        hits = set(map(lambda x: x.split(" ")[0], lines))
        cs.update({Hit(commit=c, path=f) for c in hits})
#########################################################################################
C:\Users\muvva\Desktop\testing\pandas-master\scripts\validate_docstrings.py
        # the standard output
        application.formatter.write = lambda line, source: None
        application.report()
#########################################################################################
C:\Users\muvva\Desktop\testing\paperwork-master\paperwork-gtk\src\paperwork\frontend\mainwindow\scan.py
        # We want the higher score first
        scores.sort(key=lambda x: x[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\paperwork-master\paperwork-gtk\src\paperwork\frontend\mainwindow\__init__.py
        pil_img = pil_img.convert("L")  # to grayscale
        pil_img = pil_img.point(lambda x: 0 if x < 128 else 255, '1')
        return pil_img
#########################################################################################
C:\Users\muvva\Desktop\testing\paperwork-master\paperwork-gtk\src\paperwork\frontend\mainwindow\__init__.py
            # do not sort on the box ref
            key=lambda b: (b[0], b[1][1], b[1][0])
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\paperwork-master\paperwork-gtk\src\paperwork\frontend\util\config.py
        # update detection
        'check_for_update': PaperworkSetting("Update", "check", lambda: False,
                                             paperwork_cfg_boolean),
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\examples\06-graph\01-graph.py
# Which nodes get the most traffic?
for n in sorted(g.nodes, key=lambda n: n.centrality, reverse=True):
    print('%.2f' % n.centrality, n)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\db\__init__.py
        # - set a DATE field type for the column,
        # - or do Table.columns[x].map(lambda s: date(s))
        data = open(path, "rU", encoding="utf-8")
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\db\__init__.py
    # Python 2 (backward compatibility)
    __getslice__ = lambda self, i, j: self.__getitem__(slice(i, j))

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\graph\commonsense.py
    # Similarity heuristic that only traverses relations between properties.
    lambda concept: concept.properties,
    lambda edge: 1 - int(edge.context == "properties" and \
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\graph\commonsense.py
    # 2) Authors with 50- contributions (or robots) can only reinforce existing relations.
    a = sorted(a.items(), key=cmp_to_key(lambda v1, v2: len(v2[1]) - len(v1[1])))
    r = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\graph\commonsense.py
        # Sort latest-first (we prefer more recent relation types).
        relations = sorted(relations, key=cmp_to_key(lambda r1, r2: r1[-1] > r2[-1]))
        # 1) Define new relations.
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\metrics.py
#print(cooccurrence(s, window=(-1,1),
#       search = lambda w: w in ("cat",),
#    normalize = lambda w: w.lower().strip(".:;,!?()[]'\"")))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\metrics.py
#       search = lambda w: w in ("cat",),
#    normalize = lambda w: w.lower().strip(".:;,!?()[]'\"")))

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\metrics.py
#print(cooccurrence(s, window=(-2,-1),
#       search = lambda token: token[1].startswith("NN"),
#       filter = lambda token: token[1].startswith("JJ")))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\metrics.py
#       search = lambda token: token[1].startswith("NN"),
#       filter = lambda token: token[1].startswith("JJ")))

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\en\modality.py
            # This is actually an informal error: it states a fact, not a wish.
            v = find(lambda w: w.type.startswith("VB"), S[i + 1:])
            if v and classical is True and v and v.type == "VB":
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\es\inflect.py
        # Probably ends in -ir if preceding vowel in stem is -i.
        er_ir = lambda b: (len(b) > 2 and b[-2] == "i") and b + "ir" or b + "er"
        # Probably infinitive if ends in -ar, -er or -ir.
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\it\inflect.py
# Word starts with z or s + consonant?
zs = lambda w: w and (w[:1] == "z" or (w[:1] == "s" and not is_vowel(w[1:2])))

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\search.py
    # Longest-first.
    f = lambda x, y: len(y) - len(x)
    return sorted(a, key=cmp_to_key(f))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\search.py
# Classifier(parents=lambda word: word.endswith("ness") and ["quality"] or [])
# Classifier(parents=lambda word, chunk=None: chunk=="VP" and [ACTION] or [])

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
        elif self.type == "NP":  # "the cat" => "cat"
            w = find(lambda w: w.type.startswith("NN"), reversed(self))
        elif self.type == "VP":  # "is watching" => "watching"
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
        elif self.type == "VP":  # "is watching" => "watching"
            w = find(lambda w: w.type.startswith("VB"), reversed(self))
        elif self.type == "PP":  # "from up on" => "from"
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
        elif self.type == "PP":  # "from up on" => "from"
            w = find(lambda w: w.type.startswith(("IN", "PP")), self)
        elif self.type == "PNP": # "from up on the roof" => "roof"
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
        elif self.type == "PNP": # "from up on the roof" => "roof"
            w = find(lambda w: w.type.startswith("NN"), reversed(self))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
            # Iterate over all the chunks and attach modifiers to their VP-anchor.
            is_modifier = lambda ch: ch.type in ("ADJP", "ADVP") and ch.relation is None
            for chunk in self.sentence.chunks:
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
    push = lambda indent: indent + tab         # push() increases the indentation.
    pop = lambda indent: indent[:-len(tab)] # pop() decreases the indentation.
    indent = tab
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\text\tree.py
    # <word type="NN" lemma="pizza">pizza</word> => [pizza, NN, I-NP, O, NP-OBJ-1, O, pizza]
    for word in filter(lambda n: n.tag == XML_WORD, chunk):
        tokens.append(_parse_token(word, chunk=type, relation=relation, format=format))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\vector\__init__.py
    # Document(string = "",
    #          filter = lambda w: w.lstrip("'").isalnum(),
    #     punctuation = PUNCTUATION,
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\vector\__init__.py
        H3 = dict((i + 1, w) for i, w in enumerate(self.classes))      # Class reversed hash.
        x  = list(map(lambda v: dict(map(lambda k: (H1[k], v[k]), v)), M)) # Hashed vectors.
        y  = list(map(lambda v: H2[v[0]], self._vectors))                  # Hashed classes.
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\vector\__init__.py
        x  = list(map(lambda v: dict(map(lambda k: (H1[k], v[k]), v)), M)) # Hashed vectors.
        y  = list(map(lambda v: H2[v[0]], self._vectors))                  # Hashed classes.
        # For linear SVC, use LIBLINEAR which is faster.
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\vector\__init__.py
#data = CSV.load(os.path.join("..", "..", "test", "corpora", "polarity-nl-bol.com.csv"))
#data = map(lambda p, review: (v(review), int(p) > 0), data)
#
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\vector\__init__.py
#data = CSV.load(os.path.join("..", "..", "test", "corpora", "polarity-nl-bol.com.csv"))
#data = map(lambda p, review: Document(v(review), type=int(p) > 0), data)
#data = Model(data, weight="tf-idf")
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\locale\__init__.py
        return [language.lower() + "-" + region.upper()]  # nl-nl => nl-NL
    main = lambda tag: tag in ("ar-AE", "en-US", "zh-CN") or tag[:2] == tag[3:].lower() # nl-NL
    a = [language + "-" + r for r in regions(language.lower())]
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\__init__.py
        self.language = language    # Result.language restriction (e.g., "en").
        self.format = lambda x: x   # Formatter applied to each attribute of each Result.

#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\__init__.py
        # Highest score first.
        results.sort(key=lambda r: r.score, reverse=True)
        return results
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\__init__.py
        # Map id into a case-insensitive **kwargs dict.
        i = lambda s: re.compile(r"\b%s(?=$|\s)" % s, re.I)
        a = {"id": i(self.id)} if self.id else {}
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\__init__.py
                    # X > Y => X is parent of Y
                    e = list(map(lambda e: list(filter(s.match, e.children)), e))
                    e = list(itertools.chain(*e))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\pattern\web\__init__.py
                    # X < Y => X is child of Y
                    e = list(map(lambda e: e.parent, e))
                    e = list(filter(s.match, e))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_en.py
        # Assert first item for which given function is True.
        v = text.tree.find(lambda x: x > 10, [1, 2, 3, 11, 12])
        self.assertEqual(v, 11)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_en.py
        # Assert dynamic Map().
        v = text.tree.Map(lambda x: x + 1, [1, 2, 3])
        self.assertEqual(list(v), [2, 3, 4])
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 2 true positives (TP) and 1 false positive (FP).
        v = metrics.confusion_matrix(lambda document: True, self.documents)
        self.assertEqual(v, (2, 0, 1, 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 1 true negative (TN) and 2 false negatives (FN).
        v = metrics.confusion_matrix(lambda document: False, self.documents)
        self.assertEqual(v, (0, 1, 0, 2))
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 2.0/3.0 (two out of three correct predictions).
        v = metrics.accuracy(lambda document: True, self.documents)
        self.assertEqual(v, 2.0 / 3.0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 2.0/3.0 (2 TP, 1 FP).
        v = metrics.precision(lambda document: True, self.documents)
        self.assertEqual(v, 2.0 / 3.0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 0.0 (no TP).
        v = metrics.precision(lambda document: False, self.documents)
        self.assertEqual(v, 0.0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 1.0 (no FN).
        v = metrics.recall(lambda document: True, self.documents)
        self.assertEqual(v, 1.0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 0.0 (no TP).
        v = metrics.recall(lambda document: False, self.documents)
        self.assertEqual(v, 0.0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_metrics.py
        # Assert 0.8 (F1 for precision=2/3 and recall=1).
        v = metrics.F1(lambda document: True, self.documents)
        self.assertEqual(v, 0.8)
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_search.py
        # Assert variations = (1,) and ().
        v = search.variations([1], optional=lambda item: item == 1)
        self.assertEqual(v, [(1,), ()])
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_search.py
        # Assert variations = the original input, (2,), (1,) and ().
        v = search.variations([1, 2], optional=lambda item: item in (1, 2))
        self.assertEqual(v, [(1, 2), (2,), (1,), ()])
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_search.py
        # Assert variations are sorted longest-first.
        v = search.variations([1, 2, 3, 4], optional=lambda item: item in (1, 2))
        self.assertEqual(v, [(1, 2, 3, 4), (2, 3, 4), (1, 3, 4), (3, 4)])
#########################################################################################
C:\Users\muvva\Desktop\testing\pattern-master\test\test_search.py
        # Assert taxonomy classifier + keyword arguments.
        c1 = search.Classifier(parents=lambda word, chunk=None: word.endswith("ness") and ["quality"] or [])
        c2 = search.Classifier(parents=lambda word, chunk=None: chunk == "VP" and ["action"] or [])
#########################################################################################
C:\Users\muvva\Desktop\testing\pdfminer-master\pdfminer\layout.py
        # reorder the objects from top-left to bottom-right.
        self._objs = csort(self._objs, key=lambda obj:
                           (1-laparams.boxes_flow)*(obj.x0) -
#########################################################################################
C:\Users\muvva\Desktop\testing\pdfminer-master\pdfminer\layout.py
        # reorder the objects from top-right to bottom-left.
        self._objs = csort(self._objs, key=lambda obj:
                           -(1+laparams.boxes_flow)*(obj.x0+obj.x1)
#########################################################################################
C:\Users\muvva\Desktop\testing\pdfminer-master\pdfminer\layout.py
        # it has all the individual characters in the page.
        (textobjs, otherobjs) = fsplit(lambda obj: isinstance(obj, LTChar), self)
        for obj in otherobjs:
#########################################################################################
C:\Users\muvva\Desktop\testing\pdftabextract-master\examples\schoollist_2\schoollist_2.py
    # sort clusters by size
    col_cluster_sizes = map(lambda x: len(x[0]), col_clusters)
    col_clusters_by_size = sorted(zip(col_clusters, col_cluster_sizes), key=lambda x: x[1], reverse=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\pdftabextract-master\pdftabextract\extract.py
    # iterate through the textblocks of this page
    texts_in_cells = defaultdict(lambda: defaultdict(list))
    unmatched_texts = []
#########################################################################################
C:\Users\muvva\Desktop\testing\pdftabextract-master\pdftabextract\extract.py
            # could be several "best overlap" cells -> choose the closest
            best_isect = sorted([x for x in cell_isects if x[1] == max_isect_val], key=lambda x: x[2])[0]
            best_i, best_j = best_isect[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\pdftabextract-master\pdftabextract\textboxes.py
            # add all texts to this line sorted by x-position
            lines.append(list(sorted(cur_line, key=lambda x: x['left'])))
            
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
            # Record lambda functions that encode the instruction subform
            encoding_lambdas = map(lambda e: generate_encoding_lambda(e, instruction_subform.operands),
                                   instruction_subform.encodings)
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
    # Record lambda functions that encode the most generic instruction form
    encodings = map(lambda e: generate_encoding_lambda(e, instruction_form.operands), instruction_form.encodings)
    for (flags, encoding_lambda) in encodings:
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
                    # Instructions with `name` name
                    name_instructions = list(filter(lambda i: i.name == name, instruction_set))
                    if not name_instructions:
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
                                    # Consider only instruction forms that have exactly `count` operands
                                    count_operand_form_trees = list(filter(lambda form_subforms:
                                                                           len(form_subforms[0].operands) == count,
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
                                    # Check how many gas names exist
                                    gas_names = set(map(lambda form: form.gas_name, count_operand_forms))
                                    common_gas_name = combine_attrs and len(gas_names) == 1
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64.py
                                    # Check how many go names exist
                                    go_names = set(map(lambda form: str(form.go_name), count_operand_forms))
                                    common_go_name = combine_attrs and len(go_names) == 1
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64_nacl_test.py
                # Instructions with `name` name
                name_instructions = filter(lambda i: i.name == name, instruction_set)
                if not name_instructions:
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\codegen\x86_64_test_encoding.py
                            # Instructions with `name` name
                            name_instructions = list(filter(lambda i: i.name == name, instruction_set))
                            if not name_instructions:
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\peachpy\common\regalloc.py
            # Choose the virtual register for which there are the least allocation options
            virtual_id = min(unallocated_registers, key=lambda reg: len(self.allocation_options[reg]))
            if not self.allocation_options[virtual_id]:
#########################################################################################
C:\Users\muvva\Desktop\testing\PeachPy-master\peachpy\x86_64\function.py
            # Other register types are volatile registers for all x86-64 ABIs
        return list(sorted(filter(lambda reg: reg in self.abi.callee_save_registers, output_registers)))

#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\peewee.py
#: Represent a row tuple.
Tuple = lambda *a: EnclosedNodeList(a)

#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\playhouse\migrate.py
            # Remove any foreign keys associated with this column.
            fk_filter_fn = lambda column_def: None
        elif new_column != column_to_update:
#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\playhouse\migrate.py
            # Update any foreign keys for this column.
            fk_filter_fn = lambda column_def: self.fk_re.sub(
                'FOREIGN KEY ("%s") ' % new_column,
#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\playhouse\migrate.py
        # non-empty SQL attribute.
        for index in filter(lambda idx: idx.sql, indexes):
            if column_to_update not in index.columns:
#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\tests\fields.py
        # No attribute/accessor is added to the related model.
        self.assertRaises(AttributeError, lambda: Person.pet_set)

#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\tests\libs\mock.py
    # unfortunately even not in the first place
    src = "lambda _mock_self, %s: None" % signature
    checksig = eval(src, {})
#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\tests\libs\mock.py
    # creates a function with signature (*args, **kwargs) that delegates to a
    # mock. It still does signature checking by calling a lambda with the same
    # signature as the original.
#########################################################################################
C:\Users\muvva\Desktop\testing\peewee-master\tests\libs\mock.py
                               # attributes
                               key=lambda entry: entry[0].count('.')):
            args = arg.split('.')
#########################################################################################
C:\Users\muvva\Desktop\testing\pelican-master\pelican\tools\pelican_import.py
        #    content = re.sub(r'/\n\n+/', '\n\n', content)
    pgraphs = filter(lambda s: s != "", re.split(r'\n\s*\n', content))
    content = ""
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Year
        "YYYY": lambda dt: "{:d}".format(dt.year),
        "YY": lambda dt: "{:d}".format(dt.year)[2:],
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Quarter
        "Q": lambda dt: "{:d}".format(dt.quarter),
        # Month
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Month
        "MM": lambda dt: "{:02d}".format(dt.month),
        "M": lambda dt: "{:d}".format(dt.month),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Day
        "DD": lambda dt: "{:02d}".format(dt.day),
        "D": lambda dt: "{:d}".format(dt.day),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Day of Year
        "DDDD": lambda dt: "{:03d}".format(dt.day_of_year),
        "DDD": lambda dt: "{:d}".format(dt.day_of_year),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Day of Week
        "d": lambda dt: "{:d}".format(dt.day_of_week),
        # Day of ISO Week
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Day of ISO Week
        "E": lambda dt: "{:d}".format(dt.isoweekday()),
        # Hour
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Hour
        "HH": lambda dt: "{:02d}".format(dt.hour),
        "H": lambda dt: "{:d}".format(dt.hour),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Minute
        "mm": lambda dt: "{:02d}".format(dt.minute),
        "m": lambda dt: "{:d}".format(dt.minute),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Second
        "ss": lambda dt: "{:02d}".format(dt.second),
        "s": lambda dt: "{:d}".format(dt.second),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Fractional second
        "S": lambda dt: "{:01d}".format(dt.microsecond // 100000),
        "SS": lambda dt: "{:02d}".format(dt.microsecond // 10000),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Timestamp
        "X": lambda dt: "{:d}".format(dt.int_timestamp),
        "x": lambda dt: "{:d}".format(dt.int_timestamp * 1000 + dt.microsecond // 1000),
#########################################################################################
C:\Users\muvva\Desktop\testing\pendulum-master\pendulum\formatting\formatter.py
        # Timezone
        "zz": lambda dt: "{}".format(dt.tzname() if dt.tzinfo is not None else ""),
        "z": lambda dt: "{}".format(dt.timezone_name or ""),
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\pkg_resources\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\pkg_resources\_vendor\pyparsing.py
            xmlcharref = Regex(r'&#\d+;')
            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
            return xmlcharref.transformString(ret)
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\pkg_resources\_vendor\pyparsing.py
    #~ if func in singleArgBuiltins:
        #~ return lambda s,l,t: func(t)
    #~ limit = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\pkg_resources\_vendor\pyparsing.py
            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\pkg_resources\_vendor\pyparsing.py
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\archive_util.py
        # don't do any chowning!
        tarobj.chown = lambda *args: None
        for member in tarobj:
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\_vendor\pyparsing.py
            xmlcharref = Regex(r'&#\d+;')
            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
            return xmlcharref.transformString(ret)
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\_vendor\pyparsing.py
    #~ if func in singleArgBuiltins:
        #~ return lambda s,l,t: func(t)
    #~ limit = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\_vendor\pyparsing.py
            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer
#########################################################################################
C:\Users\muvva\Desktop\testing\pex-master\pex\vendor\_vendored\setuptools\setuptools\_vendor\pyparsing.py
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
#########################################################################################
C:\Users\muvva\Desktop\testing\pgcli-master\pgcli\main.py
            # Now removing quotes.
            list(map(lambda s: s.strip('"'), infos))

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\cluster.py
        # word -> id index
        self.words = defaultdict(lambda: (-1, 0))
        # id -> word, token index
#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\cluster.py
        # id -> word, token index
        self.ids = defaultdict(lambda: (None, None))
        # counter for new id generation
#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\coverart\providers\__init__.py
    # build a defaultdict with provider name as key, and PInfoTuple as value
    order = defaultdict(lambda: PInfoTuple(position=666, enabled=False))
    for o in from_ca_providers_option():
#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\coverart\providers\__init__.py
    # (yet) unknown providers are placed at the end, disabled
    ordered_providers = sorted(_cover_art_providers, key=lambda p: order[p.name].position)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\formats\id3.py
        # any description.
        counters = defaultdict(lambda: 0)
        for image in images_to_save:
#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# set_minimum_delay()
REQUEST_DELAY_MINIMUM = defaultdict(lambda: 1000)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# Current delay (adaptive) between requests to a given hostkey.
REQUEST_DELAY = defaultdict(lambda: 1000)  # Conservative initial value.

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# Determines delay during exponential backoff phase.
REQUEST_DELAY_EXPONENT = defaultdict(lambda: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# a response.
CONGESTION_UNACK = defaultdict(lambda: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# We're allowed to send up to `int(this)` many requests at a time.
CONGESTION_WINDOW_SIZE = defaultdict(lambda: 1.0)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# upon encountering a temporary error.
CONGESTION_SSTHRESH = defaultdict(lambda: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\picard-master\picard\webservice\ratecontrol.py
# Storage of last request times per host key
LAST_REQUEST_TIMES = defaultdict(lambda: 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\pika\adapters\blocking_connection.py
        #   empty outbound buffer and any waiter is ready
        is_done = (lambda:
                   self._closed_result.ready or
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\pika\adapters\blocking_connection.py
            # Check if we can actually process pending events
            common_terminator = lambda: bool(dispatch_acquired and
                                             (self._channels_pending_dispatch or
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\pika\adapters\select_connection.py
# Reason for this unconventional dict initialization is the fact that on some
# platforms select.error is an aliases for OSError. We don't want the lambda
# for select.error to win over one for OSError.
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\pika\adapters\select_connection.py
    # pylint: disable=E0602
    _SELECT_ERROR_CHECKERS[InterruptedError] = lambda e: True

#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\pika\adapters\select_connection.py
# Following is better but still incomplete.
# _SELECT_ERRORS = tuple(filter(lambda e: not isinstance(e, OSError),
#                              _SELECT_ERROR_CHECKERS.keys())
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Create a consumer that uses automatic ack mode
        ch.basic_consume(q_name, lambda *x: None, auto_ack=True,
                         exclusive=False, arguments=None)
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Make sure _TimerEvt repr doesn't crash
        evt = blocking_connection._TimerEvt(lambda: None)
        repr(evt)
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Test timer completion
        timer_id1 = connection.call_later(5, lambda: 0/0)

#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Create a consumer that uses automatic ack mode
        consumer_tag = ch.basic_consume(q_name, lambda *x: None, auto_ack=True,
                                        exclusive=False, arguments=None)
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Create an ackable consumer
        consumer_tag = ch.basic_consume(q_name, lambda *x: None, auto_ack=False,
                                        exclusive=False, arguments=None)
#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\acceptance\blocking_adapter_test.py
        # Create consumer
        ch.basic_consume(q_name, lambda *args: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\unit\select_connection_ioloop_tests.py
        # Expect: add_callback_threadsafe() won't raise after ioloop.close()
        self.ioloop.add_callback_threadsafe(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pika-master\tests\unit\select_connection_timer_tests.py
            timer.call_later(10, lambda: bucket.append(3)) # t3
            t2 = timer.call_later(6, lambda: bucket.append(2))
            t1 = timer.call_later(5, lambda: bucket.append(1))
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\BmpImagePlugin.py
    # 1 meter == 39.3701 inches
    ppm = tuple(map(lambda x: int(x * 39.3701), dpi))

#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\IcoImagePlugin.py
        # ICO images are usually squares
        # self.entry = sorted(self.entry, key=lambda x: x['width'])
        self.entry = sorted(self.entry, key=lambda x: x['square'])
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\IcoImagePlugin.py
        # self.entry = sorted(self.entry, key=lambda x: x['width'])
        self.entry = sorted(self.entry, key=lambda x: x['square'])
        self.entry.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\ImageCms.py
    "NODEFAULTRESOURCEDEF": 16777216,  # CRD special
    "GRIDPOINTS": lambda n: ((n) & 0xFF) << 16  # Gridpoints
}
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\ImageFilter.py
            # default scale is sum of kernel
            scale = functools.reduce(lambda a, b: a+b, kernel)
        if size[0] * size[1] != len(kernel):
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\src\PIL\ImageQt.py
# If a version has already been imported, attempt it first
qt_versions.sort(key=lambda qt_version: qt_version[1] in sys.modules,
                 reverse=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\Tests\check_imaging_leaks.py
                        # Pass a new list at each iteration.
                        lambda: im.point(range(256)))

#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\Tests\test_file_png.py
        # The file is truncated
        self.assertRaises(IOError, lambda: im.text)
        ImageFile.LOAD_TRUNCATED_IMAGES = True
#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\Tests\test_file_tiff_metadata.py
        # Should not raise ValueError.
        self.assert_warning(UserWarning, lambda: ifd[277])

#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\Tests\test_numpy.py
        # Act/Assert
        self.assert_warning(None, lambda: array(im))

#########################################################################################
C:\Users\muvva\Desktop\testing\Pillow-master\Tests\test_util.py
        # Assert
        self.assertRaises(ValueError, lambda: thing.some_attr)

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_internal\utils\ui.py
            # add it.
            self.file.isatty = lambda: self.file.wrapped.isatty()
            # The progress code expects to be able to call self.file.flush()
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_internal\utils\ui.py
            # add it.
            self.file.flush = lambda: self.file.wrapped.flush()

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_internal\wheel.py
    # https://github.com/pypa/pip/issues/5868
    return sorted(outrows, key=lambda row: tuple(str(x) for x in row))

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\distlib\locators.py
        # to the front
        result = sorted(result, key=lambda t: t[0], reverse=True)
        return result
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\distlib\version.py
        # by default, compatible => >=.
        '~=': lambda v, c, p: v == c or v > c,
        '!=': lambda v, c, p: v != c,
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\distlib\_backport\tarfile.py
        # Reverse sort directories.
        directories.sort(key=lambda a: a.name)
        directories.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\requests\utils.py
    # to keep a consistent behaviour with other http projects (curl, wget).
    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\retrying.py
        # wait behavior
        wait_funcs = [lambda *args, **kwargs: 0]
        if wait_fixed is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\src\pip\_vendor\urllib3\util\retry.py
        # We want to consider only the last consecutive errors sequence (Ignore redirects).
        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,
                                                    reversed(self.history))))
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\tasks\generate.py
    # Sort our list of Authors by their case insensitive name
    authors = sorted(authors, key=lambda x: x.lower())

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\tests\unit\test_locations.py
        # now patch
        tempfile.gettempdir = lambda: self.tempdir
        getpass.getuser = lambda: self.username
#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\tests\unit\test_options.py
        # Replace a handler with a no-op to avoid side effects
        monkeypatch.setattr(cmd, "get_name", lambda *a: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pip-master\tests\unit\test_options.py
        # Replace a handler with a no-op to avoid side effects
        monkeypatch.setattr(cmd, "get_name", lambda *a: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_internal\utils\ui.py
            # add it.
            self.file.isatty = lambda: self.file.wrapped.isatty()
            # The progress code expects to be able to call self.file.flush()
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_internal\utils\ui.py
            # add it.
            self.file.flush = lambda: self.file.wrapped.flush()

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_internal\wheel.py
    # https://github.com/pypa/pip/issues/5868
    return sorted(outrows, key=lambda row: tuple(str(x) for x in row))

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\distlib\locators.py
        # to the front
        result = sorted(result, key=lambda t: t[0], reverse=True)
        return result
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\distlib\version.py
        # by default, compatible => >=.
        '~=': lambda v, c, p: v == c or v > c,
        '!=': lambda v, c, p: v != c,
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\distlib\_backport\tarfile.py
        # Reverse sort directories.
        directories.sort(key=lambda a: a.name)
        directories.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\requests\utils.py
    # to keep a consistent behaviour with other http projects (curl, wget).
    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\retrying.py
        # wait behavior
        wait_funcs = [lambda *args, **kwargs: 0]
        if wait_fixed is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\patched\notpip\_vendor\urllib3\util\retry.py
        # We want to consider only the last consecutive errors sequence (Ignore redirects).
        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,
                                                    reversed(self.history))))
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\distlib\locators.py
        # to the front
        result = sorted(result, key=lambda t: t[0], reverse=True)
        return result
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\distlib\version.py
        # by default, compatible => >=.
        '~=': lambda v, c, p: v == c or v > c,
        '!=': lambda v, c, p: v != c,
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\distlib\_backport\tarfile.py
        # Reverse sort directories.
        directories.sort(key=lambda a: a.name)
        directories.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\jinja2\lexer.py
        # shortcuts
        c = lambda x: re.compile(x, re.M | re.S)
        e = re.escape
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\jinja2\runtime.py
#: the identity function.  Useful for certain things in the environment
identity = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\jinja2\utils.py
# special singleton representing missing values for the runtime
missing = type('MissingType', (), {'__repr__': lambda x: 'missing'})()

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\orderedmultidict\orderedmultidict.py
#   omd.allitems() == [(1,1), (1,11)]
#   omd.values(1) = list(map(lambda i: i * -10, omd.values(1)))
#   omd.allitems() == [(1,-10), (1,-110)]
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\orderedmultidict\orderedmultidict.py
#   omd.allitems() == [(1,-10), (1,-110)]
#   omd.allitems() = filter(lambda (k,v): v > -100, omd.allitems())
#   omd.allitems() == [(1,-10)]
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\packaging\specifiers.py
    # Get the release segment of our versions
    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\requests\utils.py
    # to keep a consistent behaviour with other http projects (curl, wget).
    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\pipenv-master\pipenv\vendor\urllib3\util\retry.py
        # We want to consider only the last consecutive errors sequence (Ignore redirects).
        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,
                                                    reversed(self.history))))
#########################################################################################
C:\Users\muvva\Desktop\testing\pkuseg-python-master\pkuseg\data.py
#         if config.weightRegMode == "GL":
#             sortList.sort(key=lambda x: (int(x.split(config.blank)[1].strip()), x))
#             with open("featureTemp_sorted.txt", "w", encoding="utf-8") as f:
#########################################################################################
C:\Users\muvva\Desktop\testing\pkuseg-python-master\pkuseg\data.py
#             sortList.sort(
#                 key=lambda x: (int(x.split(config.blank)[1].strip()), x), reverse=True
#             )
#########################################################################################
C:\Users\muvva\Desktop\testing\platformio-core-master\platformio\__main__.py
            # pylint: disable=protected-access
            click._compat.isatty = lambda stream: True
        except:  # pylint: disable=bare-except
#########################################################################################
C:\Users\muvva\Desktop\testing\plotly.py-master\plotly\figure_factory\_county_choropleth.py
    # make fips numeric
    fips = map(lambda x: int(x), fips)

#########################################################################################
C:\Users\muvva\Desktop\testing\plotly.py-master\plotly\graph_reference.py
    # capitalize first letter
    string = re.sub(r'[A-Za-z]', lambda m: m.group().title(), string, count=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\plotly.py-master\plotly\graph_reference.py
    # replace `*_<c>` with `*<C>` E.g., `Error_x` --> `ErrorX`
    string = re.sub(r'_[A-Za-z0-9]+', lambda m: m.group()[1:].title(), string)

#########################################################################################
C:\Users\muvva\Desktop\testing\ply-master\example\BASIC\basinterp.py
        self.functions = {           # Built-in function table
            'SIN': lambda z: math.sin(self.eval(z)),
            'COS': lambda z: math.cos(self.eval(z)),
#########################################################################################
C:\Users\muvva\Desktop\testing\ply-master\ply\yacc.py
        # p functions
        p_functions.sort(key=lambda p_function: (
            p_function[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokecli.py
    # Read passed in Arguments
    required = lambda x: x not in load
    add_config(
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # Filter active raids from the gyms
        close_gyms = filter(lambda gym: gym["id"] not in self.raid_gyms, close_gyms)

#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # if not skip_recent_filter:
        gyms = filter(lambda gym: gym["id"] not in self.recent_gyms, self.gyms)
        # Filter blacklisted gyms
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # Filter blacklisted gyms
        gyms = filter(lambda gym: gym["id"] not in self.blacklist, gyms)
        # Filter out gyms we already in
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # Filter out gyms we already in
        gyms = filter(lambda gym: gym["id"] not in self.dropped_gyms, gyms)
        # Filter out gyms we already raided
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # Filter out gyms we already raided
        gyms = filter(lambda gym: gym["id"] not in self.raided_gyms, gyms)
        #print("dropped gyms: "+format(self.dropped_gyms))
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # filter fake gyms
        # self.gyms = filter(lambda gym: "type" not in gym or gym["type"] != 1, self.gyms)
        # sort by current distance
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # sort by current distance
        gyms.sort(key=lambda x: distance(
                self.bot.position[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\gym_pokemon.py
        # Sort them
        pokemons_ordered = sorted(possible_pokemons, key=lambda x: get_poke_info(self.order_by, x), reverse=True)
        # Top 20 picks
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\move_to_map_pokemon.py
        # Remove stops that are still on timeout
        forts = filter(lambda x: x["id"] not in self.bot.fort_timeouts, forts)
        i = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\nickname_pokemon.py
        # only convert the keys to lowercase, leaving the format specifier alone
        template = re.sub(r"{[\w_\d]*", lambda x:x.group(0).lower(), template).strip()

#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\nickname_pokemon.py
            # Joined IV values in HEX like: 4C9
            iv_ads_hex = ''.join(map(lambda x: format(x, 'X'), iv_list)),
            # Sum of the Individial Values
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_catch_worker.py
            # Catch only if better CP
            current_owned.sort(key=lambda p: p.cp)
            if pokemon.cp > current_owned[0].cp:
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_catch_worker.py
            # Catch only if better CP
            current_owned.sort(key=lambda p: p.iv)
            if current_owned[0].iv == 1:
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_hunter.py
            # Okay, we should hunt for trash if the bag is almost full
            pokemons.sort(key=lambda p: p["distance"])
            possible_targets = filter(lambda x: x["name"] in trash_mons, pokemons)
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_hunter.py
                    # Priotize closer pokemon
                    worth_pokemons.sort(key=lambda p: p["distance"])
                else:
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_hunter.py
                    # Not every tick please
                    possible_targets = filter(lambda p: self._is_vip_pokemon(p), pokemons)
                    # Update the distance to targets
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_hunter.py
                # Not every tick please
                possible_targets = filter(lambda p: self._is_vip_pokemon(p), pokemons)
                # Update the distance to targets
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\pokemon_hunter.py
        # Remove stops that are still on timeout
        forts = filter(lambda x: x["id"] not in self.bot.fort_timeouts, forts)
        i = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\cell_workers\spin_fort.py
            # Remove all forts which were spun in the last ticks to keep 10 stops streak
            forts = filter(lambda x: x["id"] not in self.streak_forts, forts)

#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\event_handlers\telegram_handler.py
        # remove old handler
        self.bot.event_manager._handlers = filter(lambda x: not isinstance(x, TelegramHandler),
                                                  self.bot.event_manager._handlers)
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\inventory.py
        # Calculate attack perfection for each moveset
        movesets = sorted(movesets, key=lambda m: m.dps_attack)
        worst_dps = movesets[0].dps_attack
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\inventory.py
        # Calculate defense perfection for each moveset
        movesets = sorted(movesets, key=lambda m: m.dps_defense)
        worst_dps = movesets[0].dps_defense
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\walkers\polyline_generator.py
        is_old_cache = lambda : abs_offset > 8  # Consider cache old if we identified an offset more then 8 m
        new_dest_set = lambda : tuple(destination) != PolylineObjectHandler._cache.destination

#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\__init__.py
        # Need to filter out disabled forts!
        forts = filter(lambda x: x["enabled"] is True, forts)
        forts = filter(lambda x: 'closed' not in fort, forts)
#########################################################################################
C:\Users\muvva\Desktop\testing\PokemonGo-Bot-master\pokemongo_bot\__init__.py
        # Need to filter out disabled gyms!
        forts = filter(lambda x: x["enabled"] is True, forts)
        forts = filter(lambda x: 'closed' not in fort, forts)
#########################################################################################
C:\Users\muvva\Desktop\testing\powerline-master\powerline\segments\common\env.py
# os.geteuid is not available on windows
_geteuid = getattr(os, 'geteuid', lambda: 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\praw-master\tests\conftest.py
if platform == "darwin":  # Work around issue with betamax on OS X
    socket.gethostbyname = lambda x: "127.0.0.1"

#########################################################################################
C:\Users\muvva\Desktop\testing\Printrun-master\printrun\gcodeplater.py
        # Sort models by Z max to print smaller objects first
        models.sort(key = lambda x: x.dims[-1])
        alllayers = []
#########################################################################################
C:\Users\muvva\Desktop\testing\Printrun-master\printrun\gcodeplater.py
        # Sort models by Z max to print smaller objects first
        models.sort(key = lambda x: x.dims[-1])
        with open(name, "w") as f:
#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by name in ascending order.
by_name = SortKey(lambda stat: stat.name)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by module in ascending order.
by_module = SortKey(lambda stat: stat.module)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by module and name in ascending order.
by_function = SortKey(lambda stat: (stat.module, stat.name))

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by number of inclusive hits in descending order.
by_deep_hits = SortKey(lambda stat: -stat.deep_hits)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by number of exclusive hits in descending order.
by_own_hits = SortKey(lambda stat: -stat.own_hits)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by inclusive elapsed time in descending order.
by_deep_time = SortKey(lambda stat: -stat.deep_time)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\sortkeys.py
#: Sorting by exclusive elapsed time in descending order.
by_own_time = SortKey(lambda stat: (-stat.own_time, -stat.deep_time))

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\utils.py
#: Does nothing.  It allows any arguments.
noop = lambda x, *a, **k: None

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\__main__.py
#: Just returns the first argument.
noop = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\profiling\__main__.py
#: Makes a function which import an object by :func:`import_` lazily.
importer = lambda module_name, name: partial(import_, module_name, name)

#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\test\test_cli.py
    # config to use SamplingProfiler.
    monkeypatch.setattr(builtins, 'open', lambda *a, **k: mock_file(u'''
    [profiling]
#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\test\test_sampling.py
        # respect custom handler.
        handler = lambda *x: x
        signal.signal(signal.SIGPROF, handler)
#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\test\test_stats.py
# def test_recording():
#     stats.wall = lambda: 10
#     stats.record_starting(0)
#########################################################################################
C:\Users\muvva\Desktop\testing\profiling-master\test\test_stats.py
#     assert isinstance(stats3, VoidRecordingStatistics)
#     stats.wall = lambda: 2000
#     stats.record_stopping(400)
#########################################################################################
C:\Users\muvva\Desktop\testing\psutil-master\psutil\tests\test_process.py
        # this is the one, now let's make sure there are no duplicates
        pid = sorted(table.items(), key=lambda x: x[1])[-1][0]
        p = psutil.Process(pid)
#########################################################################################
C:\Users\muvva\Desktop\testing\psutil-master\psutil\_pslinux.py
            # CPUs (cpu_times(), cpu_percent(), cpu_times_percent()).
            ls.sort(key=lambda x: int(os.path.basename(x)[6:]))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\psutil-master\scripts\iotop.py
    # ones get listed first
    processes = sorted(procs, key=lambda p: p._total, reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\psutil-master\scripts\top.py
    # return processes sorted by CPU percent usage
    processes = sorted(procs, key=lambda p: p.dict['cpu_percent'],
                       reverse=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\ptpython-master\examples\python-embed-with-custom-prompt.py
    # 2. Assign a new callable to `get_input_prompt_tokens`. This will always take effect.
    ## repl.get_input_prompt_tokens = lambda cli: [(Token.In, '[hello] >>> ')]

#########################################################################################
C:\Users\muvva\Desktop\testing\ptpython-master\ptpython\layout.py
                # As long as we're editing, prefer a minimal height of 6.
                height=(lambda: (
                    None if get_app().is_done or python_input.show_exit_confirmation
#########################################################################################
C:\Users\muvva\Desktop\testing\pudb-master\example-stringifier.py
    # Set the signal handler and a ``time``-second alarm
    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))
    if sys.version_info > (2, 5):
#########################################################################################
C:\Users\muvva\Desktop\testing\pudb-master\pudb\theme.py
    #                ("from", "and", "break", "is", "try", "pass", etc.)
    #  "keyword2"  : "class", "def", "exec", "lambda", "print"
    # ------------------------------------------------------------------------------
#########################################################################################
C:\Users\muvva\Desktop\testing\pulsar-master\pulsar\async\concurrency.py
        # when the mailbox stop, close the event loop too
        mailbox.event('stop').bind(lambda _, **kw: loop.stop())
        mailbox.event('start').bind(
#########################################################################################
C:\Users\muvva\Desktop\testing\py-faster-rcnn-master\lib\pycocotools\cocoeval.py
        # sort dt highest score first, sort gt ignore last
        # gt = sorted(gt, key=lambda x: x['_ignore'])
        gtind = [ind for (ind, g) in sorted(enumerate(gt), key=lambda (ind, g): g['_ignore']) ]
#########################################################################################
C:\Users\muvva\Desktop\testing\py-faster-rcnn-master\lib\pycocotools\cocoeval.py
        # gt = sorted(gt, key=lambda x: x['_ignore'])
        gtind = [ind for (ind, g) in sorted(enumerate(gt), key=lambda (ind, g): g['_ignore']) ]

#########################################################################################
C:\Users\muvva\Desktop\testing\pyAudioAnalysis-master\pyAudioAnalysis\data\recordRadio.py
        # 4.a. uridecodebin has a "sometimes" pad (created after prerolling)
        source.connect('pad-added', lambda src, pad: src.link(splitter))
        
#########################################################################################
C:\Users\muvva\Desktop\testing\pycallgraph-master\examples\graphviz\colors.py
    # Set the edge colour to black for all examples
    graphviz.edge_color_func = lambda e: Color(0, 0, 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\pycallgraph-master\pycallgraph\tracer.py
        # A mapping of which function called which other function
        self.call_dict = defaultdict(lambda: defaultdict(int))

#########################################################################################
C:\Users\muvva\Desktop\testing\pycodestyle-master\pycodestyle.py
             counts['('] <= counts[')'])):    # (annotation)
            lambda_kw = LAMBDA_REGEX.search(line, 0, found)
            if lambda_kw:
#########################################################################################
C:\Users\muvva\Desktop\testing\pycodestyle-master\testsuite\E73.py
#: E731:1:1
f = lambda x: 2 * x
#: E731:1:1 E226:1:16
#########################################################################################
C:\Users\muvva\Desktop\testing\pycodestyle-master\testsuite\E73.py
#: E731:1:1 E226:1:16
f = lambda x: 2*x
#: E731:2:5
#########################################################################################
C:\Users\muvva\Desktop\testing\pycparser-master\pycparser\ply\yacc.py
        # p functions
        p_functions.sort(key=lambda p_function: (
            p_function[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\pycrypto-master\lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py
                        # The real test
                        key._randfunc = lambda N: test_salt
                        verifier = PKCS.new(key)
#########################################################################################
C:\Users\muvva\Desktop\testing\PyFunctional-master\functional\util.py
    # pylint: disable=undefined-variable
    return reduce(lambda f, g: lambda x: f(g(x)), functions, lambda x: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\PyGithub-master\github\tests\BadAttributes.py
        # We can loop on all hooks as long as we don't access circleci's events attribute
        self.assertListKeyEqual(hooks, lambda h: h.name, [u'activecollab', u'acunote', u'agilebench', u'agilezen', u'amazonsns', u'apiary', u'apoio', u'appharbor', u'apropos', u'asana', u'backlog', u'bamboo', u'basecamp', u'bcx', u'blimp', u'boxcar', u'buddycloud', u'bugherd', u'bugly', u'bugzilla', u'campfire', u'cia', u'circleci', u'codeclimate', u'codeportingcsharp2java', u'codeship', u'coffeedocinfo', u'conductor', u'coop', u'copperegg', u'cube', u'depending', u'deployhq', u'devaria', u'docker', u'ducksboard', u'email', u'firebase', u'fisheye', u'flowdock', u'fogbugz', u'freckle', u'friendfeed', u'gemini', u'gemnasium', u'geocommit', u'getlocalization', u'gitlive', u'grmble', u'grouptalent', u'grove', u'habitualist', u'hakiri', u'hall', u'harvest', u'hipchat', u'hostedgraphite', u'hubcap', u'hubci', u'humbug', u'icescrum', u'irc', u'irker', u'ironmq', u'ironworker', u'jabber', u'jaconda', u'jeapie', u'jenkins', u'jenkinsgit', u'jira', u'jqueryplugins', u'kanbanery', u'kickoff', u'leanto', u'lechat', u'lighthouse', u'lingohub', u'loggly', u'mantisbt', u'masterbranch', u'mqttpub', u'nma', u'nodejitsu', u'notifo', u'ontime', u'pachube', u'packagist', u'phraseapp', u'pivotaltracker', u'planbox', u'planio', u'prowl', u'puppetlinter', u'pushalot', u'pushover', u'pythonpackages', u'railsbp', u'railsbrakeman', u'rally', u'rapidpush', u'rationaljazzhub', u'rationalteamconcert', u'rdocinfo', u'readthedocs', u'redmine', u'rubyforge', u'scrumdo', u'shiningpanda', u'sifter', u'simperium', u'slatebox', u'snowyevening', u'socialcast', u'softlayermessaging', u'sourcemint', u'splendidbacon', u'sprintly', u'sqsqueue', u'stackmob', u'statusnet', u'talker', u'targetprocess', u'tddium', u'teamcity', u'tender', u'tenxer', u'testpilot', u'toggl', u'trac', u'trajectory', u'travis', u'trello', u'twilio', u'twitter', u'unfuddle', u'web', u'weblate', u'webtranslateit', u'yammer', u'youtrack', u'zendesk', u'zohoprojects'])
        for hook in hooks:
#########################################################################################
C:\Users\muvva\Desktop\testing\PyGithub-master\github\tests\Issue50.py
        issue = self.repo.create_issue("Issue created by PyGithub to test issue #50", labels=[self.repo.get_label(self.labelName)])
        self.assertListKeyEqual(issue.labels, lambda l: l.name, [self.labelName])
        self.assertEqual(issue.number, 52)
#########################################################################################
C:\Users\muvva\Desktop\testing\PyGithub-master\github\tests\Issue80.py
        self.assertEqual(org.url, "https://my.enterprise.com/some/prefix/orgs/BeaverSoftware")  # https returned
        self.assertListKeyEqual(org.get_repos(), lambda r: r.name, ["FatherBeaver", "TestPyGithub"])  # But still http in second request based on org.url

#########################################################################################
C:\Users\muvva\Desktop\testing\PyGithub-master\github\tests\Issue80.py
        self.assertEqual(org.url, "https://my.enterprise.com:1234/some/prefix/orgs/BeaverSoftware")  # https returned
        self.assertListKeyEqual(org.get_repos(), lambda r: r.name, ["FatherBeaver", "TestPyGithub"])  # But still http in second request based on org.url

#########################################################################################
C:\Users\muvva\Desktop\testing\pygorithm-master\pygorithm\data_structures\graph.py
        # sort by weight
        self.edges_weighted.sort(key=lambda pair: pair[1])
        edges_explored = []
#########################################################################################
C:\Users\muvva\Desktop\testing\pyinstaller-master\PyInstaller\hooks\hook-lensfunpy.py
# bundle xml DB files, skip other files (like DLL files on Windows)
datas = list(filter(lambda p: p[0].endswith('.xml'), collect_data_files('lensfunpy')))
hiddenimports = ['numpy', 'enum']
#########################################################################################
C:\Users\muvva\Desktop\testing\pyinstaller-master\PyInstaller\hooks\hook-PIL.Image.py
# e.g.  PIL.JpegImagePlugin
hiddenimports = collect_submodules('PIL', lambda name: 'ImagePlugin' in name)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyinstaller-master\PyInstaller\lib\modulegraph\find_modules.py
    # sort on the file names, the output is nicer to read
    py_files.sort(key=lambda v: v.filename)
    extensions.sort(key=lambda v: v.filename)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyinstaller-master\PyInstaller\utils\hooks\__init__.py
        return []  # Means no imports found or looking for imports failed.
    # module_imports = filter(lambda x: not x.startswith('distutils'), module_imports)
    return module_imports
#########################################################################################
C:\Users\muvva\Desktop\testing\pyinstaller-master\tests\unit\test_modulegraph_more.py
    # _process_imports would set _deferred_imports to None
    monkeypatch.setattr(mg, '_process_imports', lambda m: None)
    module = mg.createNode(modulegraph.Script, 'dummy.py')
#########################################################################################
C:\Users\muvva\Desktop\testing\pyload-master\pyload\core\manager\addon.py
        # maps plugin names to info tuple
        self.plugins = defaultdict(lambda: AddonTuple([], [], {}))
        # Property hash mapped to meta data
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\gp\gp.py
    # Use y as first argument, so that we can use functools.partial
    # in marginal_likelihood instead of lambda. This makes pickling
    # possible.
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\sampling.py
            # select the best method
            selected = max(methods, key=lambda method,
                           var=var, has_gradient=has_gradient:
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\tests\test_distributions_random.py
        #                           valuedomain=PdMatrix(n),
        #                           ref_rand=lambda n=None, V=None, size=None: \
        #                           st.wishart(V, df=n, size=size))
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\tests\test_updates.py
    [lambda t: t,              # all params -> ok
     lambda t: (None, t[1]),   # missing loss -> fail
     lambda t: (t[0], None),   # missing params -> fail
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\tests\test_updates.py
     lambda t: (None, t[1]),   # missing loss -> fail
     lambda t: (t[0], None),   # missing params -> fail
     lambda t: (None, None)],  # all missing -> partial
#########################################################################################
C:\Users\muvva\Desktop\testing\pymc3-master\pymc3\tests\test_updates.py
     lambda t: (t[0], None),   # missing params -> fail
     lambda t: (None, None)],  # all missing -> partial
    ids=['all_params',
#########################################################################################
C:\Users\muvva\Desktop\testing\PyPDF2-master\PyPDF2\generic.py
    # returns self.
    original_bytes = property(lambda self: self)

#########################################################################################
C:\Users\muvva\Desktop\testing\PyPDF2-master\PyPDF2\generic.py
    # back-calculate what the original encoded bytes were.
    original_bytes = property(lambda self: self.get_original_bytes())

#########################################################################################
C:\Users\muvva\Desktop\testing\PyPDF2-master\PyPDF2\generic.py
    # Stability: Added in v1.12, will exist for all future v1.x releases.
    xmpMetadata = property(lambda self: self.getXmpMetadata(), None, None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\quick_tour\sqla_demo\sqla_demo\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\authentication\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\authorization\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\basiclayout\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\installation\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\models\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\tests\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\docs\tutorials\wiki2\src\views\tutorial\models\__init__.py
        # r.tm is the transaction manager used by pyramid_tm
        lambda r: get_tm_session(session_factory, r.tm),
        'dbsession',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\src\pyramid\authentication.py
        'unicode': lambda x: utf_8_decode(x)[0],  # bw compat for old cookies
        'b64unicode': lambda x: utf_8_decode(b64decode(x))[0],
        'b64str': lambda x: b64decode(x),
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\tests\test_config\test_actions.py
        # prior to add_view_deriver executing its action
        config.add_view(lambda r: r.response, name='', foo=1)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\tests\test_config\test_actions.py
            # trigger a re-entrant action
            config.action(None, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\tests\test_i18n.py
        # inst2 represents a message file that declares french plurals
        inst2.plural = lambda n: n > 1
        inst.add(inst2)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\tests\test_i18n.py
        # We load a second message file with different plural rules
        inst3.plural = lambda n: n > 0
        inst.add(inst3)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyramid-master\tests\test_static.py
        # update mtime, should cause a reload
        inst.getmtime = lambda *args, **kwargs: 1
        self.assertEqual(
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\air\main.py
    # print(dist)
    return lambda t: trial_probs[t]

#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\contrib\oed\eig_estimation_benchmarking.py
nig_2p_ba_guide = lambda d: NormalInverseGammaGuide(d, {"w": 2})  # noqa: E731
nig_2p_ba_mf_guide = lambda d: NormalInverseGammaGuide(d, {"w": 2}, mf=True)  # noqa: E731

#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\hmm.py
    # named probs_*.
    guide = AutoDelta(poutine.block(model, expose_fn=lambda msg: msg["name"].startswith("probs_")))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\rsa\hyperbole.py
        "probs": torch.tensor([0.0018655171404222354,0.1512643329444101,0.0030440475496016296,0.23182161303428897,0.00003854830096338984,0.01502495595927897,0.00003889558295405101,0.015160315922876075,0.00016425635615857924,0.026788637869123822,0.00017359794987375924,0.028312162297699582,0.0008164336950199063,0.060558944822420434,0.0008088460212743665,0.05999612935009309,0.01925106279557206,0.17429720083660782,0.02094455861717477,0.18962994295418778]),  # noqa: E231,E501
        "support": list(map(lambda d: State(**d), [{"price":10001,"valence":False},{"price":10001,"valence":True},{"price":10000,"valence":False},{"price":10000,"valence":True},{"price":5001,"valence":False},{"price":5001,"valence":True},{"price":5000,"valence":False},{"price":5000,"valence":True},{"price":1001,"valence":False},{"price":1001,"valence":True},{"price":1000,"valence":False},{"price":1000,"valence":True},{"price":501,"valence":False},{"price":501,"valence":True},{"price":500,"valence":False},{"price":500,"valence":True},{"price":51,"valence":False},{"price":51,"valence":True},{"price":50,"valence":False},{"price":50,"valence":True}]))  # noqa: E231,E501
    }
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\vae\ss_vae_M2.py
            # compute average epoch losses i.e. losses per example
            avg_epoch_losses_sup = map(lambda v: v / args.sup_num, epoch_losses_sup)
            avg_epoch_losses_unsup = map(lambda v: v / unsup_num, epoch_losses_unsup)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\examples\vae\utils\mnist_cached.py
    # transform x to a linear tensor from bx * a1 * a2 * ... --> bs * A
    xp_1d_size = reduce(lambda a, b: a * b, xp.size()[1:])
    xp = xp.view(-1, xp_1d_size)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\pyro\contrib\glmm\glmm.py
        # Process fixed effects
        for name, w_sqrtlambda in w_sqrtlambdas.items():
            w_mean = w_means[name]
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\pyro\contrib\glmm\glmm.py
            # Place a normal prior on the regression coefficient
            w_prior = dist.Normal(w_mean, obs_sd / w_sqrtlambda).to_event(1)
            w.append(pyro.sample(name, w_prior))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\pyro\contrib\gp\kernels\kernel.py
        >>> # to call the primitive pyro.module each time we use the linear function
        >>> pyro_linear_fn = lambda x: pyro.module("linear", linear)(x)
        >>> kernel = gp.kernels.Matern52(input_dim=3, lengthscale=torch.ones(3))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\pyro\contrib\minipyro.py
            # We use block here to allow tracing to record parameters only.
            with block(hide_fn=lambda msg: msg["type"] == "sample"):
                loss = self.loss(self.model, self.guide, *args, **kwargs)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\tests\distributions\conftest.py
            # This hack seems to be the best option right now, as 'scale' is not handled well by get_scipy_batch_logpdf
            scipy_arg_fn=lambda loc, covariance_matrix=None:
                ((), {"mean": np.array(loc), "cov": np.array([[1.0, 0.5], [0.5, 1.0]])}),
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\tests\integration_tests\test_conjugate_gaussian_models.py
        self.N = N  # number of latent variables in the chain
        lambdas = [1.5 * (k + 1) / N for k in range(N + 1)]
        self.lambdas = list(map(lambda x: torch.tensor([x]), lambdas))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyro-master\tests\integration_tests\test_conjugate_gaussian_models.py
        self.N = N  # number of layers in the pyramid
        lambdas = [1.1 * (k + 1) / N for k in range(N + 2)]
        self.lambdas = list(map(lambda x: torch.tensor([x]), lambdas))
#########################################################################################
C:\Users\muvva\Desktop\testing\PySimpleGUI-master\DemoPrograms\Demo_IP_Address_Entry.py
# create a short-cut element so don't have to type this in over and over
InIp = lambda key: sg.Input(do_not_clear=True, size=(3, 1), key=key, pad=(0, 2))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\bsddb\test\test_dbshelve.py
        else :  # XXX: Convert all to strings. Please, improve
            values.sort(key=lambda x : str(x))
            dbvalues.sort(key=lambda x : str(x))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\bsddb\__init__.py
        # in the callback.
        return lambda ref: self._cursor_refs.pop(key, None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\compiler\symbols.py
        # context where assign is passed.  The transformer should catch
        # any code that has a lambda on the left-hand side.
        assert not assign
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\cookielib.py
        # add cookies in order of most specific (ie. longest) path first
        cookies.sort(key=lambda arg: len(arg.path), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\ctypes\test\test_callbacks.py
        # The type is checked when the prototype is called
        self.assertRaises(TypeError, prototype, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\ctypes\test\test_pickling.py
        # unpickable.
        self.assertRaises(ValueError, lambda: self.dumps(Y()))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\ctypes\test\test_varsize_struct.py
        # cannot create arrays with non-positive size
        self.assertRaises(ValueError, lambda: c_int * -1)
        self.assertRaises(ValueError, lambda: c_int * -3)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\ctypes\__init__.py
    # compiled with the MS SDK compiler.  Or an uninitialized variable?
    CFUNCTYPE(c_int)(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\htmlentitydefs.py
    'Kappa':    0x039a, # greek capital letter kappa, U+039A
    'Lambda':   0x039b, # greek capital letter lambda, U+039B ISOgrk3
    'Mu':       0x039c, # greek capital letter mu, U+039C
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\htmlentitydefs.py
    'lArr':     0x21d0, # leftwards double arrow, U+21D0 ISOtech
    'lambda':   0x03bb, # greek small letter lambda, U+03BB ISOgrk3
    'lang':     0x2329, # left-pointing angle bracket = bra, U+2329 ISOtech
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\idlelib\idle_test\test_searchengine.py
        # search_backward calls index('end-1c')
        cls.text.index = lambda index: '4.0'
        test_text = (
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\inspect.py
            # look for the first "def", "class" or "lambda"
            if token in ("def", "class", "lambda"):
                if token == "lambda":
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\fixes\fix_tuple_params.py
    # The parens are a syntax error in Python 3
    lambda (x): x + y -> lambda x: x + y
"""
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\data\py2_test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0L]]
        self.assertEquals(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\data\py3_test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0]]
        self.assertEquals(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\data\py3_test_grammar.py
        # the next line is not allowed anymore
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\data\py3_test_grammar.py
        #self.assertEqual([ x() for x in lambda: True, lambda: False if x() ], [True])
        self.assertEqual([ x() for x in (lambda: True, lambda: False) if x() ], [True])
        self.assertEqual([ x(False) for x in (lambda x: False if x else True, lambda x: True if x else False) if x(False) ], [True])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\test_fixers.py
        # Note the parens around x
        b = """x = filter(lambda (x): x%2 == 0, range(10))"""
        a = """x = [x for x in range(10) if x%2 == 0]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\lib2to3\tests\test_fixers.py
        # Note the parens around x
        b = """x = map(lambda (x): x+1, range(4))"""
        a = """x = [x+1 for x in range(4)]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\pydoc.py
        if sys.platform == 'win32': # pipes completely broken in Windows
            return lambda text: tempfilepager(plain(text), os.environ['PAGER'])
        elif os.environ.get('TERM') in ('dumb', 'emacs'):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\pydoc_data\topics.py
 'typesseq': '\nSequence Types --- ``str``, ``unicode``, ``list``, ``tuple``, ``bytearray``, ``buffer``, ``xrange``\n***************************************************************************************************\n\nThere are seven sequence types: strings, Unicode strings, lists,\ntuples, bytearrays, buffers, and xrange objects.\n\nFor other containers see the built in ``dict`` and ``set`` classes,\nand the ``collections`` module.\n\nString literals are written in single or double quotes: ``\'xyzzy\'``,\n``"frobozz"``.  See *String literals* for more about string literals.\nUnicode strings are much like strings, but are specified in the syntax\nusing a preceding ``\'u\'`` character: ``u\'abc\'``, ``u"def"``. In\naddition to the functionality described here, there are also string-\nspecific methods described in the *String Methods* section. Lists are\nconstructed with square brackets, separating items with commas: ``[a,\nb, c]``. Tuples are constructed by the comma operator (not within\nsquare brackets), with or without enclosing parentheses, but an empty\ntuple must have the enclosing parentheses, such as ``a, b, c`` or\n``()``.  A single item tuple must have a trailing comma, such as\n``(d,)``.\n\nBytearray objects are created with the built-in function\n``bytearray()``.\n\nBuffer objects are not directly supported by Python syntax, but can be\ncreated by calling the built-in function ``buffer()``.  They don\'t\nsupport concatenation or repetition.\n\nObjects of type xrange are similar to buffers in that there is no\nspecific syntax to create them, but they are created using the\n``xrange()`` function.  They don\'t support slicing, concatenation or\nrepetition, and using ``in``, ``not in``, ``min()`` or ``max()`` on\nthem is inefficient.\n\nMost sequence types support the following operations.  The ``in`` and\n``not in`` operations have the same priorities as the comparison\noperations.  The ``+`` and ``*`` operations have the same priority as\nthe corresponding numeric operations. [3] Additional methods are\nprovided for *Mutable Sequence Types*.\n\nThis table lists the sequence operations sorted in ascending priority\n(operations in the same box have the same priority).  In the table,\n*s* and *t* are sequences of the same type; *n*, *i* and *j* are\nintegers:\n\n+--------------------+----------------------------------+------------+\n| Operation          | Result                           | Notes      |\n+====================+==================================+============+\n| ``x in s``         | ``True`` if an item of *s* is    | (1)        |\n|                    | equal to *x*, else ``False``     |            |\n+--------------------+----------------------------------+------------+\n| ``x not in s``     | ``False`` if an item of *s* is   | (1)        |\n|                    | equal to *x*, else ``True``      |            |\n+--------------------+----------------------------------+------------+\n| ``s + t``          | the concatenation of *s* and *t* | (6)        |\n+--------------------+----------------------------------+------------+\n| ``s * n, n * s``   | *n* shallow copies of *s*        | (2)        |\n|                    | concatenated                     |            |\n+--------------------+----------------------------------+------------+\n| ``s[i]``           | *i*th item of *s*, origin 0      | (3)        |\n+--------------------+----------------------------------+------------+\n| ``s[i:j]``         | slice of *s* from *i* to *j*     | (3)(4)     |\n+--------------------+----------------------------------+------------+\n| ``s[i:j:k]``       | slice of *s* from *i* to *j*     | (3)(5)     |\n|                    | with step *k*                    |            |\n+--------------------+----------------------------------+------------+\n| ``len(s)``         | length of *s*                    |            |\n+--------------------+----------------------------------+------------+\n| ``min(s)``         | smallest item of *s*             |            |\n+--------------------+----------------------------------+------------+\n| ``max(s)``         | largest item of *s*              |            |\n+--------------------+----------------------------------+------------+\n| ``s.index(x)``     | index of the first occurrence of |            |\n|                    | *x* in *s*                       |            |\n+--------------------+----------------------------------+------------+\n| ``s.count(x)``     | total number of occurrences of   |            |\n|                    | *x* in *s*                       |            |\n+--------------------+----------------------------------+------------+\n\nSequence types also support comparisons. In particular, tuples and\nlists are compared lexicographically by comparing corresponding\nelements. This means that to compare equal, every element must compare\nequal and the two sequences must be of the same type and have the same\nlength. (For full details see *Comparisons* in the language\nreference.)\n\nNotes:\n\n1. When *s* is a string or Unicode string object the ``in`` and ``not\n   in`` operations act like a substring test.  In Python versions\n   before 2.3, *x* had to be a string of length 1. In Python 2.3 and\n   beyond, *x* may be a string of any length.\n\n2. Values of *n* less than ``0`` are treated as ``0`` (which yields an\n   empty sequence of the same type as *s*).  Note also that the copies\n   are shallow; nested structures are not copied.  This often haunts\n   new Python programmers; consider:\n\n   >>> lists = [[]] * 3\n   >>> lists\n   [[], [], []]\n   >>> lists[0].append(3)\n   >>> lists\n   [[3], [3], [3]]\n\n   What has happened is that ``[[]]`` is a one-element list containing\n   an empty list, so all three elements of ``[[]] * 3`` are (pointers\n   to) this single empty list.  Modifying any of the elements of\n   ``lists`` modifies this single list. You can create a list of\n   different lists this way:\n\n   >>> lists = [[] for i in range(3)]\n   >>> lists[0].append(3)\n   >>> lists[1].append(5)\n   >>> lists[2].append(7)\n   >>> lists\n   [[3], [5], [7]]\n\n3. If *i* or *j* is negative, the index is relative to the end of the\n   string: ``len(s) + i`` or ``len(s) + j`` is substituted.  But note\n   that ``-0`` is still ``0``.\n\n4. The slice of *s* from *i* to *j* is defined as the sequence of\n   items with index *k* such that ``i <= k < j``.  If *i* or *j* is\n   greater than ``len(s)``, use ``len(s)``.  If *i* is omitted or\n   ``None``, use ``0``.  If *j* is omitted or ``None``, use\n   ``len(s)``.  If *i* is greater than or equal to *j*, the slice is\n   empty.\n\n5. The slice of *s* from *i* to *j* with step *k* is defined as the\n   sequence of items with index  ``x = i + n*k`` such that ``0 <= n <\n   (j-i)/k``.  In other words, the indices are ``i``, ``i+k``,\n   ``i+2*k``, ``i+3*k`` and so on, stopping when *j* is reached (but\n   never including *j*).  If *i* or *j* is greater than ``len(s)``,\n   use ``len(s)``.  If *i* or *j* are omitted or ``None``, they become\n   "end" values (which end depends on the sign of *k*).  Note, *k*\n   cannot be zero. If *k* is ``None``, it is treated like ``1``.\n\n6. **CPython implementation detail:** If *s* and *t* are both strings,\n   some Python implementations such as CPython can usually perform an\n   in-place optimization for assignments of the form ``s = s + t`` or\n   ``s += t``.  When applicable, this optimization makes quadratic\n   run-time much less likely.  This optimization is both version and\n   implementation dependent.  For performance sensitive code, it is\n   preferable to use the ``str.join()`` method which assures\n   consistent linear concatenation performance across versions and\n   implementations.\n\n   Changed in version 2.4: Formerly, string concatenation never\n   occurred in-place.\n\n\nString Methods\n==============\n\nBelow are listed the string methods which both 8-bit strings and\nUnicode objects support.  Some of them are also available on\n``bytearray`` objects.\n\nIn addition, Python\'s strings support the sequence type methods\ndescribed in the *Sequence Types --- str, unicode, list, tuple,\nbytearray, buffer, xrange* section. To output formatted strings use\ntemplate strings or the ``%`` operator described in the *String\nFormatting Operations* section. Also, see the ``re`` module for string\nfunctions based on regular expressions.\n\nstr.capitalize()\n\n   Return a copy of the string with its first character capitalized\n   and the rest lowercased.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.center(width[, fillchar])\n\n   Return centered in a string of length *width*. Padding is done\n   using the specified *fillchar* (default is a space).\n\n   Changed in version 2.4: Support for the *fillchar* argument.\n\nstr.count(sub[, start[, end]])\n\n   Return the number of non-overlapping occurrences of substring *sub*\n   in the range [*start*, *end*].  Optional arguments *start* and\n   *end* are interpreted as in slice notation.\n\nstr.decode([encoding[, errors]])\n\n   Decodes the string using the codec registered for *encoding*.\n   *encoding* defaults to the default string encoding.  *errors* may\n   be given to set a different error handling scheme.  The default is\n   ``\'strict\'``, meaning that encoding errors raise ``UnicodeError``.\n   Other possible values are ``\'ignore\'``, ``\'replace\'`` and any other\n   name registered via ``codecs.register_error()``, see section *Codec\n   Base Classes*.\n\n   New in version 2.2.\n\n   Changed in version 2.3: Support for other error handling schemes\n   added.\n\n   Changed in version 2.7: Support for keyword arguments added.\n\nstr.encode([encoding[, errors]])\n\n   Return an encoded version of the string.  Default encoding is the\n   current default string encoding.  *errors* may be given to set a\n   different error handling scheme.  The default for *errors* is\n   ``\'strict\'``, meaning that encoding errors raise a\n   ``UnicodeError``.  Other possible values are ``\'ignore\'``,\n   ``\'replace\'``, ``\'xmlcharrefreplace\'``, ``\'backslashreplace\'`` and\n   any other name registered via ``codecs.register_error()``, see\n   section *Codec Base Classes*. For a list of possible encodings, see\n   section *Standard Encodings*.\n\n   New in version 2.0.\n\n   Changed in version 2.3: Support for ``\'xmlcharrefreplace\'`` and\n   ``\'backslashreplace\'`` and other error handling schemes added.\n\n   Changed in version 2.7: Support for keyword arguments added.\n\nstr.endswith(suffix[, start[, end]])\n\n   Return ``True`` if the string ends with the specified *suffix*,\n   otherwise return ``False``.  *suffix* can also be a tuple of\n   suffixes to look for.  With optional *start*, test beginning at\n   that position.  With optional *end*, stop comparing at that\n   position.\n\n   Changed in version 2.5: Accept tuples as *suffix*.\n\nstr.expandtabs([tabsize])\n\n   Return a copy of the string where all tab characters are replaced\n   by one or more spaces, depending on the current column and the\n   given tab size.  Tab positions occur every *tabsize* characters\n   (default is 8, giving tab positions at columns 0, 8, 16 and so on).\n   To expand the string, the current column is set to zero and the\n   string is examined character by character.  If the character is a\n   tab (``\\t``), one or more space characters are inserted in the\n   result until the current column is equal to the next tab position.\n   (The tab character itself is not copied.)  If the character is a\n   newline (``\\n``) or return (``\\r``), it is copied and the current\n   column is reset to zero.  Any other character is copied unchanged\n   and the current column is incremented by one regardless of how the\n   character is represented when printed.\n\n   >>> \'01\\t012\\t0123\\t01234\'.expandtabs()\n   \'01      012     0123    01234\'\n   >>> \'01\\t012\\t0123\\t01234\'.expandtabs(4)\n   \'01  012 0123    01234\'\n\nstr.find(sub[, start[, end]])\n\n   Return the lowest index in the string where substring *sub* is\n   found, such that *sub* is contained in the slice ``s[start:end]``.\n   Optional arguments *start* and *end* are interpreted as in slice\n   notation.  Return ``-1`` if *sub* is not found.\n\n   Note: The ``find()`` method should be used only if you need to know the\n     position of *sub*.  To check if *sub* is a substring or not, use\n     the ``in`` operator:\n\n        >>> \'Py\' in \'Python\'\n        True\n\nstr.format(*args, **kwargs)\n\n   Perform a string formatting operation.  The string on which this\n   method is called can contain literal text or replacement fields\n   delimited by braces ``{}``.  Each replacement field contains either\n   the numeric index of a positional argument, or the name of a\n   keyword argument.  Returns a copy of the string where each\n   replacement field is replaced with the string value of the\n   corresponding argument.\n\n   >>> "The sum of 1 + 2 is {0}".format(1+2)\n   \'The sum of 1 + 2 is 3\'\n\n   See *Format String Syntax* for a description of the various\n   formatting options that can be specified in format strings.\n\n   This method of string formatting is the new standard in Python 3,\n   and should be preferred to the ``%`` formatting described in\n   *String Formatting Operations* in new code.\n\n   New in version 2.6.\n\nstr.index(sub[, start[, end]])\n\n   Like ``find()``, but raise ``ValueError`` when the substring is not\n   found.\n\nstr.isalnum()\n\n   Return true if all characters in the string are alphanumeric and\n   there is at least one character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.isalpha()\n\n   Return true if all characters in the string are alphabetic and\n   there is at least one character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.isdigit()\n\n   Return true if all characters in the string are digits and there is\n   at least one character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.islower()\n\n   Return true if all cased characters [4] in the string are lowercase\n   and there is at least one cased character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.isspace()\n\n   Return true if there are only whitespace characters in the string\n   and there is at least one character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.istitle()\n\n   Return true if the string is a titlecased string and there is at\n   least one character, for example uppercase characters may only\n   follow uncased characters and lowercase characters only cased ones.\n   Return false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.isupper()\n\n   Return true if all cased characters [4] in the string are uppercase\n   and there is at least one cased character, false otherwise.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.join(iterable)\n\n   Return a string which is the concatenation of the strings in the\n   *iterable* *iterable*.  The separator between elements is the\n   string providing this method.\n\nstr.ljust(width[, fillchar])\n\n   Return the string left justified in a string of length *width*.\n   Padding is done using the specified *fillchar* (default is a\n   space).  The original string is returned if *width* is less than or\n   equal to ``len(s)``.\n\n   Changed in version 2.4: Support for the *fillchar* argument.\n\nstr.lower()\n\n   Return a copy of the string with all the cased characters [4]\n   converted to lowercase.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.lstrip([chars])\n\n   Return a copy of the string with leading characters removed.  The\n   *chars* argument is a string specifying the set of characters to be\n   removed.  If omitted or ``None``, the *chars* argument defaults to\n   removing whitespace.  The *chars* argument is not a prefix; rather,\n   all combinations of its values are stripped:\n\n   >>> \'   spacious   \'.lstrip()\n   \'spacious   \'\n   >>> \'www.example.com\'.lstrip(\'cmowz.\')\n   \'example.com\'\n\n   Changed in version 2.2.2: Support for the *chars* argument.\n\nstr.partition(sep)\n\n   Split the string at the first occurrence of *sep*, and return a\n   3-tuple containing the part before the separator, the separator\n   itself, and the part after the separator.  If the separator is not\n   found, return a 3-tuple containing the string itself, followed by\n   two empty strings.\n\n   New in version 2.5.\n\nstr.replace(old, new[, count])\n\n   Return a copy of the string with all occurrences of substring *old*\n   replaced by *new*.  If the optional argument *count* is given, only\n   the first *count* occurrences are replaced.\n\nstr.rfind(sub[, start[, end]])\n\n   Return the highest index in the string where substring *sub* is\n   found, such that *sub* is contained within ``s[start:end]``.\n   Optional arguments *start* and *end* are interpreted as in slice\n   notation.  Return ``-1`` on failure.\n\nstr.rindex(sub[, start[, end]])\n\n   Like ``rfind()`` but raises ``ValueError`` when the substring *sub*\n   is not found.\n\nstr.rjust(width[, fillchar])\n\n   Return the string right justified in a string of length *width*.\n   Padding is done using the specified *fillchar* (default is a\n   space). The original string is returned if *width* is less than or\n   equal to ``len(s)``.\n\n   Changed in version 2.4: Support for the *fillchar* argument.\n\nstr.rpartition(sep)\n\n   Split the string at the last occurrence of *sep*, and return a\n   3-tuple containing the part before the separator, the separator\n   itself, and the part after the separator.  If the separator is not\n   found, return a 3-tuple containing two empty strings, followed by\n   the string itself.\n\n   New in version 2.5.\n\nstr.rsplit([sep[, maxsplit]])\n\n   Return a list of the words in the string, using *sep* as the\n   delimiter string. If *maxsplit* is given, at most *maxsplit* splits\n   are done, the *rightmost* ones.  If *sep* is not specified or\n   ``None``, any whitespace string is a separator.  Except for\n   splitting from the right, ``rsplit()`` behaves like ``split()``\n   which is described in detail below.\n\n   New in version 2.4.\n\nstr.rstrip([chars])\n\n   Return a copy of the string with trailing characters removed.  The\n   *chars* argument is a string specifying the set of characters to be\n   removed.  If omitted or ``None``, the *chars* argument defaults to\n   removing whitespace.  The *chars* argument is not a suffix; rather,\n   all combinations of its values are stripped:\n\n   >>> \'   spacious   \'.rstrip()\n   \'   spacious\'\n   >>> \'mississippi\'.rstrip(\'ipz\')\n   \'mississ\'\n\n   Changed in version 2.2.2: Support for the *chars* argument.\n\nstr.split([sep[, maxsplit]])\n\n   Return a list of the words in the string, using *sep* as the\n   delimiter string.  If *maxsplit* is given, at most *maxsplit*\n   splits are done (thus, the list will have at most ``maxsplit+1``\n   elements).  If *maxsplit* is not specified or ``-1``, then there is\n   no limit on the number of splits (all possible splits are made).\n\n   If *sep* is given, consecutive delimiters are not grouped together\n   and are deemed to delimit empty strings (for example,\n   ``\'1,,2\'.split(\',\')`` returns ``[\'1\', \'\', \'2\']``).  The *sep*\n   argument may consist of multiple characters (for example,\n   ``\'1<>2<>3\'.split(\'<>\')`` returns ``[\'1\', \'2\', \'3\']``). Splitting\n   an empty string with a specified separator returns ``[\'\']``.\n\n   If *sep* is not specified or is ``None``, a different splitting\n   algorithm is applied: runs of consecutive whitespace are regarded\n   as a single separator, and the result will contain no empty strings\n   at the start or end if the string has leading or trailing\n   whitespace.  Consequently, splitting an empty string or a string\n   consisting of just whitespace with a ``None`` separator returns\n   ``[]``.\n\n   For example, ``\' 1  2   3  \'.split()`` returns ``[\'1\', \'2\', \'3\']``,\n   and ``\'  1  2   3  \'.split(None, 1)`` returns ``[\'1\', \'2   3  \']``.\n\nstr.splitlines([keepends])\n\n   Return a list of the lines in the string, breaking at line\n   boundaries. This method uses the *universal newlines* approach to\n   splitting lines. Line breaks are not included in the resulting list\n   unless *keepends* is given and true.\n\n   For example, ``\'ab c\\n\\nde fg\\rkl\\r\\n\'.splitlines()`` returns\n   ``[\'ab c\', \'\', \'de fg\', \'kl\']``, while the same call with\n   ``splitlines(True)`` returns ``[\'ab c\\n\', \'\\n\', \'de fg\\r\',\n   \'kl\\r\\n\']``.\n\n   Unlike ``split()`` when a delimiter string *sep* is given, this\n   method returns an empty list for the empty string, and a terminal\n   line break does not result in an extra line.\n\nstr.startswith(prefix[, start[, end]])\n\n   Return ``True`` if string starts with the *prefix*, otherwise\n   return ``False``. *prefix* can also be a tuple of prefixes to look\n   for.  With optional *start*, test string beginning at that\n   position.  With optional *end*, stop comparing string at that\n   position.\n\n   Changed in version 2.5: Accept tuples as *prefix*.\n\nstr.strip([chars])\n\n   Return a copy of the string with the leading and trailing\n   characters removed. The *chars* argument is a string specifying the\n   set of characters to be removed. If omitted or ``None``, the\n   *chars* argument defaults to removing whitespace. The *chars*\n   argument is not a prefix or suffix; rather, all combinations of its\n   values are stripped:\n\n   >>> \'   spacious   \'.strip()\n   \'spacious\'\n   >>> \'www.example.com\'.strip(\'cmowz.\')\n   \'example\'\n\n   Changed in version 2.2.2: Support for the *chars* argument.\n\nstr.swapcase()\n\n   Return a copy of the string with uppercase characters converted to\n   lowercase and vice versa.\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.title()\n\n   Return a titlecased version of the string where words start with an\n   uppercase character and the remaining characters are lowercase.\n\n   The algorithm uses a simple language-independent definition of a\n   word as groups of consecutive letters.  The definition works in\n   many contexts but it means that apostrophes in contractions and\n   possessives form word boundaries, which may not be the desired\n   result:\n\n      >>> "they\'re bill\'s friends from the UK".title()\n      "They\'Re Bill\'S Friends From The Uk"\n\n   A workaround for apostrophes can be constructed using regular\n   expressions:\n\n      >>> import re\n      >>> def titlecase(s):\n      ...     return re.sub(r"[A-Za-z]+(\'[A-Za-z]+)?",\n      ...                   lambda mo: mo.group(0)[0].upper() +\n      ...                              mo.group(0)[1:].lower(),\n      ...                   s)\n      ...\n      >>> titlecase("they\'re bill\'s friends.")\n      "They\'re Bill\'s Friends."\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.translate(table[, deletechars])\n\n   Return a copy of the string where all characters occurring in the\n   optional argument *deletechars* are removed, and the remaining\n   characters have been mapped through the given translation table,\n   which must be a string of length 256.\n\n   You can use the ``maketrans()`` helper function in the ``string``\n   module to create a translation table. For string objects, set the\n   *table* argument to ``None`` for translations that only delete\n   characters:\n\n   >>> \'read this short text\'.translate(None, \'aeiou\')\n   \'rd ths shrt txt\'\n\n   New in version 2.6: Support for a ``None`` *table* argument.\n\n   For Unicode objects, the ``translate()`` method does not accept the\n   optional *deletechars* argument.  Instead, it returns a copy of the\n   *s* where all characters have been mapped through the given\n   translation table which must be a mapping of Unicode ordinals to\n   Unicode ordinals, Unicode strings or ``None``. Unmapped characters\n   are left untouched. Characters mapped to ``None`` are deleted.\n   Note, a more flexible approach is to create a custom character\n   mapping codec using the ``codecs`` module (see ``encodings.cp1251``\n   for an example).\n\nstr.upper()\n\n   Return a copy of the string with all the cased characters [4]\n   converted to uppercase.  Note that ``str.upper().isupper()`` might\n   be ``False`` if ``s`` contains uncased characters or if the Unicode\n   category of the resulting character(s) is not "Lu" (Letter,\n   uppercase), but e.g. "Lt" (Letter, titlecase).\n\n   For 8-bit strings, this method is locale-dependent.\n\nstr.zfill(width)\n\n   Return the numeric string left filled with zeros in a string of\n   length *width*.  A sign prefix is handled correctly.  The original\n   string is returned if *width* is less than or equal to ``len(s)``.\n\n   New in version 2.2.2.\n\nThe following methods are present only on unicode objects:\n\nunicode.isnumeric()\n\n   Return ``True`` if there are only numeric characters in S,\n   ``False`` otherwise. Numeric characters include digit characters,\n   and all characters that have the Unicode numeric value property,\n   e.g. U+2155, VULGAR FRACTION ONE FIFTH.\n\nunicode.isdecimal()\n\n   Return ``True`` if there are only decimal characters in S,\n   ``False`` otherwise. Decimal characters include digit characters,\n   and all characters that can be used to form decimal-radix numbers,\n   e.g. U+0660, ARABIC-INDIC DIGIT ZERO.\n\n\nString Formatting Operations\n============================\n\nString and Unicode objects have one unique built-in operation: the\n``%`` operator (modulo).  This is also known as the string\n*formatting* or *interpolation* operator.  Given ``format % values``\n(where *format* is a string or Unicode object), ``%`` conversion\nspecifications in *format* are replaced with zero or more elements of\n*values*.  The effect is similar to the using ``sprintf()`` in the C\nlanguage.  If *format* is a Unicode object, or if any of the objects\nbeing converted using the ``%s`` conversion are Unicode objects, the\nresult will also be a Unicode object.\n\nIf *format* requires a single argument, *values* may be a single non-\ntuple object. [5]  Otherwise, *values* must be a tuple with exactly\nthe number of items specified by the format string, or a single\nmapping object (for example, a dictionary).\n\nA conversion specifier contains two or more characters and has the\nfollowing components, which must occur in this order:\n\n1. The ``\'%\'`` character, which marks the start of the specifier.\n\n2. Mapping key (optional), consisting of a parenthesised sequence of\n   characters (for example, ``(somename)``).\n\n3. Conversion flags (optional), which affect the result of some\n   conversion types.\n\n4. Minimum field width (optional).  If specified as an ``\'*\'``\n   (asterisk), the actual width is read from the next element of the\n   tuple in *values*, and the object to convert comes after the\n   minimum field width and optional precision.\n\n5. Precision (optional), given as a ``\'.\'`` (dot) followed by the\n   precision.  If specified as ``\'*\'`` (an asterisk), the actual width\n   is read from the next element of the tuple in *values*, and the\n   value to convert comes after the precision.\n\n6. Length modifier (optional).\n\n7. Conversion type.\n\nWhen the right argument is a dictionary (or other mapping type), then\nthe formats in the string *must* include a parenthesised mapping key\ninto that dictionary inserted immediately after the ``\'%\'`` character.\nThe mapping key selects the value to be formatted from the mapping.\nFor example:\n\n>>> print \'%(language)s has %(number)03d quote types.\' % \\\n...       {"language": "Python", "number": 2}\nPython has 002 quote types.\n\nIn this case no ``*`` specifiers may occur in a format (since they\nrequire a sequential parameter list).\n\nThe conversion flag characters are:\n\n+-----------+-----------------------------------------------------------------------+\n| Flag      | Meaning                                                               |\n+===========+=======================================================================+\n| ``\'#\'``   | The value conversion will use the "alternate form" (where defined     |\n|           | below).                                                               |\n+-----------+-----------------------------------------------------------------------+\n| ``\'0\'``   | The conversion will be zero padded for numeric values.                |\n+-----------+-----------------------------------------------------------------------+\n| ``\'-\'``   | The converted value is left adjusted (overrides the ``\'0\'``           |\n|           | conversion if both are given).                                        |\n+-----------+-----------------------------------------------------------------------+\n| ``\' \'``   | (a space) A blank should be left before a positive number (or empty   |\n|           | string) produced by a signed conversion.                              |\n+-----------+-----------------------------------------------------------------------+\n| ``\'+\'``   | A sign character (``\'+\'`` or ``\'-\'``) will precede the conversion     |\n|           | (overrides a "space" flag).                                           |\n+-----------+-----------------------------------------------------------------------+\n\nA length modifier (``h``, ``l``, or ``L``) may be present, but is\nignored as it is not necessary for Python -- so e.g. ``%ld`` is\nidentical to ``%d``.\n\nThe conversion types are:\n\n+--------------+-------------------------------------------------------+---------+\n| Conversion   | Meaning                                               | Notes   |\n+==============+=======================================================+=========+\n| ``\'d\'``      | Signed integer decimal.                               |         |\n+--------------+-------------------------------------------------------+---------+\n| ``\'i\'``      | Signed integer decimal.                               |         |\n+--------------+-------------------------------------------------------+---------+\n| ``\'o\'``      | Signed octal value.                                   | (1)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'u\'``      | Obsolete type -- it is identical to ``\'d\'``.          | (7)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'x\'``      | Signed hexadecimal (lowercase).                       | (2)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'X\'``      | Signed hexadecimal (uppercase).                       | (2)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'e\'``      | Floating point exponential format (lowercase).        | (3)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'E\'``      | Floating point exponential format (uppercase).        | (3)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'f\'``      | Floating point decimal format.                        | (3)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'F\'``      | Floating point decimal format.                        | (3)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'g\'``      | Floating point format. Uses lowercase exponential     | (4)     |\n|              | format if exponent is less than -4 or not less than   |         |\n|              | precision, decimal format otherwise.                  |         |\n+--------------+-------------------------------------------------------+---------+\n| ``\'G\'``      | Floating point format. Uses uppercase exponential     | (4)     |\n|              | format if exponent is less than -4 or not less than   |         |\n|              | precision, decimal format otherwise.                  |         |\n+--------------+-------------------------------------------------------+---------+\n| ``\'c\'``      | Single character (accepts integer or single character |         |\n|              | string).                                              |         |\n+--------------+-------------------------------------------------------+---------+\n| ``\'r\'``      | String (converts any Python object using *repr()*).   | (5)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'s\'``      | String (converts any Python object using ``str()``).  | (6)     |\n+--------------+-------------------------------------------------------+---------+\n| ``\'%\'``      | No argument is converted, results in a ``\'%\'``        |         |\n|              | character in the result.                              |         |\n+--------------+-------------------------------------------------------+---------+\n\nNotes:\n\n1. The alternate form causes a leading zero (``\'0\'``) to be inserted\n   between left-hand padding and the formatting of the number if the\n   leading character of the result is not already a zero.\n\n2. The alternate form causes a leading ``\'0x\'`` or ``\'0X\'`` (depending\n   on whether the ``\'x\'`` or ``\'X\'`` format was used) to be inserted\n   between left-hand padding and the formatting of the number if the\n   leading character of the result is not already a zero.\n\n3. The alternate form causes the result to always contain a decimal\n   point, even if no digits follow it.\n\n   The precision determines the number of digits after the decimal\n   point and defaults to 6.\n\n4. The alternate form causes the result to always contain a decimal\n   point, and trailing zeroes are not removed as they would otherwise\n   be.\n\n   The precision determines the number of significant digits before\n   and after the decimal point and defaults to 6.\n\n5. The ``%r`` conversion was added in Python 2.0.\n\n   The precision determines the maximal number of characters used.\n\n6. If the object or format provided is a ``unicode`` string, the\n   resulting string will also be ``unicode``.\n\n   The precision determines the maximal number of characters used.\n\n7. See **PEP 237**.\n\nSince Python strings have an explicit length, ``%s`` conversions do\nnot assume that ``\'\\0\'`` is the end of the string.\n\nChanged in version 2.7: ``%f`` conversions for numbers whose absolute\nvalue is over 1e50 are no longer replaced by ``%g`` conversions.\n\nAdditional string operations are defined in standard modules\n``string`` and ``re``.\n\n\nXRange Type\n===========\n\nThe ``xrange`` type is an immutable sequence which is commonly used\nfor looping.  The advantage of the ``xrange`` type is that an\n``xrange`` object will always take the same amount of memory, no\nmatter the size of the range it represents.  There are no consistent\nperformance advantages.\n\nXRange objects have very little behavior: they only support indexing,\niteration, and the ``len()`` function.\n\n\nMutable Sequence Types\n======================\n\nList and ``bytearray`` objects support additional operations that\nallow in-place modification of the object. Other mutable sequence\ntypes (when added to the language) should also support these\noperations. Strings and tuples are immutable sequence types: such\nobjects cannot be modified once created. The following operations are\ndefined on mutable sequence types (where *x* is an arbitrary object):\n\n+--------------------------------+----------------------------------+-----------------------+\n| Operation                      | Result                           | Notes                 |\n+================================+==================================+=======================+\n| ``s[i] = x``                   | item *i* of *s* is replaced by   |                       |\n|                                | *x*                              |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s[i:j] = t``                 | slice of *s* from *i* to *j* is  |                       |\n|                                | replaced by the contents of the  |                       |\n|                                | iterable *t*                     |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``del s[i:j]``                 | same as ``s[i:j] = []``          |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s[i:j:k] = t``               | the elements of ``s[i:j:k]`` are | (1)                   |\n|                                | replaced by those of *t*         |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``del s[i:j:k]``               | removes the elements of          |                       |\n|                                | ``s[i:j:k]`` from the list       |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.append(x)``                | same as ``s[len(s):len(s)] =     | (2)                   |\n|                                | [x]``                            |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.extend(x)``                | same as ``s[len(s):len(s)] = x`` | (3)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.count(x)``                 | return number of *i*\'s for which |                       |\n|                                | ``s[i] == x``                    |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.index(x[, i[, j]])``       | return smallest *k* such that    | (4)                   |\n|                                | ``s[k] == x`` and ``i <= k < j`` |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.insert(i, x)``             | same as ``s[i:i] = [x]``         | (5)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.pop([i])``                 | same as ``x = s[i]; del s[i];    | (6)                   |\n|                                | return x``                       |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.remove(x)``                | same as ``del s[s.index(x)]``    | (4)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.reverse()``                | reverses the items of *s* in     | (7)                   |\n|                                | place                            |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.sort([cmp[, key[,          | sort the items of *s* in place   | (7)(8)(9)(10)         |\n| reverse]]])``                  |                                  |                       |\n+--------------------------------+----------------------------------+-----------------------+\n\nNotes:\n\n1. *t* must have the same length as the slice it is  replacing.\n\n2. The C implementation of Python has historically accepted multiple\n   parameters and implicitly joined them into a tuple; this no longer\n   works in Python 2.0.  Use of this misfeature has been deprecated\n   since Python 1.4.\n\n3. *x* can be any iterable object.\n\n4. Raises ``ValueError`` when *x* is not found in *s*. When a negative\n   index is passed as the second or third parameter to the ``index()``\n   method, the list length is added, as for slice indices.  If it is\n   still negative, it is truncated to zero, as for slice indices.\n\n   Changed in version 2.3: Previously, ``index()`` didn\'t have\n   arguments for specifying start and stop positions.\n\n5. When a negative index is passed as the first parameter to the\n   ``insert()`` method, the list length is added, as for slice\n   indices.  If it is still negative, it is truncated to zero, as for\n   slice indices.\n\n   Changed in version 2.3: Previously, all negative indices were\n   truncated to zero.\n\n6. The ``pop()`` method\'s optional argument *i* defaults to ``-1``, so\n   that by default the last item is removed and returned.\n\n7. The ``sort()`` and ``reverse()`` methods modify the list in place\n   for economy of space when sorting or reversing a large list.  To\n   remind you that they operate by side effect, they don\'t return the\n   sorted or reversed list.\n\n8. The ``sort()`` method takes optional arguments for controlling the\n   comparisons.\n\n   *cmp* specifies a custom comparison function of two arguments (list\n   items) which should return a negative, zero or positive number\n   depending on whether the first argument is considered smaller than,\n   equal to, or larger than the second argument: ``cmp=lambda x,y:\n   cmp(x.lower(), y.lower())``.  The default value is ``None``.\n\n   *key* specifies a function of one argument that is used to extract\n   a comparison key from each list element: ``key=str.lower``.  The\n   default value is ``None``.\n\n   *reverse* is a boolean value.  If set to ``True``, then the list\n   elements are sorted as if each comparison were reversed.\n\n   In general, the *key* and *reverse* conversion processes are much\n   faster than specifying an equivalent *cmp* function.  This is\n   because *cmp* is called multiple times for each list element while\n   *key* and *reverse* touch each element only once.  Use\n   ``functools.cmp_to_key()`` to convert an old-style *cmp* function\n   to a *key* function.\n\n   Changed in version 2.3: Support for ``None`` as an equivalent to\n   omitting *cmp* was added.\n\n   Changed in version 2.4: Support for *key* and *reverse* was added.\n\n9. Starting with Python 2.3, the ``sort()`` method is guaranteed to be\n   stable.  A sort is stable if it guarantees not to change the\n   relative order of elements that compare equal --- this is helpful\n   for sorting in multiple passes (for example, sort by department,\n   then by salary grade).\n\n10. **CPython implementation detail:** While a list is being sorted,\n    the effect of attempting to mutate, or even inspect, the list is\n    undefined.  The C implementation of Python 2.3 and newer makes the\n    list appear empty for the duration, and raises ``ValueError`` if\n    it can detect that the list has been mutated during a sort.\n',
 'typesseq-mutable': "\nMutable Sequence Types\n**********************\n\nList and ``bytearray`` objects support additional operations that\nallow in-place modification of the object. Other mutable sequence\ntypes (when added to the language) should also support these\noperations. Strings and tuples are immutable sequence types: such\nobjects cannot be modified once created. The following operations are\ndefined on mutable sequence types (where *x* is an arbitrary object):\n\n+--------------------------------+----------------------------------+-----------------------+\n| Operation                      | Result                           | Notes                 |\n+================================+==================================+=======================+\n| ``s[i] = x``                   | item *i* of *s* is replaced by   |                       |\n|                                | *x*                              |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s[i:j] = t``                 | slice of *s* from *i* to *j* is  |                       |\n|                                | replaced by the contents of the  |                       |\n|                                | iterable *t*                     |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``del s[i:j]``                 | same as ``s[i:j] = []``          |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s[i:j:k] = t``               | the elements of ``s[i:j:k]`` are | (1)                   |\n|                                | replaced by those of *t*         |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``del s[i:j:k]``               | removes the elements of          |                       |\n|                                | ``s[i:j:k]`` from the list       |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.append(x)``                | same as ``s[len(s):len(s)] =     | (2)                   |\n|                                | [x]``                            |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.extend(x)``                | same as ``s[len(s):len(s)] = x`` | (3)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.count(x)``                 | return number of *i*'s for which |                       |\n|                                | ``s[i] == x``                    |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.index(x[, i[, j]])``       | return smallest *k* such that    | (4)                   |\n|                                | ``s[k] == x`` and ``i <= k < j`` |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.insert(i, x)``             | same as ``s[i:i] = [x]``         | (5)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.pop([i])``                 | same as ``x = s[i]; del s[i];    | (6)                   |\n|                                | return x``                       |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.remove(x)``                | same as ``del s[s.index(x)]``    | (4)                   |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.reverse()``                | reverses the items of *s* in     | (7)                   |\n|                                | place                            |                       |\n+--------------------------------+----------------------------------+-----------------------+\n| ``s.sort([cmp[, key[,          | sort the items of *s* in place   | (7)(8)(9)(10)         |\n| reverse]]])``                  |                                  |                       |\n+--------------------------------+----------------------------------+-----------------------+\n\nNotes:\n\n1. *t* must have the same length as the slice it is  replacing.\n\n2. The C implementation of Python has historically accepted multiple\n   parameters and implicitly joined them into a tuple; this no longer\n   works in Python 2.0.  Use of this misfeature has been deprecated\n   since Python 1.4.\n\n3. *x* can be any iterable object.\n\n4. Raises ``ValueError`` when *x* is not found in *s*. When a negative\n   index is passed as the second or third parameter to the ``index()``\n   method, the list length is added, as for slice indices.  If it is\n   still negative, it is truncated to zero, as for slice indices.\n\n   Changed in version 2.3: Previously, ``index()`` didn't have\n   arguments for specifying start and stop positions.\n\n5. When a negative index is passed as the first parameter to the\n   ``insert()`` method, the list length is added, as for slice\n   indices.  If it is still negative, it is truncated to zero, as for\n   slice indices.\n\n   Changed in version 2.3: Previously, all negative indices were\n   truncated to zero.\n\n6. The ``pop()`` method's optional argument *i* defaults to ``-1``, so\n   that by default the last item is removed and returned.\n\n7. The ``sort()`` and ``reverse()`` methods modify the list in place\n   for economy of space when sorting or reversing a large list.  To\n   remind you that they operate by side effect, they don't return the\n   sorted or reversed list.\n\n8. The ``sort()`` method takes optional arguments for controlling the\n   comparisons.\n\n   *cmp* specifies a custom comparison function of two arguments (list\n   items) which should return a negative, zero or positive number\n   depending on whether the first argument is considered smaller than,\n   equal to, or larger than the second argument: ``cmp=lambda x,y:\n   cmp(x.lower(), y.lower())``.  The default value is ``None``.\n\n   *key* specifies a function of one argument that is used to extract\n   a comparison key from each list element: ``key=str.lower``.  The\n   default value is ``None``.\n\n   *reverse* is a boolean value.  If set to ``True``, then the list\n   elements are sorted as if each comparison were reversed.\n\n   In general, the *key* and *reverse* conversion processes are much\n   faster than specifying an equivalent *cmp* function.  This is\n   because *cmp* is called multiple times for each list element while\n   *key* and *reverse* touch each element only once.  Use\n   ``functools.cmp_to_key()`` to convert an old-style *cmp* function\n   to a *key* function.\n\n   Changed in version 2.3: Support for ``None`` as an equivalent to\n   omitting *cmp* was added.\n\n   Changed in version 2.4: Support for *key* and *reverse* was added.\n\n9. Starting with Python 2.3, the ``sort()`` method is guaranteed to be\n   stable.  A sort is stable if it guarantees not to change the\n   relative order of elements that compare equal --- this is helpful\n   for sorting in multiple passes (for example, sort by department,\n   then by salary grade).\n\n10. **CPython implementation detail:** While a list is being sorted,\n    the effect of attempting to mutate, or even inspect, the list is\n    undefined.  The C implementation of Python 2.3 and newer makes the\n    list appear empty for the duration, and raises ``ValueError`` if\n    it can detect that the list has been mutated during a sort.\n",
 'unary': '\nUnary arithmetic and bitwise operations\n***************************************\n\nAll unary arithmetic and bitwise operations have the same priority:\n\n   u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr\n\nThe unary ``-`` (minus) operator yields the negation of its numeric\nargument.\n\nThe unary ``+`` (plus) operator yields its numeric argument unchanged.\n\nThe unary ``~`` (invert) operator yields the bitwise inversion of its\nplain or long integer argument.  The bitwise inversion of ``x`` is\ndefined as ``-(x+1)``.  It only applies to integral numbers.\n\nIn all three cases, if the argument does not have the proper type, a\n``TypeError`` exception is raised.\n',
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\random.py
        # lambd: rate lambd = 1/mean
        # ('lambda' is a Python reserved word)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\sqlite3\test\factory.py
        # A custom factory should receive an str argument
        self.con.text_factory = lambda x: x
        row = self.con.execute("select value from test").fetchone()
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\sqlite3\test\types.py
        # override float, make them always return the same number
        sqlite.converters["FLOAT"] = lambda x: 47.2

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\sqlite3\test\types.py
        # and implement two custom ones
        sqlite.converters["BOOL"] = lambda x: bool(int(x))
        sqlite.converters["FOO"] = DeclTypesTests.Foo
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\inspect_fodder2.py
# line 24
oll = lambda m: m

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\inspect_fodder2.py
# line 27
tll = lambda g: g and \
g and \
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\inspect_fodder2.py
# line 32
tlli = lambda d: d and \
    d
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\sortperf.py
            # artificially low.
            L = map(lambda x: --x, L)
        doit(L) # ~sort
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_ast.py
  # Lambda
  "lambda:None",
  # Dict
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_bool.py
        # it's related.
        check = lambda o: self.assertRaises(TypeError, bool, o)
        class Foo(object):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_builtin.py
        # and that the result always goes through __getitem__
        funcs = (None, bool, lambda x: True)
        class tuple2(tuple):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_bytes.py
        # allowed in 2.x
        #self.assertRaises(TypeError, lambda: b.insert(0, b'1'))
        b = bytearray()
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_cmath.py
    # test first and second arguments independently for 2-argument log
    test_functions.append(lambda x : cmath.log(x, 1729. + 0j))
    test_functions.append(lambda x : cmath.log(14.-27j, x))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_compile.py
        # detect duplicate positional and keyword arguments
        self.assertRaises(SyntaxError, eval, 'lambda a,a:0')
        self.assertRaises(SyntaxError, eval, 'lambda a,a=1:0')
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_complex_args.py
    # These functions are tested below as lambdas too.  If you add a
    # function test, also add a similar lambda test.

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_complex_args.py
        # Inner parens are elided, same as: f(x,)
        f = lambda ((x)),: x
        self.check(f, 2, 2)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # delta - date is senseless.
        self.assertRaises(TypeError, lambda: day - a)
        # mixing date and (delta or date) via * or // is senseless
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # mixing date and (delta or date) via * or // is senseless
        self.assertRaises(TypeError, lambda: day * a)
        self.assertRaises(TypeError, lambda: a * day)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # date + date is senseless
        self.assertRaises(TypeError, lambda: a + a)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # delta - datetime is senseless.
        self.assertRaises(TypeError, lambda: day - a)
        # mixing datetime and (delta or datetime) via * or // is senseless
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # mixing datetime and (delta or datetime) via * or // is senseless
        self.assertRaises(TypeError, lambda: day * a)
        self.assertRaises(TypeError, lambda: a * day)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # datetime + datetime is senseless
        self.assertRaises(TypeError, lambda: a + a)

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        self.assertRaises(TypeError, lambda: t4 == t5) # mixed tz-aware & naive
        self.assertRaises(TypeError, lambda: t4 < t5) # mixed tz-aware & naive
        self.assertRaises(TypeError, lambda: t5 < t4) # mixed tz-aware & naive
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        self.assertRaises(TypeError, lambda: t4 < t5) # mixed tz-aware & naive
        self.assertRaises(TypeError, lambda: t5 < t4) # mixed tz-aware & naive

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # Can't mix aware and non-aware.
        self.assertRaises(TypeError, lambda: now - nowaware)
        self.assertRaises(TypeError, lambda: nowaware - now)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_datetime.py
        # And adding datetime's doesn't make sense, aware or not.
        self.assertRaises(TypeError, lambda: now + nowaware)
        self.assertRaises(TypeError, lambda: nowaware + now)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_descr.py
        orig_hash = hash(d) # related to id(d) in platform-dependent ways
        A.__hash__ = lambda self: 42
        self.assertEqual(hash(d), 42)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_descr.py
        # SF 927248: deeply nested wrappers could cause stack overflow
        f = lambda:None
        for i in xrange(1000000):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_dict.py
                # An instance variable __missing__ should have no effect
                self.__missing__ = lambda key: None
        f = F()
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_fileinput.py
            # cannot use openhook and inplace mode
            fi = FileInput(inplace=1, openhook=lambda f,m: None)
            self.fail("FileInput should raise if both inplace "
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_gdbm.py
        # try pass an invalid open flag
        self.assertRaises(gdbm.error, lambda: gdbm.open(filename, 'rx').close())

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_grammar.py
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x for x in [-1, 3, 0L]]
        self.assertEqual(l3(), [0, 1, 0])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_io.py
        self.assertFalse(closed[0])  # flush() called before file closed
        f.flush = lambda: None  # break reference loop

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_itertools.py
        # Check case where inner iterator is not used
        keys = [k for k, g in groupby(s, lambda r:r[0])]
        expectedkeys = set([r[0] for r in s])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_long.py
# add complements & negations
special = special + map(lambda x: ~x, special) + \
                    map(lambda x: -x, special)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_mailbox.py
        # Look up message subpaths in the TOC
        self.assertRaises(KeyError, lambda: self._box._lookup('foo'))
        key0 = self._box.add(self._template % 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_mailbox.py
        # Initialize with invalid argument
        self.assertRaises(TypeError, lambda: self._factory(object()))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_memoryview.py
        # Bounds checking
        self.assertRaises(IndexError, lambda: m[6])
        self.assertRaises(IndexError, lambda: m[-7])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_memoryview.py
        # Type checking
        self.assertRaises(TypeError, lambda: m[None])
        self.assertRaises(TypeError, lambda: m[0.0])
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_memoryview.py
    #ro_type = None
    #rw_type = lambda self, b: array.array('i', map(ord, b))
    #getitem_type = lambda self, b: array.array('i', map(ord, b)).tostring()
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_memoryview.py
    #rw_type = lambda self, b: array.array('i', map(ord, b))
    #getitem_type = lambda self, b: array.array('i', map(ord, b)).tostring()
    #itemsize = array.array('i').itemsize
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_unicode.py
        # the signedness of Py_ssize_t.
        alloc = lambda: u"a" * (sys.maxsize // charwidth * 2)
        self.assertRaises(MemoryError, alloc)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_userdict.py
                # An instance variable __missing__ should have no effect
                self.__missing__ = lambda key: None
                UserDict.UserDict.__init__(self)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Badly formed hex strings.
        badvalue(lambda: uuid.UUID(''))
        badvalue(lambda: uuid.UUID('abc'))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Badly formed bytes.
        badvalue(lambda: uuid.UUID(bytes='abc'))
        badvalue(lambda: uuid.UUID(bytes='\0'*15))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Badly formed bytes_le.
        badvalue(lambda: uuid.UUID(bytes_le='abc'))
        badvalue(lambda: uuid.UUID(bytes_le='\0'*15))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Badly formed fields.
        badvalue(lambda: uuid.UUID(fields=(1,)))
        badvalue(lambda: uuid.UUID(fields=(1, 2, 3, 4, 5)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Field values out of range.
        badvalue(lambda: uuid.UUID(fields=(-1, 0, 0, 0, 0, 0)))
        badvalue(lambda: uuid.UUID(fields=(0x100000000L, 0, 0, 0, 0, 0)))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Version number out of range.
        badvalue(lambda: uuid.UUID('00'*16, version=0))
        badvalue(lambda: uuid.UUID('00'*16, version=6))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Integer value out of range.
        badvalue(lambda: uuid.UUID(int=-1))
        badvalue(lambda: uuid.UUID(int=1<<128L))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_uuid.py
        # Wrong number of arguments (positional).
        badtype(lambda: uuid.UUID())
        badtype(lambda: uuid.UUID(h, b))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_winreg.py
        # Note: DeleteKeyEx is not used here because it is platform dependent
        cke = lambda key, sub_key: CreateKeyEx(key, sub_key, 0, KEY_ALL_ACCESS)
        self._write_test_data(HKEY_CURRENT_USER, cke)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_winreg.py
                # The 64-bit version of the key should not be available yet.
                open_fail = lambda: OpenKey(HKEY_CURRENT_USER,
                                            test_reflect_key_name, 0,
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\test\test_winreg.py
            # 64-bit area, but let's make sure that didn't happen.
            open_fail = lambda: OpenKeyEx(HKEY_CURRENT_USER,
                                          test_reflect_key_name, 0,
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\unittest\test\test_runner.py
        # Use our result object
        runner._makeResult = lambda: result
        runner.run(Test('testFoo'))
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\unittest\test\test_runner.py
        # Use our result object
        runner._makeResult = lambda: result

#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\urllib2.py
        # XXX MD5-sess
        KD = lambda s, d: H("%s:%s" % (s, d))
        return H, KD
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\uuid.py
    # Try getting the MAC addr from arp based on our IP address (Solaris).
    mac = _find_mac('arp', '-an', [ip_addr], lambda i: -1)
    if mac:
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\uuid.py
    # This might work on HP-UX.
    mac = _find_mac('lanscan', '-ai', ['lan0'], lambda i: 0)
    if mac:
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\from_cpython\Lib\xml\sax\saxutils.py
        # destroyed
        buffer.close = lambda: None
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\test\tests\decorators.py
# Test the order that decorators and function defaults get evaluated
@print_when_eval(lambda f: print_when_eval(lambda *args, **kw: print_when_eval(f, "calling function (outer)")(*args, **kw), "calling outer decorator"), "evaluating outer decorator")
@print_when_eval(lambda f: print_when_eval(lambda *args, **kw: print_when_eval(f, "calling function (inner)")(*args, **kw), "calling inner decorator"), "evaluating inner decorator")
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\test\tests\descriptors_double.py
# this should
C.__nonzero__ = lambda x : False
if c:
#########################################################################################
C:\Users\muvva\Desktop\testing\pyston-master\test\tests\eval_test.py
# This works in the global scope but not in the local scope, because o1 is a global:
print eval("[(lambda p1 : p1 + o1)(5) for o1 in range(5)]")
def lambda_func():
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\detailed_example\detailed_example.py
# if the user has issued the "/getImage" command, process the answer
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def msg_image_select(m):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\detailed_example\detailed_example.py
# filter on a specific message
@bot.message_handler(func=lambda message: message.text == "hi")
def command_text_hi(m):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\detailed_example\detailed_example.py
# default handler for every other text
@bot.message_handler(func=lambda message: True, content_types=['text'])
def command_default(m):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\echo_bot.py
# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
def echo_message(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\webhook_examples\webhook_aiohttp_echo_bot.py
# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\webhook_examples\webhook_cherrypy_echo_bot.py
# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\webhook_examples\webhook_cpython_echo_bot.py
# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\examples\webhook_examples\webhook_flask_echo_bot.py
# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def echo_message(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\telebot\__init__.py
        # Handle all sent documents of type 'text/plain'.
        @bot.message_handler(func=lambda message: message.document.mime_type == 'text/plain', content_types=['document'])
        def command_handle_document(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\pyTelegramBotAPI-master\telebot\__init__.py
        # Handle all other commands.
        @bot.message_handler(func=lambda message: True, content_types=['audio', 'video', 'document', 'text', 'location', 'contact', 'sticker'])
        def default_command(message):
#########################################################################################
C:\Users\muvva\Desktop\testing\python-cookbook-master\src\12\launching_a_daemon_process_on_unix\daemon.py
    # Arrange to have the PID file removed on exit/signal
    atexit.register(lambda: os.remove(pidfile))

#########################################################################################
C:\Users\muvva\Desktop\testing\python-cookbook-master\src\12\locking_with_deadlock_avoidance\deadlock.py
    # Sort locks by object identifier
    locks = sorted(locks, key=lambda x: id(x))   

#########################################################################################
C:\Users\muvva\Desktop\testing\python-docs-samples-master\appengine\standard\firebase\firetactoe\appengine_config.py
# versions released after Nov 2016.
os.path.expanduser = lambda path: path

#########################################################################################
C:\Users\muvva\Desktop\testing\python-docs-samples-master\appengine\standard\ndb\transactions\main.py
        # [START sometimes-call]
        inserted = ndb.transaction(lambda:
                                   insert_if_absent_sometimes(note_key, note))
#########################################################################################
C:\Users\muvva\Desktop\testing\python-for-android-master\pythonforandroid\bootstraps\pygame\build\buildlib\jinja2.egg\jinja2\compiler.py
            # scopes can trigger a SyntaxError:
            #   a = 42; b = lambda: a; del a
            self.writeline(' = '.join(to_delete) + ' = missing')
#########################################################################################
C:\Users\muvva\Desktop\testing\python-for-android-master\pythonforandroid\bootstraps\pygame\build\buildlib\jinja2.egg\jinja2\lexer.py
        # shortcuts
        c = lambda x: re.compile(x, re.M | re.S)
        e = re.escape
#########################################################################################
C:\Users\muvva\Desktop\testing\python-for-android-master\pythonforandroid\bootstraps\pygame\build\buildlib\jinja2.egg\jinja2\utils.py
# special singleton representing missing values for the runtime
missing = type('MissingType', (), {'__repr__': lambda x: 'missing'})()

#########################################################################################
C:\Users\muvva\Desktop\testing\Python-master\ciphers\hill_cipher.py
    # take x and return x % len(key_string)
    modulus = numpy.vectorize(lambda x: x % 36)

#########################################################################################
C:\Users\muvva\Desktop\testing\Python-master\random-sentences.py
# prints random sentences
for sentence in list(map(lambda x: random_sentence(), range(0, 20))):
  print(sentence)
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\autopep8.py
PYTHON_SHEBANG_REGEX = re.compile(r'^#!.*\bpython[23]?\b\s*$')
LAMBDA_REGEX = re.compile(r'([\w.]+)\s=\slambda\s*([\(\)\w,\s.]*):')
COMPARE_NEGATIVE_REGEX = re.compile(r'\b(not)\s+([^][)(}{]+)\s+(in|is)\s')
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\astroid\tests\unittest_inference.py
        func(1, 2, 3, 4, 5) #@
        func = lambda a, b, *args: args
        func(1, 2) #@
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\astroid\tests\unittest_inference.py
        func(1, 2, 3) #@
        func = lambda a, b=42, *args: args
        func(1) #@
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\astroid\tests\unittest_scoped_nodes.py
        class Test(object): #@
            lam = lambda self: self
            not_method = lambda xargs: xargs
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pycodestyle.py
             counts['('] <= counts[')'])):    # (annotation)
            lambda_kw = LAMBDA_REGEX.search(line, 0, found)
            if lambda_kw:
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pyflakes\test\harness.py
    skip = lambda why: (lambda func: 'skip')  # not callable
    skipIf = lambda cond, why: (skip(why) if cond else lambda func: func)
else:
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\base.py
        # if the body of the lambda is a call expression with the same
        # argument list as the lambda itself, then the lambda is
        # possibly unnecessary and at least suspicious.
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\base.py
            # judgment cannot be made because there is no way to check
            # that the defaults defined by the lambda are the same as
            # the defaults defined by the function called in the body
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\base.py
            # the defaults defined by the function called in the body
            # of the lambda.
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\base.py
            # The body of the lambda must be a function call expression
            # for the lambda to be unnecessary.
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\base.py
        # check for dangerous default values as arguments
        is_iterable = lambda n: isinstance(n, (astroid.List,
                                               astroid.Set,
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\classes.py
                # class A:
                #     b = property(lambda: self._b)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\format.py
    def _open_lambda(self, tokens, i): # pylint:disable=unused-argument
        self._push_token('lambda', i)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\format.py
            # reduce multiple \n\n\n\n to one \n
            line_ending = reduce(lambda x, y: x + y if x != y else x, line_ending, "")
            line_ending = 'LF' if line_ending == '\n' else 'CRLF'
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\variables.py
            # bar = None
            # foo = lambda bar=bar: bar
            #
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\variables.py
        #    b = 1
        #    c = lambda b=b: b * b
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\variables.py
                        #   class A:
                        #      x = lambda attr: f + attr
                        #      f = 42
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\checkers\variables.py
                                    #      x = 42
                                    #      y = lambda attr=x: attr
                                    self.add_message('used-before-assignment',
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\pyreverse\writer.py
        # sorted to get predictable (hence testable) results
        for i, obj in enumerate(sorted(diagram.modules(), key=lambda x: x.title)):
            self.printer.emit_node(i, label=self.get_title(obj), shape='box')
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\pyreverse\writer.py
        # sorted to get predictable (hence testable) results
        for i, obj in enumerate(sorted(diagram.objects, key=lambda x: x.title)):
            self.printer.emit_node(i, **self.get_values(obj))
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\arguments.py
# Remaining tests are for coverage of correct names in messages.
LAMBDA = lambda arg: 1

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\bad_reversed_sequence.py
    seq = reversed(ThirdBadReversed()) # [bad-reversed-sequence]
    seq = reversed(lambda: None) # [bad-reversed-sequence]
    seq = reversed(deque([]))
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\cellvar_escaping_loop.py
    for i in range(10):  # [unused-variable]
        lst.append(lambda i=i: i)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\class_scope.py
    # +1: [used-before-assignment]
    get_attr_bad = lambda arg=revattr: revattr * 42
    revattr = 24
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\deprecated_lambda.py
# Don't do this, use a comprehension instead.
assert map(lambda x: x*2, [1, 2, 3]) == [2, 4, 6] # [deprecated-lambda]

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\deprecated_lambda.py
# It's still ok to use map and filter with anything but an inline lambda.
double = lambda x: x * 2
assert map(double, [1, 2, 3]) == [2, 4, 6]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\deprecated_lambda.py
# It's also ok to pass lambdas to other functions.
assert functools.reduce(lambda x, y: x * y, [1, 2, 3, 4]) == 24

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\inherit_non_class.py
class Bad1(lambda abc: 42): # [inherit-non-class]
    """ Can't inherit from lambda. """

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\invalid_all_object.py
    1, # [invalid-all-object]
    lambda: None, # [invalid-all-object]
    None, # [invalid-all-object]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\invalid_length_returned.py
    def __len__(self):  # [invalid-length-returned]
        return lambda: 3

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\undefined_variable.py
LMBD = lambda x, y=doesnotexist: x+y  # [undefined-variable]
LMBD2 = lambda x, y: x+z  # [undefined-variable]

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# pylint: disable=undefined-variable
"""test suspicious lambda expressions
"""
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# Some simple examples of the most commonly encountered forms.
# +1: [unnecessary-lambda]
_ = lambda: list()  # replaceable with "list"
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda: list()  # replaceable with "list"
# +1: [unnecessary-lambda]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
_ = lambda: list()  # replaceable with "list"
# +1: [unnecessary-lambda]
_ = lambda x: hash(x)  # replaceable with "hash"
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda x: hash(x)  # replaceable with "hash"
# +1: [unnecessary-lambda]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
_ = lambda x: hash(x)  # replaceable with "hash"
# +1: [unnecessary-lambda]
_ = lambda x, y: min(x, y)  # replaceable with "min"
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda x, y: min(x, y)  # replaceable with "min"

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# A function that can take any arguments given to it.
_ANYARGS = lambda *args, **kwargs: 'completely arbitrary return value'

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# Some more complex forms of unnecessary lambda expressions.
# +1: [unnecessary-lambda]
_ = lambda *args: _ANYARGS(*args)
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda *args: _ANYARGS(*args)
# +1: [unnecessary-lambda]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda **kwargs: _ANYARGS(**kwargs)
# +1: [unnecessary-lambda]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda *args, **kwargs: _ANYARGS(*args, **kwargs)
# +1: [unnecessary-lambda]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# +1: [unnecessary-lambda]
_ = lambda x, y, z, *args, **kwargs: _ANYARGS(x, y, z, *args, **kwargs)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# Lambdas that are *not* unnecessary and should *not* trigger warnings.
_ = lambda x: x
_ = lambda x: x()
#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unnecessary_lambda.py
# Don't warn about this.
_ = lambda: code().analysis()

#########################################################################################
C:\Users\muvva\Desktop\testing\python-mode-master\pymode\libs\pylint\test\functional\unsupported_binary_operation.py
1 / collections # [unsupported-binary-operation]
1 ** (lambda x: x) # [unsupported-binary-operation]
{} * {} # [unsupported-binary-operation]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-patterns-master\patterns\behavioral\iterator.py
# Test the generator
count_to_two = lambda: count_to(2)
count_to_five = lambda: count_to(5)
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\buffer.py
    # Apply transformation.
    new_text = buffer.transform_lines(line_range, lambda l: '    ' * count + l)
    buffer.document = Document(
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\completion\filesystem.py
            # Sort
            filenames = sorted(filenames, key=lambda k: k[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\completion\fuzzy_completer.py
                # Prefer the match, closest to the left, then shortest.
                best = min(matches, key=lambda m: (m.start(), len(m.group(1))))
                fuzzy_matches.append(_FuzzyMatch(len(best.group(1)), best.start(), compl))
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\contrib\completers\system.py
                'double_quoted_filename': (lambda string: string.replace('\\"', '"')),  # XXX: not entirely correct.
                'single_quoted_filename': (lambda string: string.replace("\\'", "'")),
            })
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\filters\cli.py
# Keep the original classnames for backwards compatibility.
HasValidationError = lambda: has_validation_error
HasArg = lambda: has_arg
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\key_binding\bindings\vi.py
        # Rot 13 transformation
        (('g', '?'), Always(), lambda string: codecs.encode(string, 'rot_13')),

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\key_binding\bindings\vi.py
        # To lowercase
        (('g', 'u'), Always(), lambda string: string.lower()),

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\key_binding\bindings\vi.py
        # To uppercase.
        (('g', 'U'), Always(), lambda string: string.upper()),

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\key_binding\bindings\vi.py
        # Swap case.
        (('g', '~'), Always(), lambda string: string.swapcase()),
        (('~', ), Condition(lambda: get_app().vi_state.tilde_operator), lambda string: string.swapcase()),
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\key_binding\key_bindings.py
            # Place bindings that have more 'Any' occurrences in them at the end.
            result = sorted(result, key=lambda item: -item[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\layout\mouse_handlers.py
        # Map (x,y) tuples to handlers.
        self.mouse_handlers = defaultdict(lambda: dummy_callback)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\layout\screen.py
        #: Escape sequences to be injected.
        self.zero_width_escapes = defaultdict(lambda: defaultdict(lambda: ''))

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\layout\screen.py
            # Sort the floats that we have so far by z_index.
            functions = sorted(self._draw_float_functions, key=lambda item: item[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\shortcuts\prompt.py
                # to avoid doing bitwise operations on bool objects.)
            complete_while_typing=Condition(lambda:
                is_true(self.complete_while_typing) and not
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\shortcuts\prompt.py
            # Users can insert processors here.
            DynamicProcessor(lambda: merge_processors(self.input_processors or [])),
        ]
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\widgets\base.py
            # `HTML` object for instance.
            Label(lambda: Template(' {} ').format(self.title),
                  style='class:frame.label',
#########################################################################################
C:\Users\muvva\Desktop\testing\python-prompt-toolkit-master\prompt_toolkit\widgets\dialogs.py
                # Add optional padding around the body.
                Box(body=DynamicContainer(lambda: self.body),
                    padding=D(preferred=1, max=1),
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
# Precompute bit count limits, indexed by error correction level and code size
_data_count = lambda block: block.data_count
BIT_LIMIT_TABLE = [
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 0:   # 000
        return lambda i, j: (i + j) % 2 == 0
    if pattern == 1:   # 001
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 1:   # 001
        return lambda i, j: i % 2 == 0
    if pattern == 2:   # 010
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 2:   # 010
        return lambda i, j: j % 3 == 0
    if pattern == 3:   # 011
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 3:   # 011
        return lambda i, j: (i + j) % 3 == 0
    if pattern == 4:   # 100
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 4:   # 100
        return lambda i, j: (math.floor(i / 2) + math.floor(j / 3)) % 2 == 0
    if pattern == 5:  # 101
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 5:  # 101
        return lambda i, j: (i * j) % 2 + (i * j) % 3 == 0
    if pattern == 6:  # 110
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 6:  # 110
        return lambda i, j: ((i * j) % 2 + (i * j) % 3) % 2 == 0
    if pattern == 7:  # 111
#########################################################################################
C:\Users\muvva\Desktop\testing\python-qrcode-master\qrcode\util.py
    if pattern == 7:  # 111
        return lambda i, j: ((i * j) % 3 + (i + j) % 2) % 2 == 0
    raise TypeError("Bad mask pattern: " + pattern)  # pragma: no cover
#########################################################################################
C:\Users\muvva\Desktop\testing\python-react-master\tests\__init__.py
# Ensure the process is killed on exit
atexit.register(lambda _process: _process.kill(), process)

#########################################################################################
C:\Users\muvva\Desktop\testing\python-social-auth-master\social\tests\backends\open_id.py
# Patch to remove the too-verbose output until a new version is released
oidutil.log = lambda *args, **kwargs: None

#########################################################################################
C:\Users\muvva\Desktop\testing\python-telegram-bot-master\tests\test_persistence.py
        # base_persistence.update_chat_data = lambda x: x
        # base_persistence.update_user_data = lambda x: x
        updater = Updater(bot=bot, persistence=base_persistence, use_context=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\PyTorch-NLP-master\examples\snli\util.py
    # PyTorch RNN requires batches to be transposed for speed and integration with CUDA
    transpose = (lambda b: b.t_().squeeze(0).contiguous())

#########################################################################################
C:\Users\muvva\Desktop\testing\PyTorch-NLP-master\tests\word_to_vector\test_fast_text.py
    # Test cache and `is_include`
    vectors = FastText(language='simple', is_include=lambda w: w == 'the', cache=directory)
    assert 'the' in vectors.stoi
#########################################################################################
C:\Users\muvva\Desktop\testing\PyTorch-NLP-master\torchnlp\text_encoders\subword_text_tokenizer.py
    # No conversion required on Python3
    native_to_unicode = lambda s: s
    unicode_to_native = lambda s: s
#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\abstract.py
      # full names.
      approximate_hash = lambda var: tuple(v.full_name for v in var.data)
      self._hash = hash((self.tuple_length,) +
#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\debug_test.py
    del n4, n6  # make pylint happy
    s = debug.ascii_tree(n1, lambda n: n.outgoing)
    self.assertMultiLineEqual(textwrap.dedent("""\
#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\matcher_test.py
    # of argument and return types.
    f = abstract.NativeFunction("f", lambda x: x, self.vm)
    callable_type = self._convert_type("Callable[[int], int]")
#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\tests\py3\test_functions.py
    # This test gets an unsolvable binding added to the variable containing the
    # lambda by making the call to 'f' trigger a TooComplexError.
    self.Check("""
#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\tools\xref\testdata\function_call.py
# We don't index this, but it shouldn't crash.
z = (lambda x: x)(1)

#########################################################################################
C:\Users\muvva\Desktop\testing\pytype-master\pytype\tools\xref\testdata\function_call.py
#- @bar defines/binding VarBar
bar = lambda x: x
# We don't generate ref/call here.
#########################################################################################
C:\Users\muvva\Desktop\testing\pyvim-master\pyvim\editor.py
#            get_title=lambda: get_terminal_title(self),
            style=DynamicStyle(lambda: self.current_style),
            paste_mode=Condition(lambda: self.paste_mode),
#########################################################################################
C:\Users\muvva\Desktop\testing\pyvmomi-master\pyVmomi\VmomiSupport.py
         # curried methods will receive 'self' *after* any fixed arguments
         return lambda *args, **kwargs: \
                           self.f(*(self.args + (obj,) + args), **kwargs)
#########################################################################################
C:\Users\muvva\Desktop\testing\pywinauto-master\pywinauto\fuzzydict.py
        # short wrapper around some super (OrderedDict) methods
        self._dict_contains = lambda key: \
            super(FuzzyDict, self).__contains__(key)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyzmq-master\zmq\eventloop\zmqstream.py
            # noop callback
            self.on_send(lambda *args: None)
        self._add_io_state(zmq.POLLOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\pyzmq-master\zmq\eventloop\zmqstream.py
            # explicitly schedule handling to avoid missing events due to edge-triggered FDs
            self.io_loop.add_callback(lambda : self._handle_events(self.socket, 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyzmq-master\zmq\tests\test_auth.py
        # test custom user-id map
        self.auth.curve_user_id = lambda client_key: u'custom'

#########################################################################################
C:\Users\muvva\Desktop\testing\pyzmq-master\zmq\_future.py
        # Don't let the Future sit in _recv_events after it's done
        f.add_done_callback(lambda f: self._remove_finished_future(f, self._recv_futures))

#########################################################################################
C:\Users\muvva\Desktop\testing\pyzmq-master\zmq\_future.py
        # Don't let the Future sit in _send_futures after it's done
        f.add_done_callback(lambda f: self._remove_finished_future(f, self._send_futures))

#########################################################################################
C:\Users\muvva\Desktop\testing\qtile-master\libqtile\widget\khal_calendar.py
        # get rid of any garbage in appointment added by khal
        data = ''.join(filter(lambda x: x in string.printable, data))
        # colorize the event if it is within reminder time
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\browser\downloads.py
        #
        #   [_init_reply -> <single shot timer> ->] <lambda in _init_reply> ->
        #   self.error.emit()
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\browser\webkit\network\networkreply.py
#
# For some reason, a segfault will be triggered if the unnecessary lambdas in
# this file aren't there.
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\browser\webkit\network\networkreply.py
# this file aren't there.
# pylint: disable=unnecessary-lambda

#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\browser\webkit\network\networkreply.py
        # there.
        # pylint: disable=unnecessary-lambda
        QTimer.singleShot(0, lambda: self.metaDataChanged.emit())
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\browser\webkit\network\networkreply.py
        # pylint: disable=unnecessary-lambda
        QTimer.singleShot(0, lambda: self.metaDataChanged.emit())
        QTimer.singleShot(0, lambda: self.readyRead.emit())
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\qutebrowser\utils\jinja.py
        # for up-to-date.
        return source, path, lambda: True

#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\end2end\fixtures\quteprocess.py
# Translate ... to ellipsis in YAML.
YamlLoader.add_constructor('!ellipsis', lambda loader, node: ...)
YamlLoader.add_implicit_resolver('!ellipsis', re.compile(r'\.\.\.'), None)
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\unit\browser\webkit\test_downloads.py
    # Don't try to start a timer outside of a QThread
    manager._update_timer.isActive = lambda: True

#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\unit\browser\webkit\test_downloads.py
    # Abstract methods
    item._ensure_can_set_filename = lambda *args: True
    item._after_set_filename = lambda *args: True
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\unit\scripts\test_dictcli.py
    # given
    monkeypatch.setattr(spell, 'dictionary_dir', lambda: str(tmpdir))
    monkeypatch.setattr(
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\unit\scripts\test_dictcli.py
    # given
    monkeypatch.setattr(spell, 'dictionary_dir', lambda: str(tmpdir))
    monkeypatch.setattr(
#########################################################################################
C:\Users\muvva\Desktop\testing\qutebrowser-master\tests\unit\scripts\test_dictcli.py
    # given
    monkeypatch.setattr(spell, 'dictionary_dir', lambda: str(tmpdir))
    monkeypatch.setattr(
#########################################################################################
C:\Users\muvva\Desktop\testing\rainbowstream-master\rainbowstream\rainbow.py
    # Handle Ctrl C
    ctrl_c_handler = lambda signum, frame: quit()
    signal.signal(signal.SIGINT, ctrl_c_handler)
#########################################################################################
C:\Users\muvva\Desktop\testing\rainbowstream-master\rainbowstream\rainbow.py
            # Redefine decorated_name
            g['decorated_name'] = lambda x: color_func(
                c['DECORATED_NAME'])(
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\conf\remote.py
    # AWS Lambda
    # https://alestic.com/2014/11/aws-lambda-environment/
    if 'LAMBDA_TASK_ROOT' in os.environ:
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
    # introspection support:
    __members__ = property(lambda x: x.__dir__())

#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
    # about this (especially in equality tests)
    __class__ = property(lambda x: get_client().__class__)

#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
        __cmp__ = lambda x, o: cmp(get_client(), o)  # NOQA
    __hash__ = lambda x: hash(get_client())
    # attributes are currently not callable
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
    # attributes are currently not callable
    # __call__ = lambda x, *a, **kw: get_client()(*a, **kw)
    __nonzero__ = lambda x: bool(get_client())
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
    # __call__ = lambda x, *a, **kw: get_client()(*a, **kw)
    __nonzero__ = lambda x: bool(get_client())
    __len__ = lambda x: len(get_client())
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
        __long__ = lambda x: long(get_client())  # NOQA
    __float__ = lambda x: float(get_client())
    __str__ = lambda x: binary_type(get_client())
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\models.py
        # try:
        #     ga = lambda x, d=None: getattr(settings, 'SENTRY_%s' % x, d)
        #     options = getattr(settings, 'RAVEN_CONFIG', {})
#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\resolver.py
        # rather than parsing tokens
        result = self._optional_group_matcher.sub(lambda m: '%s' % m.group(1), pattern)

#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\resolver.py
        # handle named groups first
        result = self._named_group_matcher.sub(lambda m: '{%s}' % m.group(1), result)

#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\django\resolver.py
        # handle optional params
        result = self._either_option_matcher.sub(lambda m: m.group(1), result)

#########################################################################################
C:\Users\muvva\Desktop\testing\raven-python-master\raven\contrib\flask.py
            # HACK: catch the attribute error thrown by flask-login is not attached
            # >   current_user = LocalProxy(lambda: _request_ctx_stack.top.user)
            # E   AttributeError: 'RequestContext' object has no attribute 'user'
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\commands.py
        # Disable restoration during test_app requests
        test_app.pre_request_hook = lambda self: \
            paste.registry.restorer.restoration_end()
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\app_globals.py
            # we need to do this for other thrift-generated objects
            ActivityInfo.cache_key = lambda self, style: repr(self)

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\contrib\rcssmin.py
            fn_close,                           # }
            lambda g: g(11),                    # string
            lambda g: 'url(%s)' % uri_space_sub(uri_space_subber, g(12)),
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\contrib\rcssmin.py
            lambda g: g(11),                    # string
            lambda g: 'url(%s)' % uri_space_sub(uri_space_subber, g(12)),
                                                # url(...)
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\contrib\rcssmin.py
                                                # needed for IE6)
            lambda g: nl_unesc_sub('', g(18)),  # nl_string
            lambda g: post_esc_sub(' ', g(19)), # escape
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\contrib\rcssmin.py
            lambda g: nl_unesc_sub('', g(18)),  # nl_string
            lambda g: post_esc_sub(' ', g(19)), # escape
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\db\queries.py
            # and sort the result
            data = filter(lambda x: x[0] not in new_fnames, data)
            data.extend(item_tuples)
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\db\tdb_sql.py
    #sort the prefixes so the longest come first
    prefixes.sort(key = lambda x: len(x))
    cols = []
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\filters.py
        # Convert down to ascii replacing special characters with hex
        aid = str(title_re.sub(lambda c: '.%X' % ord(c.group()), aid))
        
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\inventory.py
    # deleted
    campaigns = filter(lambda camp: not camp._deleted, campaigns)

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\inventory.py
    # calculate inventory for each target and location on each date
    datekey = lambda dt: dt.strftime('%m/%d/%Y') if datestr else dt

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\menus.py
            # pick the button with the most restrictive pathing
            maybe_selected.sort(lambda x, y:
                                len(y.bare_path) - len(x.bare_path))
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\mr_top.py
    # the final result before it's written out
    mr_tools.mr_reduce_max_per_key(lambda x: map(float, x[:-1]), num=1000,
                                   fd = fd)
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\nymph.py
    # Sort images by filename to group the layout by names when possible.
    return sorted(images.values(), key=lambda i: i.filenames[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\nymph.py
    # lay out the remaining images -- done with a greedy algorithm
    small_images.sort(key=lambda i: i.height, reverse=True)
    bins = []
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\organic.py
    #only use links from reddits that you're subscribed to
    link_names = filter(lambda n: sr_count[n][1] in sr_ids, sr_count.keys())
    link_names.sort(key = lambda n: sr_count[n][0])
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\pages\pages.py
            # sort the default subreddits by "popularity" descending
            defaults = sorted(defaults, key=lambda sr: sr._downs, reverse=True)
            self._pop_reddits = defaults
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\promote.py
    # filter out freebies
    campaigns = filter(lambda camp: camp.trans_id > NO_TRANSACTION, q)

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\promote.py
    # check that traffic is up to date
    earliest_campaign = min(campaigns, key=lambda camp: camp.start_date)
    start, end = get_total_run(earliest_campaign)
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\rising.py
    # return rising sorted by score
    return sorted(rising, key=lambda x: x[1], reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\lib\validator\validator.py
        # the select is disabled
        country, region, metro = map(lambda val: None if val == "null" else val,
                                     [country, region, metro])
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\models\bidding.py
#    def for_transactions(cls, transids):
#        transids = filter(lambda x: x != 0, transids)
#        if transids:
#########################################################################################
C:\Users\muvva\Desktop\testing\reddit-master\r2\r2\models\modaction.py
            # make wrapped users for targets that are accounts
            user_targets = filter(lambda target: isinstance(target, Account),
                                  targets.values())
#########################################################################################
C:\Users\muvva\Desktop\testing\redis-py-master\redis\client.py
    # the properly native Python value.
    f = [lambda x: x]
    f += [cast[o] for o in ['withdist', 'withhash', 'withcoord'] if options[o]]
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter04\car_rental.py
# Probability for poisson distribution
# @lam: lambda should be less than 10 for this function
poisson_cache = dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\mountain_car.py
# @activeTiles: current active tile indices
# @lam: lambda
# @return: new trace for convenience
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\mountain_car.py
# @activeTiles: current active tile indices
# @lam: lambda
# @return: new trace for convenience
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\mountain_car.py
# @activeTiles: current active tile indices
# @lam: lambda
# @clearingTiles: tiles to be cleared
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\mountain_car.py
# @activeTiles: current active tile indices
# @lam: lambda
# @alpha: step size for all tiles
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\random_walk.py
    # get the lambda-return from the given time
    def lambda_return_from_time(self, time):
        returns = 0.0
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\random_walk.py
# @runs: specify the number of independent runs
# @lambdas: a series of different lambda values
# @alphas: sequences of step size for each lambda
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\random_walk.py
# @lambdas: a series of different lambda values
# @alphas: sequences of step size for each lambda
def parameter_sweep(value_function_generator, runs, lambdas, alphas):
#########################################################################################
C:\Users\muvva\Desktop\testing\reinforcement-learning-an-introduction-master\chapter12\random_walk.py
# @alphas: sequences of step size for each lambda
def parameter_sweep(value_function_generator, runs, lambdas, alphas):
    # play for 10 episodes for each run
#########################################################################################
C:\Users\muvva\Desktop\testing\remi-master\editor\editor_widgets.py
        #constructor = '%s(%s)'%(self.widgetClass.__name__, ','.join(map(lambda v: str(v), param_values)))
        constructor = '(%s)'%(','.join(map(lambda v: str(v), param_for_constructor)))
        #here we create and decorate the widget
#########################################################################################
C:\Users\muvva\Desktop\testing\requests-master\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\requests-master\requests\utils.py
    # to keep a consistent behaviour with other http projects (curl, wget).
    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())

#########################################################################################
C:\Users\muvva\Desktop\testing\retrying-master\retrying.py
        # wait behavior
        wait_funcs = [lambda *args, **kwargs: 0]
        if wait_fixed is not None:
#########################################################################################
C:\Users\muvva\Desktop\testing\riko-master\riko\bado\sux.py
        # replace saveMark with a nested scope function
        saveMark = lambda: (lineno, colno)
        self.saveMark, _saveMark = saveMark, self.saveMark
#########################################################################################
C:\Users\muvva\Desktop\testing\riko-master\riko\modules\geolocate.py
#         >>> def run(reactor):
#         ...     callback = lambda x: print(next(x)['geolocate']['country'])
#         ...     conf = {'type': 'currency'}
#########################################################################################
C:\Users\muvva\Desktop\testing\robotframework-master\src\robot\running\outputcapture.py
        # http://bugs.python.org/issue6333
        stream.write = lambda s: None
        stream.flush = lambda: None
#########################################################################################
C:\Users\muvva\Desktop\testing\rtv-master\tests\conftest.py
    # always made the same way
    term.addch = lambda window, *args: window.addch(*args)
    return term
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\examples\konamicode\konamicode.py
            # 1. stream of keycodes
            ops.map(lambda obj: obj["keycode"]),
            # 2. stream of windows (10 ints long)
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\examples\konamicode\konamicode.py
            # 3. stream of booleans, True or False
            ops.flat_map(lambda win: win.pipe(ops.sequence_equal(codes))),
            # 4. stream of Trues
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\examples\konamicode\konamicode.py
            # 4. stream of Trues
            ops.filter(lambda equal: equal)
        )
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\examples\konamicode\konamicode.py
        # 4. we then subscribe to the Trues, and signal Konami! if we see any
        query.subscribe(lambda x: self.write_message("Konami!"))

#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\rx\operators\__init__.py
        # with mapper only
        >>> res = source.delay_with_mapper(lambda x: Scheduler.timer(5.0))
        # with delay and mapper
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\rx\operators\__init__.py
        # with delay and mapper
        >>> res = source.delay_with_mapper(rx.timer(2.0), lambda x: rx.timer(x))

#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\tests\test_observable\test_repeat.py
        # scheduler4 = TestScheduler()
        # xss = Observable.create(lambda o: _raise('ex')).repeat()
        # with self.assertRaises(RxException):
#########################################################################################
C:\Users\muvva\Desktop\testing\RxPY-master\tests\test_observable\test_repeat.py
        # zs = rx.return_value(1).repeat(100)
        # d = zs.subscribe(on_completed=lambda: _raise('ex3'), scheduler=scheduler3)

#########################################################################################
C:\Users\muvva\Desktop\testing\schema-master\schema.py
                # Evaluate dictionaries last
                data_items = sorted(data.items(), key=lambda value: isinstance(value[1], dict))
                for key, value in data_items:
#########################################################################################
C:\Users\muvva\Desktop\testing\schema-master\test_schema.py
    # Can't determine the type, it will not be checked
    s = Schema({"test": And(str, lambda x: len(x) < 5)})
    assert s.json_schema("my-id") == {
#########################################################################################
C:\Users\muvva\Desktop\testing\scholar.py-master\scholar.py
    unicode = str # pylint: disable-msg=W0622
    encode = lambda s: unicode(s) # pylint: disable-msg=C0103
else:
#########################################################################################
C:\Users\muvva\Desktop\testing\scholar.py-master\scholar.py
        # Get items sorted in specified order:
        items = sorted(list(self.attrs.values()), key=lambda item: item[2])
        # Find largest label length:
#########################################################################################
C:\Users\muvva\Desktop\testing\scholar.py-master\scholar.py
        # Get items sorted in specified order:
        items = sorted(list(querier.query.attrs.values()), key=lambda item: item[2])
        # Find largest label length:
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\doc\examples\segmentation\plot_chan_vese.py
# Feel free to play around with the parameters to see how they impact the result
cv = chan_vese(image, mu=0.25, lambda1=1, lambda2=1, tol=1e-3, max_iter=200,
               dt=0.5, init_level_set="checkerboard", extended_output=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\external\tifffile\tifffile.py
        # the entries in an IFD must be sorted in ascending order by tag code
        tags = sorted(tags, key=lambda x: x[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\external\tifffile\tifffile.py
    # TODO: pythonize this
    ord_ = ord if sys.version_info[0] < 3 else lambda x: x
    i = len(string)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\external\tifffile\tifffile.py
    'H': 'lifetime',  # histogram
    'E': 'lambda',  # excitation wavelength
    'L': 'exposure',  # lux
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\feature\peak.py
    # in Hough space cannot be arbitrarily suppressed by smaller neighbors
    props = sorted(props, key=lambda x: x.max_intensity)[::-1]
    coords = np.array([np.round(p.centroid) for p in props], dtype=int)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # Calculate (sorted) eigenvalues
        lamba1, *lambdas = compute_hessian_eigenvalues(image, sigma,
                                                       sorting='val')
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # Compute tubeness, see  equation (9) in reference [1]_.
        # np.abs(lambda2) in 2D, np.sqrt(np.abs(lambda2 * lambda3)) in 3D
        filtered = np.abs(np.multiply.reduce(lambdas)) ** (1/len(lambdas))
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # np.abs(lambda2) in 2D, np.sqrt(np.abs(lambda2 * lambda3)) in 3D
        filtered = np.abs(np.multiply.reduce(lambdas)) ** (1/len(lambdas))

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # Remove background and store results in (n+1)D matrices
        filtered_array[i] = np.where(lambdas[-1] > 0, filtered, 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # Calculate (abs sorted) eigenvalues
        lambda1, *lambdas = compute_hessian_eigenvalues(image, sigma,
                                                        sorting='abs')
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # see equations (11) and (15) in reference [1]_
        r_a = np.inf if ndim == 2 else _divide_nonzero(*lambdas) ** 2

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # see equations (10) and (15) in reference [1]_,
        # np.abs(lambda2) in 2D, np.sqrt(np.abs(lambda2 * lambda3)) in 3D
        filtered_raw = np.abs(np.multiply.reduce(lambdas)) ** (1/len(lambdas))
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # np.abs(lambda2) in 2D, np.sqrt(np.abs(lambda2 * lambda3)) in 3D
        filtered_raw = np.abs(np.multiply.reduce(lambdas)) ** (1/len(lambdas))
        r_b = _divide_nonzero(lambda1, filtered_raw) ** 2
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
        # see equation (12)in reference [1]_
        r_g = sum([lambda1 ** 2] + [lambdai ** 2 for lambdai in lambdas])

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\filters\ridges.py
    # Remove background
    filtered_array[lambdas_array > 0] = 0

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\measure\tests\test_marching_cubes.py
    # Sort vertices within each triangle
    triang1 = [np.concatenate(sorted(t, key=lambda x:tuple(x)))
               for t in triangles1]
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-image-master\skimage\segmentation\_chan_vese.py
        # Calculate new level set
        phi = _cv_calculate_variation(image, phi, mu, lambda1, lambda2, dt)
        phi = _cv_reset_level_set(phi)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\doc\tutorial\machine_learning_map\parse_path.py
    nonnegativeNumber #ry
).setParseAction(lambda t: tuple(t))

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\doc\tutorial\machine_learning_map\pyparsing.py
            xmlcharref = Regex(r'&#\d+;')
            xmlcharref.setParseAction(lambda t: '\\u' + hex(int(t[0][2:-1]))[2:])
            return xmlcharref.transformString(ret)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\doc\tutorial\machine_learning_map\pyparsing.py
    #~ if func in singleArgBuiltins:
        #~ return lambda s,l,t: func(t)
    #~ limit = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\doc\tutorial\machine_learning_map\pyparsing.py
            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\doc\tutorial\machine_learning_map\pyparsing.py
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\examples\cluster\plot_digits_linkage.py
    # super-linear in n_samples
    shift = lambda x: ndimage.shift(x.reshape((8, 8)),
                                  .3 * np.random.normal(size=2),
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\examples\ensemble\plot_gradient_boosting_oob.py
# color brew for the three curves
oob_color = list(map(lambda x: x / 256.0, (190, 174, 212)))
test_color = list(map(lambda x: x / 256.0, (127, 201, 127)))
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\examples\linear_model\plot_ard.py
# Create weights with a precision lambda_ of 4.
lambda_ = 4.
w = np.zeros(n_features)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\examples\linear_model\plot_bayesian_ridge.py
X = np.random.randn(n_samples, n_features)  # Create Gaussian data
# Create weights with a precision lambda_ of 4.
lambda_ = 4.
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\examples\linear_model\plot_bayesian_ridge.py
# Create weights with a precision lambda_ of 4.
lambda_ = 4.
w = np.zeros(n_features)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\compose\tests\test_column_transformer.py
        # callable that returns any of the allowed specifiers
        ct = ColumnTransformer([('trans', Trans(), lambda x: selection)],
                               remainder='drop')
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\compose\tests\test_column_transformer.py
        # callable that returns any of the allowed specifiers
        ct = ColumnTransformer([('trans', Trans(), lambda X: selection)],
                               remainder='drop')
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\compose\tests\test_target.py
    # array.
    transformer = FunctionTransformer(func=lambda x: x + 1,
                                      inverse_func=lambda x: x - 1,
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\decomposition\kernel_pca.py
        # sort eigenvectors in descending order
        indices = self.lambdas_.argsort()[::-1]
        self.lambdas_ = self.lambdas_[indices]
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\decomposition\kernel_pca.py
        # We COULD scale them here:
        #       self.alphas_ = self.alphas_ / np.sqrt(self.lambdas_)
        #
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\decomposition\kernel_pca.py
            # no need to use the kernel to transform X, use shortcut expression
            X_transformed = self.alphas_ * np.sqrt(self.lambdas_)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\decomposition\kernel_pca.py
        # no need to use the kernel to transform X, use shortcut expression
        X_transformed = self.alphas_ * np.sqrt(self.lambdas_)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\decomposition\kernel_pca.py
        # scale eigenvectors (properly account for null-space for dot product)
        non_zeros = np.flatnonzero(self.lambdas_)
        scaled_alphas = np.zeros_like(self.alphas_)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\ensemble\tests\test_gradient_boosting.py
    # test raise ValueError if not fitted
    assert_raises(ValueError, lambda X: np.fromiter(
        clf.staged_predict(X), dtype=np.float64), X_test)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\ensemble\tests\test_gradient_boosting.py
    # test raise NotFittedError if not fitted
    assert_raises(NotFittedError, lambda X: np.fromiter(
        clf.staged_predict_proba(X), dtype=np.float64), X_test)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\ensemble\tests\test_gradient_boosting_loss_functions.py
    # check if same results as alternative definition of deviance (from ESLII)
    alt_dev = lambda y, pred: np.mean(np.logaddexp(0.0, -2.0 *
                                                   (2.0 * y - 1) * pred))
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\ensemble\tests\test_gradient_boosting_loss_functions.py
    # check the gradient against the
    alt_ng = lambda y, pred: (2 * y - 1) / (1 + np.exp(2 * (2 * y - 1) * pred))
    for datum in test_data:
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\externals\joblib\externals\cloudpickle\cloudpickle.py
        # reference (as is done in default pickler), via save_function_tuple.
        if (islambda(obj)
                or getattr(obj.__code__, 'co_filename', None) == '<stdin>'
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\externals\joblib\parallel.py
        # functions that are defined in the __main__ module, functions that are
        # defined locally (inside another function) and lambda expressions.
        self._pickle_cache = dict()
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\feature_extraction\text.py
        # `compose` function that would have allowed us to chain a dynamic
        # number of functions. However the cost of a lambda call is a few
        # hundreds of nanoseconds which is negligible when compared to the
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\feature_extraction\text.py
        # cost of tokenizing a string of 1000 chars for instance.
        noop = lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\gaussian_process\gpc.py
# b = logistic(x)
# A = (erf(np.dot(x, self.lambdas)) + 1) / 2
# coefs = lstsq(A, b)[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\isotonic.py
            # single y, constant prediction
            self.f_ = lambda x: y.repeat(x.shape)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\bayes.py
        # posterior covariance is given by
        # sigma = (lambda_ * np.eye(n_features) + alpha_ * np.dot(X.T, X))^-1
        if n_samples > n_features:
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\bayes.py
        # Launch the convergence loop
        keep_lambda = np.ones(n_features, dtype=bool)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\bayes.py
        # Compute sigma and mu (using Woodbury matrix identity)
        def update_sigma(X, alpha_, lambda_, keep_lambda, n_samples):
            sigma_ = pinvh(np.eye(n_samples) / alpha_ +
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\bayes.py
            # Prune the weights with a precision over a threshold
            keep_lambda = lambda_ < self.threshold_lambda
            coef_[~keep_lambda] = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\bayes.py
        # update sigma and mu using updated parameters from the last iteration
        sigma_ = update_sigma(X, alpha_, lambda_, keep_lambda, n_samples)
        coef_ = update_coeff(X, y, coef_, alpha_, keep_lambda, sigma_)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\tests\test_bayes.py
    # compute score using formula of docstring
    score = lambda_1 * log(lambda_) - lambda_2 * lambda_
    score += alpha_1 * log(alpha_) - alpha_2 * alpha_
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\tests\test_bayes.py
    # A Ridge regression model using an alpha value equal to the ratio of
    # lambda_ and alpha_ from the Bayesian Ridge model must be identical
    br_model = BayesianRidge(compute_score=True).fit(X, y)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\tests\test_bayes.py
    # A Ridge regression model using an alpha value equal to the ratio of
    # lambda_ and alpha_ from the Bayesian Ridge model must be identical
    br_model = BayesianRidge(compute_score=True).fit(X, y, sample_weight=w)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\linear_model\tests\test_ridge.py
    # check that we get same best alpha with custom score_func
    func = lambda x, y: -mean_squared_error(x, y)
    scoring = make_scorer(func)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\metrics\tests\test_common.py
    # Test _average_binary_score for weight.sum() == 0
    binary_metric = (lambda y_true, y_score, average="macro":
                     _average_binary_score(
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\metrics\tests\test_pairwise.py
    # be left uncalculated and set to 0.
    assert_equal(pairwise_distances([[1.]], metric=lambda x, y: 5)[0, 0], 5)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\metrics\tests\test_score_objects.py
    # Sanity check on the make_scorer factory function.
    f = lambda *args: 0
    assert_raises(ValueError, make_scorer, f, needs_threshold=True,
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\model_selection\tests\test_validation.py
    # test with X and y as list
    list_check = lambda x: isinstance(x, list)
    clf = CheckingClassifier(check_X=list_check)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\model_selection\tests\test_validation.py
    # test with callable
    svm = SVC(gamma='scale', kernel=lambda x, y: np.dot(x, y.T))
    score_callable = cross_val_score(svm, X, y)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\model_selection\tests\test_validation.py
    # test with X and y as list
    list_check = lambda x: isinstance(x, list)
    clf = CheckingClassifier(check_X=list_check)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\preprocessing\data.py
        with np.errstate(invalid='ignore'):  # hide NaN warnings
            self.lambdas_ = np.array([optim_function(col) for col in X.T])

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\preprocessing\tests\test_data.py
    # Test the lambda = 0 case
    pt.lambdas_ = np.array([0])
    X_trans = pt.transform(X)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\preprocessing\tests\test_data.py
    # Test the optimization procedure:
    # - set a predefined value for lambda
    # - apply inverse_transform to a normal dist (we get X_inv)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\svm\tests\test_sparse.py
    # meaning that everything works fine.
    a = svm.SVC(gamma='scale', C=1, kernel=lambda x, y: x * y.T,
                probability=True, random_state=0)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\svm\tests\test_svm.py
    # Bad kernel
    clf = svm.SVR(gamma='scale', kernel=lambda x, y: np.array([[1.0]]))
    clf.fit(X, y)
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\svm\tests\test_svm.py
    # as with built-in linear kernel
    svm_callable = svm.SVC(gamma='scale', kernel=lambda x, y: np.dot(x, y.T),
                           probability=True, random_state=0,
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\tests\test_multiclass.py
    # lambda is needed because we don't want coef_ to be evaluated right away
    assert_raises(ValueError, lambda x: ovr.coef_, None)

#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-learn-master\sklearn\utils\metaestimators.py
        # lambda, but not partial, allows help() to work with update_wrapper
        out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)
        # update the docstring of the returned function
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-optimize-master\skopt\utils.py
            # List of the dimensions that are incorrectly typed.
            err_dims = list(filter(lambda dim: not isinstance(dim, Dimension),
                                   dimensions))
#########################################################################################
C:\Users\muvva\Desktop\testing\scikit-optimize-master\skopt\utils.py
            # List of the dimensions that have no names.
            err_dims = list(filter(lambda dim: dim.name is None, dimensions))

#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug.py
             np.tanh, # Contracting map
             lambda x: x**3 + 1e-4*x, # Almost null gradient at the root
             lambda x: x+np.sin(2*x), # Non monotonous function
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug.py
             lambda x: x**3 + 1e-4*x, # Almost null gradient at the root
             lambda x: x+np.sin(2*x), # Non monotonous function
             lambda x: 1.1*x+np.sin(4*x), # Fonction with several local maxima
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug.py
             lambda x: x+np.sin(2*x), # Non monotonous function
             lambda x: 1.1*x+np.sin(4*x), # Fonction with several local maxima
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug_solution.py
             np.tanh, # Contracting map
             lambda x: x**3 + 1e-4*x, # Almost null gradient at the root
             lambda x: x+np.sin(2*x), # Non monotonous function
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug_solution.py
             lambda x: x**3 + 1e-4*x, # Almost null gradient at the root
             lambda x: x+np.sin(2*x), # Non monotonous function
             lambda x: 1.1*x+np.sin(4*x), # Fonction with several local maxima
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\advanced\debugging\to_debug_solution.py
             lambda x: x+np.sin(2*x), # Non monotonous function
             lambda x: 1.1*x+np.sin(4*x), # Fonction with several local maxima
            )
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\intro\solutions\pi_wallis.py
###############################################################################
# Solution in a single line using more adcanved constructs (reduce, lambda,
# list comprehensions
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\intro\solutions\pi_wallis.py
# list comprehensions
print(2 * reduce(lambda x, y: x * y,
                 [float((4 * (i ** 2))) / ((4 * (i ** 2)) - 1)
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\packages\scikit-learn\examples\plot_iris_scatter.py
# this formatter will label the colorbar with the correct target names
formatter = plt.FuncFormatter(lambda i, *args: iris.target_names[int(i)])

#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\sphinxext\gen_rst.py
    # Sort the list of examples by line-count
    new_list = filter(lambda x: x.endswith('.py'), file_list)
    unsorted = np.zeros(shape=(len(new_list), 2))
#########################################################################################
C:\Users\muvva\Desktop\testing\scipy-lecture-notes-master\sphinxext\mathml.py
    # Lower case greek letters:
    'tau': u'\u03c4', 'phi': u'\u03d5', 'xi': u'\u03be', 'iota': u'\u03b9', 'epsilon': u'\u03f5', 'varrho': u'\u03f1', 'varsigma': u'\u03c2', 'beta': u'\u03b2', 'psi': u'\u03c8', 'rho': u'\u03c1', 'delta': u'\u03b4', 'alpha': u'\u03b1', 'zeta': u'\u03b6', 'omega': u'\u03c9', 'varepsilon': u'\u03b5', 'kappa': u'\u03ba', 'vartheta': u'\u03d1', 'chi': u'\u03c7', 'upsilon': u'\u03c5', 'sigma': u'\u03c3', 'varphi': u'\u03c6', 'varpi': u'\u03d6', 'mu': u'\u03bc', 'eta': u'\u03b7', 'theta': u'\u03b8', 'pi': u'\u03c0', 'varkappa': u'\u03f0', 'nu': u'\u03bd', 'gamma': u'\u03b3', 'lambda': u'\u03bb'}

#########################################################################################
C:\Users\muvva\Desktop\testing\scrapy-master\scrapy\core\downloader\webclient.py
    # which was passed via safe_url_string and is ascii-only.
    b = lambda s: to_bytes(s, encoding='ascii')
    path = urlunparse(('', '', parsed.path or '/', parsed.params, parsed.query, ''))
#########################################################################################
C:\Users\muvva\Desktop\testing\scrapy-master\scrapy\crawler.py
        # garbage collected after leaving __init__ scope
        self.__remove_handler = lambda: logging.root.removeHandler(handler)
        self.signals.connect(self.__remove_handler, signals.engine_stopped)
#########################################################################################
C:\Users\muvva\Desktop\testing\scrapy-master\tests\mockserver.py
            # silence CancelledError
            d.addErrback(lambda _: None)
            d.cancel()
#########################################################################################
C:\Users\muvva\Desktop\testing\scrapy-master\tests\test_extension_telnet.py
        # This function has some side effects we don't need for this test
        console._get_telnet_vars = lambda: {}

#########################################################################################
C:\Users\muvva\Desktop\testing\scrapy-master\tests\test_squeues.py
        import twisted.persisted.styles  # NOQA
        self.assertRaises(ValueError, q.push, lambda x: x)
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\security_monkey-master\env-config\config.py
# on sensitive services, enumerate the services here:
# DEFAULT_SENSITIVE = ['cloudhsm', 'cloudtrail', 'acm', 'config', 'kms', 'lambda', 'organizations', 'rds', 'route53', 'shield']
# Otherwise, SM will alert on all dataplane write access.
#########################################################################################
C:\Users\muvva\Desktop\testing\shutit-master\shutit_class.py
				#readline.set_pre_input_hook(hook)
				readline.set_startup_hook(lambda: readline.insert_text(default_dir))
				shutit_global.shutit_global_object.shutit_print('Input a path for this module')
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\examples\display\RenderExample.py
#translate over and down 10
pts = map(lambda x: ((x[0]+10),(x[1]+10)),pts)
linesL.lines(pts,color=Color.BEIGE,width=10)
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\examples\display\RenderExample.py
#translate over and down 10
pts = map(lambda x: ((x[0]+10),(x[1]+10)),pts)
linesL.lines(pts,antialias=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\examples\display\RenderExample.py
#translate over and down 10
pts = map(lambda x: ((x[0]+10),(x[1]+10)),pts)
polyL.polygon(pts,color=Color.BEIGE,width=10)
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\examples\display\RenderExample.py
#translate over and down 10
pts = map(lambda x: ((x[0]+10),(x[1]+10)),pts)
polyL.polygon(pts,antialias=True,width=3,alpha=210)
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\examples\display\RenderExample.py
#translate over and down 10
pts = map(lambda x: ((x[0]+10),(x[1]+10)),pts)
bez.bezier(pts,5,color=Color.RED)
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\Features\Detection.py
        #sort corners along the x + y axis
        negdiagsorted = sorted(self.spCorners, key = lambda corner: corner[0] - corner[1])
        #sort corners along the x - y axis
#########################################################################################
C:\Users\muvva\Desktop\testing\SimpleCV-master\SimpleCV\ImageClass.py
        #Convert angle to bin number
        conv = lambda x:int(x+90)/bins

#########################################################################################
C:\Users\muvva\Desktop\testing\snips-nlu-master\snips_nlu\tests\test_utils.py
        # Then
        items = sorted(iteritems(d), key=lambda i: i[0])
        self.assertListEqual(items, sequence)
#########################################################################################
C:\Users\muvva\Desktop\testing\snips-nlu-master\snips_nlu\tests\test_utils.py
        # Then
        items = sorted(list(iteritems(my_dict)), key=lambda i: i[0])
        self.assertListEqual(items, sequence[size_limit:])
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\builders\epub3.py
    # config values
    app.add_config_value('epub_basename', lambda self: make_filename(self.project), None)
    app.add_config_value('epub_version', 3.0, 'epub')  # experimental
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\domains\cpp.py
        # type: () -> str
        return self._stringify(lambda ast: str(ast))

#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\domains\cpp.py
        # type: () -> str
        return self._stringify(lambda ast: ast.get_display_string())

#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\domains\cpp.py
        # "this"
        # lambda-expression
        # "(" expression ")"
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\ext\autodoc\directive.py
        # type: (str) -> Callable[[str], str]
        return lambda x: x

#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\ext\autodoc\__init__.py
            # prefer the documenter with the highest priority
            classes.sort(key=lambda cls: cls.priority)
            # give explicitly separated module name, so that members
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\ext\autodoc\__init__.py
            # same group sorted alphabetically
            memberdocumenters.sort(key=lambda e: e[0].member_order)
        elif member_order == 'bysource' and self.analyzer:
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\ext\napoleon\iterators.py
        # type: (Any, Any) -> None
        """__init__(o, sentinel=None, modifier=lambda x: x)"""
        if 'modifier' in kwargs:
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\ext\viewcode.py
            len(env._viewcode_modules),  # type: ignore
            app.verbosity, lambda x: x[0]):
        if not entry:
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\sphinx\util\jsdump.py
    # type: (str) -> str
    return ESCAPED.sub(lambda m: eval('"' + m.group() + '"'), s)

#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\tests\test_config.py
    ('value1', 'string', None, 123, True),                      # wrong type
    ('value2', lambda _: [], None, 123, True),                  # lambda with wrong type
    ('value3', lambda _: [], None, [], False),                  # lambda with correct type
#########################################################################################
C:\Users\muvva\Desktop\testing\sphinx-master\tests\test_config.py
    ('value2', lambda _: [], None, 123, True),                  # lambda with wrong type
    ('value3', lambda _: [], None, [], False),                  # lambda with correct type
    ('value4', 100, None, True, True),                          # child type
#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\adblockparser\parser.py
        # "basic" rules are rules without options
        advanced_rules, basic_rules = split_data(self.rules, lambda r: r.options)

#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\gexf\_gexf.py
                # group by mode
                key_mode=lambda att : att["mode"]
                atts_sorted_by_mode=sorted(atts.values(),key=key_mode,reverse=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\gexf\_gexf.py
                    # generate attribute by id order
                    for att in sorted(atts,key=lambda att: att["id"]) :
                        attributeXML=etree.SubElement(attributesXML, "attribute")
#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\PyPDF2\generic.py
    # returns self.
    original_bytes = property(lambda self: self)

#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\PyPDF2\generic.py
    # back-calculate what the original encoded bytes were.
    original_bytes = property(lambda self: self.get_original_bytes())

#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\ext\PyPDF2\generic.py
    # Stability: Added in v1.12, will exist for all future v1.x releases.
    xmpMetadata = property(lambda self: self.getXmpMetadata(), None, None)

#########################################################################################
C:\Users\muvva\Desktop\testing\spiderfoot-master\modules\sfp_spider.py
        # Filter out certain file types (if user chooses to)
        checkExts = lambda ext: url.lower().split('?')[0].endswith('.' + ext.lower())
        if filter(checkExts, self.opts['filterfiles']):
#########################################################################################
C:\Users\muvva\Desktop\testing\spotipy-master\examples\artist_albums.py
    seen = set() # to avoid dups
    albums.sort(key=lambda album:album['name'].lower())
    for album in albums:
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\mainwindow.py
            def trigger(i=i, self=self):  # closure needed!
                return lambda: self.show_tour(i)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\mainwindow.py
                # closure above replaces the following which stopped working
                # qli_act = create_action(self, name, triggered=lambda i=index:
                #     self.quick_layout_switch(i)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # print(calltip.isVisible())
    qtbot.waitUntil(lambda: QToolTip.isVisible(), timeout=3000)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Check that a expected text is part of the page
    qtbot.waitUntil(lambda: check_text(webpage, "namespace"), timeout=6000)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Check that a expected text is part of the page
    qtbot.waitUntil(lambda: check_text(webpage, "range"), timeout=30000)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until the window is fully up
    qtbot.waitUntil(lambda: shell._prompt_html is not None, timeout=SHELL_TIMEOUT)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until the window is fully up
    qtbot.waitUntil(lambda: shell._prompt_html is not None, timeout=SHELL_TIMEOUT)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until an object appears
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 1,
                    timeout=COMPILE_AND_EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until all objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 1,
                    timeout=COMPILE_AND_EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until all objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 4,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until all objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 4,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until all objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 4,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until the object has appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 1,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 2,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until there are no objects in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 0,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until the object has appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 1,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until all objects have appeared in the variable explorer
    qtbot.waitUntil(lambda: nsb.editor.model.rowCount() == 4,
                    timeout=EVAL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Set a timer to manipulate the open dialog while it's running
    QTimer.singleShot(2000, lambda: open_file_in_editor(main_window,
                                                        'script.py',
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\app\tests\test_mainwindow.py
    # Wait until the window is fully up.
    qtbot.waitUntil(lambda: shell._prompt_html is not None,
                    timeout=SHELL_TIMEOUT)
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\console\plugin.py
        # Redirecting some signals:
        self.shell.redirect_stdio.connect(lambda state:
                                          self.redirect_stdio.emit(state))
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\console\widgets\internalshell.py
        # Code completion / calltips
        getcfg = lambda option: CONF.get('internal_console', option)
        case_sensitive = getcfg('codecompletion/case_sensitive')
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\ipythonconsole\plugin.py
        # Connect focus signal to client's control widget
        control.focus_changed.connect(lambda: self.focus_changed.emit())
        
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\ipythonconsole\widgets\client.py
        # --- Exit function
        self.exit_callback = lambda: plugin.close_client(client=self)

#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\ipythonconsole\widgets\namespacebrowser.py
        # Update namespace view
        self.sig_namespace_view.connect(lambda data:
            self.namespacebrowser.process_remote_view(data))
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\plugins\ipythonconsole\widgets\namespacebrowser.py
        # Update properties of variables
        self.sig_var_properties.connect(lambda data:
            self.namespacebrowser.set_var_properties(data))
#########################################################################################
C:\Users\muvva\Desktop\testing\spyder-master\spyder\utils\qthelpers.py
#    self.connect(self.listwidget, SIGNAL('option_changed'),
#                 lambda *args: self.emit(SIGNAL('option_changed'), *args))

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\extra\safe2bin\safe2bin.py
# Characters that don't need to be safe encoded
SAFE_CHARS = "".join(filter(lambda _: _ not in SAFE_ENCODE_SLASH_REPLACEMENTS, string.printable.replace('\\', '')))

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\core\common.py
    # Fail-safe substitution
    retVal = re.sub(r"(?i)(Command line:.+)\b(https?://[^ ]+)", lambda match: "%s%s" % (match.group(1), '*' * len(match.group(2))), retVal)

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\core\settings.py
# Minor artistic touch
BANNER = re.sub(r"\[.\]", lambda _: "[\033[01;41m%s\033[01;49m]" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\request\basic.py
        if "&#" in page:
            page = re.sub(r"&#x([0-9a-f]{1,2});", lambda _: (_.group(1) if len(_.group(1)) == 2 else "0%s" % _.group(1)).decode("hex"), page)
            page = re.sub(r"&#(\d{1,3});", lambda _: chr(int(_.group(1))) if int(_.group(1)) < 256 else _.group(0), page)
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\request\basic.py
            page = re.sub(r"&#x([0-9a-f]{1,2});", lambda _: (_.group(1) if len(_.group(1)) == 2 else "0%s" % _.group(1)).decode("hex"), page)
            page = re.sub(r"&#(\d{1,3});", lambda _: chr(int(_.group(1))) if int(_.group(1)) < 256 else _.group(0), page)

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\request\basic.py
        # e.g. &amp;
        page = re.sub(r"&([^;]+);", lambda _: chr(htmlEntities[_.group(1)]) if htmlEntities.get(_.group(1), 256) < 256 else _.group(0), page)

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\lib\request\basic.py
        # e.g. &zeta;
        page = re.sub(r"&([^;]+);", lambda _: unichr(htmlEntities[_.group(1)]) if htmlEntities.get(_.group(1), 0) > 255 else _.group(0), page)

#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\thirdparty\beautifulsoup\beautifulsoup.py
        # Reference: https://github.com/pkrumins/xgoogle/pull/16/commits/3dba1165c436b0d6e5bdbd09e53ca0dbf8a043f8
        convert = lambda k_val: (k_val[0],
                                 re.sub("&(#\d+|#x[0-9a-fA-F]+|\w+);",
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\thirdparty\bottle\bottle.py
                # pick first FunctionType instance from multiple arguments
                func = filter(lambda x: isinstance(x, FunctionType),
                              map(lambda x: x.cell_contents, attributes))
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\thirdparty\pydes\pyDes.py
			# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here
			self.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))
			B = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\thirdparty\pydes\pyDes.py
			# Xor with L[i - 1]
			self.R = list(map(lambda x, y: x ^ y, self.R, self.L))
			# Optimization: This now replaces the below commented code
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlmap-master\thirdparty\xdot\xdot.py
        if c1 == '#':
            hex2float = lambda h: float(int(h, 16)/255.0)
            r = hex2float(c[1:3])
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\sqlparse\sql.py
        # this on is inconsistent, using Comment instead of T.Comment...
        funcs = lambda tk: not ((skip_ws and tk.is_whitespace)
                                or (skip_cm and imt(tk,
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\sqlparse\sql.py
        idx += 1  # alot of code usage current pre-compensates for this
        funcs = lambda tk: not ((skip_ws and tk.is_whitespace)
                                or (skip_cm and imt(tk,
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # preserve at least one whitespace after subgroups
        f = lambda sql: sqlparse.format(sql, strip_whitespace=True)
        s = 'select\n* /* foo */  from bar '
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # don't break AND after BETWEEN
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = 'and foo between 1 and 2 and bar = 3'
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # issue4
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = '(foo as bar, bar1, bar2 as bar3, b4 as b5)'
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # issue3
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = 'select c1 -- column1\nfrom foo'
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # issue36
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = 'select max(a) b, foo, bar'
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # issue45
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = 'select foo.bar, nvl(1) from dual'
#########################################################################################
C:\Users\muvva\Desktop\testing\sqlparse-master\tests\test_format.py
        # issue 329
        f = lambda sql: sqlparse.format(sql, reindent=True)
        s = 'insert into foo values (1, 2)'
#########################################################################################
C:\Users\muvva\Desktop\testing\st2-master\contrib\runners\orquesta_runner\orquesta_functions\runtime.py
    # Sort the instances by ascending start_timestamp and get the latest instance.
    instances = sorted(instances, key=lambda x: x.start_timestamp)
    instance = instances[-1]
#########################################################################################
C:\Users\muvva\Desktop\testing\st2-master\contrib\runners\winrm_runner\winrm_runner\winrm_base.py
        # For each match, look up the new string in the replacements
        return regexp.sub(lambda match: replacements[match.group(0)], string)

#########################################################################################
C:\Users\muvva\Desktop\testing\st2-master\st2client\st2client\base.py
# Fix for "os.getlogin()) OSError: [Errno 2] No such file or directory"
os.getlogin = lambda: pwd.getpwuid(os.getuid())[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\st2-master\st2common\st2common\services\workflows.py
    # Sort the list of errors by type and path.
    errors = sorted(errors, key=lambda e: (e['type'], e['schema_path']))

#########################################################################################
C:\Users\muvva\Desktop\testing\st2-master\tools\log_watcher.py
    # sort by percent
    alerts.sort(key=lambda alert: alert[3], reverse=True)
    print(tabulate(alerts, headers=['File', 'Lines', 'Logs', 'Percent', 'adt', 'exc', 'err', 'wrn',
#########################################################################################
C:\Users\muvva\Desktop\testing\stanford-tensorflow-tutorials-master\2017\examples\05_csv_reader.py
    # convert the 5th column (present/absent) to the binary value 0 and 1
    content[4] = tf.cond(tf.equal(content[4], tf.constant('Present')), lambda: tf.constant(1.0), lambda: tf.constant(0.0))

#########################################################################################
C:\Users\muvva\Desktop\testing\stanfordnlp-master\stanfordnlp\models\depparse\data.py
            # sort sentences (roughly) by length for better memory utilization
            data = sorted(data, key = lambda x: len(x[0]), reverse=random.random() > .5)

#########################################################################################
C:\Users\muvva\Desktop\testing\stanfordnlp-master\stanfordnlp\models\pos\data.py
            # sort sentences (roughly) by length for better memory utilization
            data = sorted(data, key = lambda x: len(x[0]), reverse=random.random() > .5)

#########################################################################################
C:\Users\muvva\Desktop\testing\stanfordnlp-master\stanfordnlp\utils\conll18_ud_eval.py
        # with category Zs.
        columns[FORM] = "".join(filter(lambda c: unicodedata.category(c) != "Zs", columns[FORM]))
        if not columns[FORM]:
#########################################################################################
C:\Users\muvva\Desktop\testing\Stitch-master\Configuration\pyxhook.py
        # Assign default function actions (do nothing).
        self.KeyDown = lambda x: True
        self.KeyUp = lambda x: True
#########################################################################################
C:\Users\muvva\Desktop\testing\Stream-Framework-master\stream_framework\storage\redis\structures\sorted_set.py
        # distributed connections
        redis_count = lambda: int(redis_result)
        lazy_factory = lazy(redis_count, *six.integer_types)
#########################################################################################
C:\Users\muvva\Desktop\testing\streamlink-master\src\streamlink\plugin\api\support_plugin.py
    # Get the path of the caller module
    stack = list(filter(lambda f: f[3] == "<module>", inspect.stack()))
    prev_frame = stack[0]
#########################################################################################
C:\Users\muvva\Desktop\testing\streamlink-master\src\streamlink\plugins\schoolism.py
                        # only include HLS streams
                        # validate.filter(lambda s: s["type"] == "application/x-mpegurl")
                    )
#########################################################################################
C:\Users\muvva\Desktop\testing\streamlink-master\src\streamlink\plugins\tv3cat.py
        # If there is only one item, it's not a list ... silly
        validate.transform(lambda x: x if isinstance(x, list) else [x])
    )
#########################################################################################
C:\Users\muvva\Desktop\testing\streamlink-master\src\streamlink_cli\main.py
        # to use these in case the main stream is not usable.
        alt_streams = list(filter(lambda k: stream_name + "_alt" in k,
                                  sorted(streams.keys())))
#########################################################################################
C:\Users\muvva\Desktop\testing\SublimeLinter-master\lint\backend.py
    # here to execute all scheduled tasks ordered and sequentially.
    sublime.set_timeout_async(lambda: next(errors))

#########################################################################################
C:\Users\muvva\Desktop\testing\SublimeLinter-master\lint\reloader.py
        """A handy loader function decorator."""  # noqa: D4
        return lambda load_module: cls(condition, load_module)

#########################################################################################
C:\Users\muvva\Desktop\testing\SublimeLinter-master\panel_view.py
        # before `fill_panel`, thus 'panel_line' has not been set.
        all_errors = sorted(persist.errors[bid], key=lambda e: e['panel_line'])
    except KeyError:
#########################################################################################
C:\Users\muvva\Desktop\testing\SublimeREPL-master\repls\killableprocess\killableprocess.py
    # We get random maxint errors from subprocesses __del__
    __del__ = lambda self: None

#########################################################################################
C:\Users\muvva\Desktop\testing\sumy-master\sumy\models\tf.py
        # sort terms by number of occurrences in descending order
        terms = sorted(self._terms.items(), key=lambda i: -i[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\Surprise-master\examples\building_custom_algorithms\with_baselines_or_sim.py
        # Sort these neighbors by similarity
        neighbors = sorted(neighbors, key=lambda x: x[1], reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\Surprise-master\examples\precision_recall_at_k.py
        # Sort user ratings by estimated value
        user_ratings.sort(key=lambda x: x[0], reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\bin\coverage_doctest.py
    # Sort functions/classes by line number
    c_md = sorted(c_md, key=lambda x: int(x.split()[1][:-1]))
    c_mdt = sorted(c_mdt, key=lambda x: int(x.split()[1][:-1]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\doc\ext\numpydoc.py
    # start renaming from the longest string, to avoid overwriting parts
    references.sort(key=lambda x: -len(x))
    if references:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\examples\beginner\plot_examples.py
# Some aesthetics
e[0].line_color = lambda x: x / 4
f[0].line_color = lambda x, y, z: z / 10
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\examples\beginner\plot_examples.py
param_line_2d[0].line_color = lambda u: sin(u)  # parametric
param_line_2d[1].line_color = lambda u, v: u**2 + v**2  # coordinates
param_line_2d.title = 'The inner one is colored by parameter and the outher one by coordinates'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\examples\beginner\plot_examples.py
param_line_3d[0].line_color = lambda u: u  # parametric
param_line_3d[1].line_color = lambda u, v: u*v  # first and second coordinates
param_line_3d[2].line_color = lambda u, v, w: u*v*w  # all coordinates
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\examples\beginner\plot_examples.py
param_line_3d[1].line_color = lambda u, v: u*v  # first and second coordinates
param_line_3d[2].line_color = lambda u, v, w: u*v*w  # all coordinates

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\abc.py
_greek = list(greeks) # make a copy, so we can mutate it
# Note: We import lamda since lambda is a reserved keyword in Python
_greek.remove("lambda")
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\abc.py
# Note: We import lamda since lambda is a reserved keyword in Python
_greek.remove("lambda")
_greek.append("lamda")
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\assumptions\sathandlers.py
    # matching, so that we can just write Equivalent(Q.zero(x**y), Q.zero(x) & Q.positive(y))
    (Pow, CustomLambda(lambda power: Equivalent(Q.zero(power), Q.zero(power.base) & Q.positive(power.exp)))),
    (Integer, CheckIsPrime(Q.prime)),
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\assumptions\tests\test_query.py
    # make sure the key is not defined
    raises(AttributeError, lambda: ask(Q.my_key(x)))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\categories\tests\test_baseclasses.py
    # Test bad compositions.
    raises(ValueError, lambda: f * g)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\array_utils.py
        #newargs = [i for i in args if hasattr(i, "shape")]
        #coeff = reduce(lambda x, y: x*y, [i for i in args if not hasattr(i, "shape")], S.One)
        #newargs[0] *= coeff
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_array_utils.py
    # Contraction along axes with discordant dimensions:
    raises(ValueError, lambda: CodegenArrayContraction(expr, (1, 2)))
    # Also diagonal needs the same dimensions:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_array_utils.py
    # Also diagonal needs the same dimensions:
    raises(ValueError, lambda: CodegenArrayDiagonal(expr, (1, 2)))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Matrix to scalar
    raises(ValueError, lambda: Assignment(B[i], A))
    raises(ValueError, lambda: Assignment(B[i], mat))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Scalar to matrix
    raises(ValueError, lambda: Assignment(A, x))
    raises(ValueError, lambda: Assignment(A, 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Non-atomic lhs
    raises(TypeError, lambda: Assignment(mat, A))
    raises(TypeError, lambda: Assignment(0, x))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Matrix to scalar
    raises(ValueError, lambda: aug_assign(B[i], '+', A))
    raises(ValueError, lambda: aug_assign(B[i], '+', mat))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Scalar to matrix
    raises(ValueError, lambda: aug_assign(A, '+', x))
    raises(ValueError, lambda: aug_assign(A, '+', 0))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Non-atomic lhs
    raises(TypeError, lambda: aug_assign(mat, '+', A))
    raises(TypeError, lambda: aug_assign(0, '+', x))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Multiple assignments to same symbol not supported
    raises(NotImplementedError, lambda: CodeBlock(
        Assignment(x, 1),
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\codegen\tests\test_ast.py
    # Rounding
    raises(ValueError, lambda: integer.cast_check(3.5))
    assert integer.cast_check('3') == 3
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\fp_groups.py
    # remove all the order 1 generators from relators
    rels = list(filter(lambda rel: rel not in order_1_gens, rels))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\perm_groups.py
            # get the minimal element in the base ordering
            return [min(orbit, key = lambda x: base_ordering[x]) \
              for orbit in orbits]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\perm_groups.py
            # apply _sylow_reduce to orbit actions
            orbits = sorted(orbits, key = lambda x: len(x))
            omega1 = orbits.pop()
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tensor_can.py
        # if TAB contains equal permutations up to the sign, return 0
        TAB1.sort(key=lambda x: x[-1])
        prev = [0] * size
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_partitions.py
    # no zeros in partition
    raises(ValueError, lambda: IntegerPartition(list(range(3))))
    # check fails since 1 + 2 != 100
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_partitions.py
    # check fails since 1 + 2 != 100
    raises(ValueError, lambda: IntegerPartition(100, list(range(1, 3))))
    a = IntegerPartition(8, [1, 3, 4])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_permutations.py
    # don't auto fill 0
    raises(ValueError, lambda: Permutation([1]))
    p = Permutation([0, 1, 2, 3])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_permutations.py
           # enclosing brackets needed
    raises(ValueError, lambda: Permutation([[1, 2], 0]))
           # enclosing brackets needed on 0
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_permutations.py
           # enclosing brackets needed on 0
    raises(ValueError, lambda: Permutation([1, 1, 0]))
    raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_prufer.py
    raises(ValueError, lambda: Prufer([[1, 2], [3, 4]]))  # 0 is missing
    raises(ValueError, lambda: Prufer([[2, 3], [3, 4]]))  # 0, 1 are missing
    assert Prufer(*Prufer.edges([1, 2], [3, 4])).prufer_repr == [1, 3]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\combinatorics\tests\test_prufer.py
        [1, 3], [3, 4]))  # a broken tree but edges doesn't care
    raises(ValueError, lambda: Prufer.edges([1, 2], [5, 6]))
    raises(ValueError, lambda: Prufer([[]]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\concrete\tests\test_sums_products.py
    # if this fails remove special handling below
    raises(ValueError, lambda: Sum(x, x))
    r = symbols('x', real=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\add.py
    # assumption methods
    _eval_is_real = lambda self: _fuzzy_group(
        (a.is_real for a in self.args), quick_exit=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\basic.py
        # Base is some kind of array/matrix,
        # it should have `.applyfunc(lambda x: x.diff(self)` implemented:
        return base._eval_derivative(self)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\expr.py
                # it seems to work better to try big ones first
                surds.sort(key=lambda x: -x.args[0])
                for s in surds:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\expr.py
            # first number positive and thhe second number nagative
            key = lambda x:not isinstance(x, (Number, NumberSymbol))
            add_args = sorted(Add.make_args(self), key=key)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\function.py
        # to return the right value
        return lambda rule, **_: rule.get(self, self)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\mul.py
                # handle subtypes and operation priority:
                terms.append(reduce(lambda x, y: x*y, (args[:i] + [d] + args[i + 1:]), S.One))
        return Add.fromiter(terms)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\power.py
        # sift the commutative bases
        other, maybe_real = sift(cargs, lambda x: x.is_real is False,
            binary=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\relational.py
        # will work until it is properly sorted out
        # return ops.get(self.func, lambda a, b, evaluate=False: ~(self.func(a,
        #      b, evaluate=evaluate)))(*self.args, evaluate=False)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_assumptions.py
    # cf. issues 5795 and 5545
    raises(InconsistentAssumptions, lambda: Symbol('x', real=True,
           commutative=False))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_basic.py
    # cannot be sympified; sympification is strict if foo is not string
    raises(ValueError, lambda: b21.subs(b1='bad arg'))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_compatibility.py
    # integer. This is not -- by design -- as_ints role.
    raises(ValueError, lambda : as_int(1e23))
    raises(ValueError, lambda : as_int(S('1.'+'0'*20+'1')))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_evalf.py
    # Binet's formula
    f = lambda n: ((1 + sqrt(5))**n)/(2**n * sqrt(5))
    assert NS(f(5000) - fibonacci(5000), 10, maxn=1500) == '5.156009964e-1046'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_evalf.py
    # the first arg of Min is not comparable in the imaginary part
    raises(ValueError, lambda: S('''
    Min(-sqrt(3)*cos(pi/18)/6 + re(1/((-1/2 - sqrt(3)*I/2)*(1/6 +
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_evalf.py
    # the sympified expression above):
    # raises(ValueError, lambda: e._eval_evalf(2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_expr.py
    # if not simultaneous then y*sin(x) -> y*sin(x)/y = sin(x) -> sin(x)/y
    assert (y*sin(x)).replace(sin, lambda expr: sin(expr)/y,
        simultaneous=False) == sin(x)/y
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_facts.py
    # see if it catches inconsistency
    raises(ValueError, lambda: D([('a', Not('a'))]))
    raises(ValueError, lambda: D([('a', 'b'), ('b', Not('a'))]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_function.py
    # issue 13873
    raises(ValueError, lambda: sin(x).diff(x, -1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_numbers.py
    # ...but not in all cases (per Py 3.6)
    raises(ValueError, lambda: Float('_1'))
    raises(ValueError, lambda: Float('1_'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_numbers.py
    # Precision specifying errors
    raises(ValueError, lambda: Float("1.23", dps=3, precision=10))
    raises(ValueError, lambda: Float("1.23", dps="", precision=10))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_numbers.py
    # there should be no len for numbers
    raises(TypeError, lambda: len(Rational(2)))
    raises(TypeError, lambda: len(Rational(2, 3)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_relational.py
    # https://github.com/sympy/sympy/issues/5931
    raises(TypeError, lambda: bool(x > 3))
    raises(TypeError, lambda: bool(x >= 3))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_sympify.py
    raises(SympifyError, lambda: sympify("lambda *args: args")) # args argument error
    raises(SympifyError, lambda: sympify("lambda **kwargs: kwargs[0]")) # kwargs argument error
    raises(SympifyError, lambda: sympify("lambda x = 1: x"))    # Keyword argument error
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_sympify.py
    raises(SympifyError, lambda: sympify("lambda **kwargs: kwargs[0]")) # kwargs argument error
    raises(SympifyError, lambda: sympify("lambda x = 1: x"))    # Keyword argument error
    with raises(SympifyError):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_sympify.py
    # negative _sympify
    raises(SympifyError, lambda: _sympify('1'))
    raises(SympifyError, lambda: _sympify([1, 2, 3]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_trace.py
    # check for value error, when either/both arguments are not provided
    raises(ValueError, lambda: Tr())
    raises(ValueError, lambda: Tr(A, 1, 2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\core\tests\test_var.py
    # see if var() really injects into global namespace
    raises(NameError, lambda: z1)
    _make_z1()
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\functions\elementary\tests\test_piecewise.py
    # Explicitly constructed empty Piecewise not accepted
    raises(TypeError, lambda: Piecewise())
    # False condition is never retained
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\functions\elementary\tests\test_piecewise.py
    assert Piecewise((x, 1)) == x  # 1 and 0 are accepted as True/False
    raises(TypeError, lambda: Piecewise((x, 2)))
    raises(TypeError, lambda: Piecewise((x, x**2)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\functions\elementary\tests\test_piecewise.py
    # used to detect this
    raises(NotImplementedError, lambda: _ITE((x, x < y), (y, x >= a)))
    raises(ValueError, lambda: _ITE((a, x < 2), (b, x > 3)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\functions\special\tests\test_hyper.py
    # test exceptions
    raises(ValueError, lambda: meijerg(((3, 1), (2,)), ((oo,), (2, 0)), x))
    raises(ValueError, lambda: meijerg(((3, 1), (2,)), ((1,), (2, 0)), x))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\geometry\tests\test_point.py
    # Check invalid input for transform
    raises(ValueError, lambda: p3.transform(p3))
    raises(ValueError, lambda: p.transform(Matrix([[1, 0], [0, 1]])))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\geometry\tests\test_point.py
    # Test are_colinear type error
    raises(TypeError, lambda: Point3D.are_collinear(p, x))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\geometry\tests\test_polygon.py
    assert q.parameter_value((4, 0), t) == {t: -6 + 3*sqrt(5)}  # ~= 0.708
    raises(ValueError, lambda: sq.parameter_value((5, 6), t))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\holonomic\holonomic.py
        # sort the roots for a fixed ordering of solution
        compl.sort(key=lambda x : x[1])
        compl.sort(key=lambda x : x[2])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\intpoly.py
        #  TODO : respect to symbol names and scalable w.r.t higher dimensions.
        power_gens = sorted(power_gens.items(), key=lambda k: str(k[0]))
        if power_gens[0][1] >= power_gens[1][1]:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\manualintegrate.py
    # patterns consist of a SymPy class, a wildcard expr, an optional
    # condition coded as a lambda (when Wild properties are not enough),
    # followed by an applicable rule
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\manualintegrate.py
    # lambda integrand, symbol: integrand.is_algebraic_expr(),
    # lambda integrand, symbol: isinstance(integrand, sympy.Mul),
    lambda integrand, symbol: True,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\manualintegrate.py
    # lambda integrand, symbol: isinstance(integrand, sympy.Mul),
    lambda integrand, symbol: True,
    lambda integrand, symbol: integrand.cancel())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\manualintegrate.py
    # If there are trig functions with different arguments, expand them
    lambda integrand, symbol: (
        len(set(a.args[0] for a in integrand.atoms(TrigonometricFunction))) > 1),
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\meijerint.py
        # the TypeError might be raised here, e.g. if lambda_c is NaN
        if _eval_cond(lambda_c > 0) != False:
            c15 = (lambda_c > 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\prde.py
                # Rm+1; m = A.rows
                Rm1 = Ri.applyfunc(lambda x: derivation(x, DE, basic=True)/
                    derivation(A[i, j], DE, basic=True))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\prde.py
                    # u[s] = u[s] - A[s, j]*u[m+1
                    u.row_op(s, lambda r, jj: cancel(r - Asj*um1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\risch.py
            # Minimize potential problems with algebraic substitution
            others.sort(key=lambda i: i[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\risch.py
    # If r = residue_reduce(...), then the logarithmic part is given by:
    # sum([RootSum(a[0].as_poly(z), lambda i: i*log(a[1].as_expr()).subs(z,
    # i)).subs(t, log(x)) for a in r[0]])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\rubi\parsetools\parse.py
    # Creates a CustomConstraint of the form `CustomConstraint(lambda a, x: FreeQ(a, x))`
    lambda_symbols = list(set(get_free_symbols(s, symbols, [])))
    r = generate_sympy_from_parsed(s)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\tests\test_integrals.py
    # risch=True only allowed on indefinite integrals
    raises(ValueError, lambda: integrate(1/log(x), (x, 0, oo), risch=True))
    assert integrate(exp(-x**2), x, risch=True) == NonElementaryIntegral(exp(-x**2), x)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\integrals\tests\test_rde.py
    # cause any problems with the further tests.
    raises(NonElementaryIntegralException, lambda: cancel_primitive(Poly(1, t), Poly(t, t), oo, DE))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\interactive\session.py
            # and False means don't add the line to IPython's history.
            ip.runsource = lambda src, symbol='exec': ip.run_cell(src, False)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\logic\boolalg.py
        # symbols so x == 0 & x == y -> x==0 & y == 0
        Rel, nonRel = sift(rv.args, lambda i: isinstance(i, Relational),
                           binary=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\logic\boolalg.py
    # group into constants and variable values
    c, v = sift(variables, lambda x: x in (True, False), binary=True)
    variables = c + v
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\logic\tests\test_boolalg.py
    # an attempt is made to convert the ITE to Boolean nnf
    raises(TypeError, lambda: ITE(A < 1, [1], B).to_nnf())

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\logic\tests\test_boolalg.py
        # use int(bool(t)) to get 0 or 1
        raises(TypeError, lambda: int(t))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\expressions\matadd.py
        # TypeErrors from GenericZeroMatrix().shape
        args = filter(lambda i: GenericZeroMatrix() != i, args)
        args = list(map(sympify, args))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\expressions\matexpr.py
            # are flattened:
            rule = bottom_up(lambda x: reduce(lambda a, b: a*b, x.args) if isinstance(x, (Mul, MatMul)) else x)
            return rule(expr)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\expressions\matmul.py
        # TypeErrors from GenericIdentity().shape
        args = filter(lambda i: GenericIdentity() != i, args)
        args = list(map(sympify, args))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\expressions\matmul.py
    # Apply standard rm_id for MatMuls
    result = rm_id(lambda x: x.is_Identity is True)(mmul)
    if result != mmul:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\matrices.py
        # Types are (base: scalar, self: matrix)
        return self.applyfunc(lambda x: base.diff(x))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\matrices.py
        # computing the Jacobian is now easy:
        return self._new(m, n, lambda j, i: self[j].diff(X[i]))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_commonmatrix.py
    # missing eigenvalue
    raises(ValueError, lambda: SpecialOnlyMatrix.jordan_block(2))
    # non-integral size
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_commonmatrix.py
    # non-integral size
    raises(ValueError, lambda: SpecialOnlyMatrix.jordan_block(3.5, 2))
    # size not specified
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_commonmatrix.py
    # size not specified
    raises(ValueError, lambda: SpecialOnlyMatrix.jordan_block(eigenvalue=2))
    # inconsistent eigenvalue
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_matrices.py
    # test issue 11964
    raises(ValueError, lambda: Matrix([[1, 1], [3, 3]])._matrix_pow_by_jordan_blocks(-10))
    A = Matrix([[0, 1, 0], [0, 0, 1], [0, 0, 0]])  # Nilpotent jordan block size 3
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_matrices.py
    b = Matrix([3, 1, 2])                  # inconsistent
    raises(ValueError, lambda: A.LUsolve(b))
    A = Matrix([[0, -1, 2],
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_matrices.py
    # issue 15119
    raises(NonSquareMatrixError, lambda : Matrix([[1, 2], [0, 4], [0, 0]]).eigenvals())
    raises(NonSquareMatrixError, lambda : Matrix([[1, 0], [3, 4], [5, 6]]).eigenvals())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\matrices\tests\test_sparse.py
    # creation args
    raises(TypeError, lambda: SparseMatrix(1, 2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\multipledispatch\tests\test_dispatcher.py
    assert f(3) == 'default'       # fall bac to default behavior
    assert raises(NotImplementedError, lambda: f(1, 2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\ntheory\tests\test_factor_.py
    # Should raise errors for bad input
    raises(ValueError, lambda: multiplicity(1, 1))
    raises(ValueError, lambda: multiplicity(1, 2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\ntheory\tests\test_factor_.py
    capture(lambda: factorint(n**3, verbose=1))  # perfect power termination
    capture(lambda: factorint(2*n, verbose=1))  # factoring complete msg

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\ntheory\tests\test_factor_.py
    # exceed 2nd
    assert '2001' in capture(lambda: factorint(n, limit=2000, verbose=1))
    assert capture(
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\ntheory\tests\test_factor_.py
    # Test for non integer input
    raises(ValueError, lambda: factorint(4.5))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\parsing\sympy_parser.py
#: datatypes and allows the use of standard factorial notation (e.g. ``x!``).
standard_transformations = (lambda_notation, auto_symbol, repeated_decimals, auto_number,
    factorial_notation)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\continuum_mechanics\tests\test_beam.py
    # can't use end with point loads
    raises(ValueError, lambda: b4.apply_load(-3, 0, -1, end=3))
    with raises(TypeError):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\hep\gamma_matrices.py
    # if len(spinor_free) == 2:
    #     spinor_free.sort(key=lambda x: x[2])
    #     assert spinor_free[0][1] == 1 and spinor_free[-1][1] == 2
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\mechanics\tests\test_body.py
    # passing something else than point
    raises(TypeError, lambda: rigid_body.apply_force(force_vector,  0))
    raises(TypeError, lambda: rigid_body.apply_force(0))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\mechanics\tests\test_functions.py
    # Test if a ValueError is raised on supplying only a vector as input
    raises(ValueError, lambda: find_dynamicsymbols(v))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\mechanics\tests\test_system.py
# coordinates
x, y, u, v, lam = dynamicsymbols('x y u v lambda')
m, l, g = symbols('m l g')
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\optics\tests\test_medium.py
    assert Medium('m7') == Medium('m8', e0, u0) # test for equality
    raises(ValueError, lambda:Medium('m9', e0, u0, 2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\optics\tests\test_utils.py
    raises(TypeError, lambda: refraction_angle(m1, m1, m2)) # can add other values for arg[0]
    raises(TypeError, lambda: refraction_angle(r1, m1, m2, None, i))
    raises(TypeError, lambda: refraction_angle(r1, m1, m2, m2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_density.py
    # check for value error, when prob is not provided
    raises(ValueError, lambda: Density([Ket(0)], [Ket(1)]))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_density.py
    x, y = 1, 2  # random values that is not a matrix
    raises(ValueError, lambda: fidelity(x, y))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j not integer or half integer
    raises(ValueError, lambda: JzKet(S(2)/3, -S(1)/3))
    raises(ValueError, lambda: JzKet(S(2)/3, m))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j < 0
    raises(ValueError, lambda: JzKet(-1, 1))
    raises(ValueError, lambda: JzKet(-1, m))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # m not integer or half integer
    raises(ValueError, lambda: JzKet(j, -S(1)/3))
    # abs(m) > j
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # abs(m) > j
    raises(ValueError, lambda: JzKet(1, 2))
    raises(ValueError, lambda: JzKet(1, -2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j-m not integer
    raises(ValueError, lambda: JzKet(1, S(1)/2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j not integer or half integer
    raises(ValueError, lambda: JzKetCoupled(S(2)/3, -S(1)/3, (1,)))
    raises(ValueError, lambda: JzKetCoupled(S(2)/3, m, (1,)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j < 0
    raises(ValueError, lambda: JzKetCoupled(-1, 1, (1,)))
    raises(ValueError, lambda: JzKetCoupled(-1, m, (1,)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # m not integer or half integer
    raises(ValueError, lambda: JzKetCoupled(j, -S(1)/3, (1,)))
    # abs(m) > j
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # abs(m) > j
    raises(ValueError, lambda: JzKetCoupled(1, 2, (1,)))
    raises(ValueError, lambda: JzKetCoupled(1, -2, (1,)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # j-m not integer
    raises(ValueError, lambda: JzKetCoupled(1, S(1)/2, (1,)))
    # checks types on coupling scheme
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # checks types on coupling scheme
    raises(TypeError, lambda: JzKetCoupled(1, 1, 1))
    raises(TypeError, lambda: JzKetCoupled(1, 1, (1,), 1))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # checks length of coupling terms
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1,), ((1, 2, 1),)))
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((1, 2),)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # all jn are integer or half-integer
    raises(ValueError, lambda: JzKetCoupled(1, 1, (S(1)/3, S(2)/3)))
    # indices in coupling scheme must be integers
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # indices in coupling scheme must be integers
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((S(1)/2, 1, 2),) ))
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((1, S(1)/2, 2),) ))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # indices out of range
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((0, 2, 1),) ))
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((3, 2, 1),) ))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # all j values in coupling scheme must by integer or half-integer
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1, 1), ((1, 2, S(
        4)/3), (1, 3, 1)) ))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # each coupling must satisfy |j1-j2| <= j3 <= j1+j2
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 5)))
    raises(ValueError, lambda: JzKetCoupled(5, 1, (1, 1)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\quantum\tests\test_spin.py
    # final j of coupling must be j of the state
    raises(ValueError, lambda: JzKetCoupled(1, 1, (1, 1), ((1, 2, 2),) ))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\secondquant.py
        # we keep the one where indices in ind are in order ind[0] < ind[1]
        return min(a, b, key=lambda x: default_sort_key(_get_indices(x, ind)))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\tests\test_hydrogen.py
    # Test the exceptions:
    raises(ValueError, lambda: E_nl_dirac(0, 0))
    raises(ValueError, lambda: E_nl_dirac(1, -1))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\dimensions.py
        #      example if the matrix is not a square
        return reduce(lambda x, y: x.row_join(y),
                      [self.dim_can_vector(d) for d in sorted(self.base_dims, key=str)]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\quantities.py
        # replace all prefixes by their ratio to canonical units:
        scale_factor = scale_factor.replace(lambda x: isinstance(x, Prefix), lambda x: x.scale_factor)
        # replace all quantities by their ratio to canonical units:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\quantities.py
        # replace all quantities by their ratio to canonical units:
        scale_factor = scale_factor.replace(lambda x: isinstance(x, Quantity), lambda x: x.scale_factor)
        Quantity.SI_quantity_scale_factors[self] = scale_factor
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\tests\test_dimensions.py
    # tuple with more or less than two entries
    raises(TypeError, lambda: Dimension(("length", 1, 2)))
    raises(TypeError, lambda: Dimension(["length"]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\tests\test_dimensions.py
    # non-number power
    raises(TypeError, lambda: Dimension({"length": "a"}))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\tests\test_dimensions.py
    # non-number with named argument
    raises(TypeError, lambda: Dimension({"length": (1, 2)}))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\tests\test_dimensions.py
    # symbol should by Symbol or str
    raises(AssertionError, lambda: Dimension("length", symbol=1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\tests\test_dimensions.py
        # tuple with more or less than two entries
        raises(IndexError, lambda: length._register_as_base_dim())

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\units\util.py
    # quantity, chosen from those in the expression
    d = sift(expr.atoms(Quantity), lambda i: i.dimension)
    for k in d:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\vector\tests\test_functions.py
    # cross products
    raises(TypeError, lambda: cross(d, d))
    raises(TypeError, lambda: cross(d, zerod))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\vector\tests\test_functions.py
    # outer products
    raises(TypeError, lambda: outer(d, d))
    raises(TypeError, lambda: outer(d, zerod))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\vector\tests\test_output.py
    # cross products
    raises(TypeError, lambda: d ^ d)
    raises(TypeError, lambda: d ^ zerod)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\physics\vector\tests\test_output.py
    # outer products
    raises(TypeError, lambda: d | d)
    raises(TypeError, lambda: d | zerod)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\plotting\experimental_lambdify.py
# parser will distinguish it from the function 'sin' because functions are
# detected thanks to the opening parenthesis, but the lambda expression won't
# understand the difference if we have also the sin function.
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\plotting\experimental_lambdify.py
                # TODO: Cleanup the ugly special cases marked with xxx above.
                # Solution: use cmath and vectorize the final lambda.
                self.lambda_func = experimental_lambdify(
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\plotting\experimental_lambdify.py
                # Solution: use cmath and vectorize the final lambda.
                self.lambda_func = experimental_lambdify(
                    self.args, self.expr, use_python_cmath=True)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\plotting\experimental_lambdify.py
            #The result can be sympy.Float. Hence wrap it with complex type.
            result = complex(self.lambda_func(args))
            if abs(result.imag) > 1e-7 * abs(result):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\plotting\experimental_lambdify.py
        # Construct the lambda
        if self.print_lambda:
            print(newexpr)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\agca\ideals.py
        # TODO exponentiate by squaring
        return reduce(lambda x, y: x*y, [self]*exp, self.ring.ideal(1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\agca\modules.py
        # TODO this can be done more efficiently
        return reduce(lambda x, y: x.intersect(y),
            (self._module_quotient(self.container.submodule(x)) for x in other.gens))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\domains\tests\test_domains.py
    # XXX: This should also be like RR
    raises(DomainError, lambda: ALG.get_ring())

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\fglmtools.py
    L = [(i, 0) for i in range(ngens)]  # (i, j) corresponds to x_i * S[j]
    L.sort(key=lambda k_l: O_to(_incr_k(S[k_l[1]], k_l[0])), reverse=True)
    t = L.pop()
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\fglmtools.py
            # v is linearly independent from V
            P = _update(s, _lambda, P)
            S.append(_incr_k(S[t[1]], t[0]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\groebnertools.py
        # select the pair with minimum LCM(LM(f), LM(g))
        pr = min(P, key=lambda pair: order(monomial_lcm(f[pair[0]].LM, f[pair[1]].LM)))
        return pr
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\groebnertools.py
        # select p with minimum monomial according to the monomial ordering
        h = min([f[x] for x in F], key=lambda f: order(f.LM))
        ih = I[h]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\groebnertools.py
        # ordering divisors is on average more efficient [Cox] page 111
        G1 = sorted(G, key=lambda g: order(f[g].LM))
        ht = normal(h, G1)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\groebnertools.py
    # order according to the monomial ordering
    Gr = sorted(Gr, key=lambda f: order(f.LM), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\groebnertools.py
            # sort (other sorting methods/selection strategies were not as successful)
            CP.sort(key=lambda cp: cp_key(cp, ring), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\orderings.py
    ...     (lex, lambda m: m[:2]), # lex order on x_1 and x_2 of monomial
    ...     (grlex, lambda m: m[2:]) # grlex on y_1, y_2, y_3
    ... )
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\polymatrix.py
    # we don't want to sympify the elements of PolyMatrix
    _sympify = staticmethod(lambda x: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\solvers.py
    # solve by row-reduction
    echelon, pivots = matrix.rref(iszerofunc=lambda x: not x, simplify=lambda x: x)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\tests\test_injections.py
    # see if vring() really injects into global namespace
    raises(NameError, lambda: r1)
    R = _make_r1()
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\tests\test_injections.py
    # see if vfield() really injects into global namespace
    raises(NameError, lambda: f1)
    F = _make_f1()
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\tests\test_rootoftools.py
    # issue 8617
    raises(PolynomialError, lambda: rootof(exp(x), 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\polys\tests\test_rootoftools.py
    # the PurePoly dummy symbol
    raises(NotImplementedError, lambda: rootof(Poly(x**3 + y*x + 1, x), 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\glsl.py
            # return self.known_functions['add']+'(%s, %s)' % (a,b)
        neg, pos = partition(lambda arg: _coeff_isneg(arg), terms)
        s = pos = reduce(lambda a,b: add(a,b), map(lambda t: self._print(t),pos))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\glsl.py
            # sum the absolute values of the negative terms
            neg = reduce(lambda a,b: add(a,b), map(lambda n: self._print(-n),neg))
            # then subtract them from the positive terms
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\latex.py
    # Accents
    'mathring': lambda s: r'\mathring{'+s+r'}',
    'ddddot': lambda s: r'\ddddot{'+s+r'}',
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\latex.py
    # Faces
    'bold': lambda s: r'\boldsymbol{'+s+r'}',
    'bm': lambda s: r'\boldsymbol{'+s+r'}',
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\latex.py
    # Brackets
    'norm': lambda s: r'\left\|{'+s+r'}\right\|',
    'avg': lambda s: r'\left\langle{'+s+r'}\right\rangle',
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\latex.py
                # If quantities are present append them at the back
                args = sorted(args, key=lambda x: isinstance(x, Quantity) or
                              (isinstance(x, Pow) and
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\latex.py
        # Process modifiers, if any, and recurse
        for key in sorted(modifier_dict.keys(), key=lambda k:len(k), reverse=True):
            if s.lower().endswith(key) and len(s) > len(key):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty.py
        # If quantities are present append them at the back
        args = sorted(args, key=lambda x: isinstance(x, Quantity) or
                     (isinstance(x, Pow) and isinstance(x.base, Quantity)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# GREEK
g = lambda l: U('GREEK SMALL LETTER %s' % l.upper())
G = lambda l: U('GREEK CAPITAL LETTER %s' % l.upper())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
greek_letters = list(greeks) # make a copy
# deal with Unicode's funny spelling of lambda
greek_letters[greek_letters.index('lambda')] = 'lamda'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# deal with Unicode's funny spelling of lambda
greek_letters[greek_letters.index('lambda')] = 'lamda'

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# aliases
greek_unicode['lambda'] = greek_unicode['lamda']
greek_unicode['Lambda'] = greek_unicode['Lamda']
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# BOLD
b = lambda l: U('MATHEMATICAL BOLD SMALL %s' % l.upper())
B = lambda l: U('MATHEMATICAL BOLD CAPITAL %s' % l.upper())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# GREEK BOLD
gb = lambda l: U('MATHEMATICAL BOLD SMALL %s' % l.upper())
GB = lambda l: U('MATHEMATICAL BOLD CAPITAL  %s' % l.upper())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
greek_bold_letters = list(greeks) # make a copy, not strictly required here
# deal with Unicode's funny spelling of lambda
greek_bold_letters[greek_bold_letters.index('lambda')] = 'lamda'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# deal with Unicode's funny spelling of lambda
greek_bold_letters[greek_bold_letters.index('lambda')] = 'lamda'

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# SUBSCRIPT & SUPERSCRIPT
LSUB = lambda letter: U('LATIN SUBSCRIPT SMALL LETTER %s' % letter.upper())
GSUB = lambda letter: U('GREEK SUBSCRIPT SMALL LETTER %s' % letter.upper())
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # Accents
    'mathring': lambda s: center_accent(s, u'\N{COMBINING RING ABOVE}'),
    'ddddot': lambda s: center_accent(s, u'\N{COMBINING FOUR DOTS ABOVE}'),
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # # Faces -- these are here for some compatibility with latex printing
    # 'bold': lambda s: s,
    # 'bm': lambda s: s,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # 'bold': lambda s: s,
    # 'bm': lambda s: s,
    # 'cal': lambda s: s,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # 'bm': lambda s: s,
    # 'cal': lambda s: s,
    # 'scr': lambda s: s,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # 'cal': lambda s: s,
    # 'scr': lambda s: s,
    # 'frak': lambda s: s,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # 'scr': lambda s: s,
    # 'frak': lambda s: s,
    # Brackets
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
    # Brackets
    'norm': lambda s: u'\N{DOUBLE VERTICAL LINE}'+s+u'\N{DOUBLE VERTICAL LINE}',
    'avg': lambda s: u'\N{MATHEMATICAL LEFT ANGLE BRACKET}'+s+u'\N{MATHEMATICAL RIGHT ANGLE BRACKET}',
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# VERTICAL OBJECTS
HUP = lambda symb: U('%s UPPER HOOK' % symb_2txt[symb])
CUP = lambda symb: U('%s UPPER CORNER' % symb_2txt[symb])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\pretty\pretty_symbology.py
# RATIONAL
VF = lambda txt: U('VULGAR FRACTION %s' % txt)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
    "Pow": [(lambda base, exp: exp == -S.One, "recip", 2),           # 1.0/x
            (lambda base, exp: exp == S.Half, "sqrt", 2),            # x ** 0.5
            (lambda base, exp: exp == -S.Half, "sqrt().recip", 2),   # 1/(x ** 0.5)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: exp == S.Half, "sqrt", 2),            # x ** 0.5
            (lambda base, exp: exp == -S.Half, "sqrt().recip", 2),   # 1/(x ** 0.5)
            (lambda base, exp: exp == Rational(1, 3), "cbrt", 2),    # x ** (1/3)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: exp == -S.Half, "sqrt().recip", 2),   # 1/(x ** 0.5)
            (lambda base, exp: exp == Rational(1, 3), "cbrt", 2),    # x ** (1/3)
            (lambda base, exp: base == S.One*2, "exp2", 3),          # 2 ** x
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: exp == Rational(1, 3), "cbrt", 2),    # x ** (1/3)
            (lambda base, exp: base == S.One*2, "exp2", 3),          # 2 ** x
            (lambda base, exp: exp.is_integer, "powi", 1),           # x ** y, for i32
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: base == S.One*2, "exp2", 3),          # 2 ** x
            (lambda base, exp: exp.is_integer, "powi", 1),           # x ** y, for i32
            (lambda base, exp: not exp.is_integer, "powf", 1)],      # x ** y, for f64
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: exp.is_integer, "powi", 1),           # x ** y, for i32
            (lambda base, exp: not exp.is_integer, "powf", 1)],      # x ** y, for f64
    "exp": [(lambda exp: True, "exp", 2)],   # e ** x
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\rust.py
            (lambda base, exp: not exp.is_integer, "powf", 1)],      # x ** y, for f64
    "exp": [(lambda exp: True, "exp", 2)],   # e ** x
    "log": "ln",
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\str.py
                # match -0.5, which we don't want.
                return "%s/sqrt(%s)" % tuple(map(lambda arg: self._print(arg), (S.One, expr.base)))
            if expr.exp is -S.One:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_fcode.py
    # Check that inline conditional (merge) fails if standard isn't 95+
    raises(NotImplementedError, lambda: fcode(expr))
    code = fcode(expr, standard=95)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_fcode.py
    # see https://github.com/sympy/sympy/issues/15824
    raises(NotImplementedError, lambda: fcode(fp1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_fcode.py
    # see https://github.com/sympy/sympy/issues/15824
    raises(NotImplementedError, lambda: fcode(fd1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_julia.py
    #assert julia_code(A, assign_to=x) == "x = [3]"
    raises(ValueError, lambda: julia_code(A, assign_to=C))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_mathml.py
    assert mp.doprint(Symbol('kappa')) == '<ci>&#954;</ci>'
    assert mp.doprint(Symbol('lambda')) == '<ci>&#955;</ci>'
    assert mp.doprint(Symbol('mu')) == '<ci>&#956;</ci>'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_mathml.py
    assert mpp.doprint(Symbol('kappa')) == '<mi>&#954;</mi>'
    assert mpp.doprint(Symbol('lambda')) == '<mi>&#955;</mi>'
    assert mpp.doprint(Symbol('mu')) == '<mi>&#956;</mi>'
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_octave.py
    #assert mcode(A, assign_to=x) == "x = 3;"
    raises(ValueError, lambda: mcode(A, assign_to=C))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\printing\tests\test_rcode.py
    #expr = Piecewise((x, x < 1), (x**2, x > 1), (sin(x), x > 0))
    #raises(ValueError, lambda: rcode(expr))
    expr = 2*Piecewise((x, x < 1), (x**2, x<2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\series\tests\test_limits.py
    # test failing bi-directional limits
    raises(ValueError, lambda: limit(1/x, x, 0, dir="+-"))
    # approaching 0
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\series\tests\test_order.py
    # not supported (yet)
    raises(NotImplementedError, lambda: Order(x, (x, 0))*Order(x, (x, oo)))
    raises(NotImplementedError, lambda: Order(x, (x, oo))*Order(x, (x, 0)))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\conditionset.py
                # user will have to use cls.sym to get symbol
                dum = Symbol('lambda')
                if dum in condition.free_symbols or \
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\handlers\intersection.py
    # it's a linear equation
    eq = lambda r, i: r.start + i*r.step

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\sets.py
                isinstance(f, FunctionClass) # like cos
                or func_name(f) == '<lambda>'
                ):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\sets.py
    # Handle finite sets:
    fs_args, other = sift([x, y], lambda x: isinstance(x, FiniteSet), binary=True)
    if len(fs_args) == 2:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\tests\test_conditionset.py
    # Piecewise((Interval(1, 7), y > 5), (S.EmptySet, True)).
    raises(TypeError, lambda: 6 in ConditionSet(x, y > 5, Interval(1, 7)))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\tests\test_fancysets.py
    # ValueError for non-real sets
    raises(ValueError, lambda: normalize_theta_set(S.Complexes))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\sets\tests\test_sets.py
    # Test for Python lambda
    assert imageset(lambda x: 2*x, Interval(-2, 1)) == Interval(-4, 2)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\cse_main.py
    # that use them.
    funcs = sorted(funcs, key=lambda f: len(f.args))
    arg_tracker = FuncArgTracker(funcs)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\fu.py
# tuples are chains  --  (f, g) -> lambda x: g(f(x))
# lists are choices  --  [f, g] -> lambda x: min(f(x), g(x), key=objective)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\hyperexpand.py
        # find the nearest origin
        possible.sort(key=lambda x: x[0])
        for _, repl, f, func2 in possible:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\hyperexpand.py
    # apply the plan for poly
    p = apply_operators(p, ops, lambda f: z0*f.diff(z0))
    p = apply_operators(p*premult, ops0, lambda f: z0*f.diff(z0))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\tests\test_fu.py
    # and that key2 works when key1 is False
    do = lambda x: Add(*[i**(i%2) for i in x.args])
    process_common_addends(Add(*[1, 2, 3, 4], evaluate=False), do,
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        TR12,  # expand tan of sum
        lambda x: _eapply(factor, x, trigs),
        TR2,  # tan-cot -> sin-cos
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        TR2,  # tan-cot -> sin-cos
        [identity, lambda x: _eapply(_mexpand, x, trigs)],
        TR2i,  # sin-cos ratio -> tan
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        TR2i,  # sin-cos ratio -> tan
        lambda x: _eapply(lambda i: factor(i.normal()), x, trigs),
        TR14,  # factored identities
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        TR11, TR6, # reduce double angles and rewrite cos pows
        lambda x: _eapply(factor, x, trigs),
        TR14,  # factored powers of identities
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        TR14,  # factored powers of identities
        [identity, lambda x: _eapply(_mexpand, x, trigs)],
        TR10i,  # sin-cos products > sin-cos of sums
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        [identity, TR8],  # sin-cos products -> sin-cos of sums
        [identity, lambda x: TR2i(TR2(x))],  # tan -> sin-cos -> tan
        [
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\simplify\trigsimp.py
        [identity, TR2i],  # sin-cos ratio to tan
        [identity, lambda x: _eapply(
            expand_mul, TR22(x), trigs)],  # tan-cot to sec-csc
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\ode.py
            # still working.
            return lambda expr: Integral(expr, var) + constant()

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solvers.py
        # rewrite hyperbolics in terms of exp
        f[i] = f[i].replace(lambda w: isinstance(w, HyperbolicFunction),
                lambda w: w.rewrite(exp))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solvers.py
                        # unconditionally take the simpification of v
                        v = _eval_simpify(ratio=2, measure=lambda x: 1)
                except TypeError:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solvers.py
        u = Dummy()  # used in solution checking
        for eq in ordered(failed, lambda _: len(_ok_syms(_))):
            newresult = []
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solvers.py
        # divide all elements in the current row by the pivot
        matrix.row_op(i, lambda x, _: x * pivot_inv)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solvers.py
                # pivot and multiplied by extracted coefficient
                matrix.row_op(k, lambda x, j: simplify(x - matrix[i, j]*coeff))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\solveset.py
    # assign the solvers to use
    solver = lambda f, x, domain=domain: _solveset(f, x, domain)
    inverter = lambda f, rhs, symbol: _invert(f, rhs, symbol, domain)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # to ignore constant factors, use diophantine
    raises(TypeError, lambda: diop_solve(x/2))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # - can't both be negative
    raises(TypeError, lambda: descent(-1, -3))
    # A can't be zero unless B != 1
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # A can't be zero unless B != 1
    raises(ZeroDivisionError, lambda: descent(0, 3))
    # supposed to be square-free
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # supposed to be square-free
    raises(TypeError, lambda: descent(4, 3))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # solvers have not been written for every type
    raises(NotImplementedError, lambda: diophantine(x*y**2 + 1))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_diophantine.py
    # it's ok if these pass some day when the solvers are implemented
    raises(NotImplementedError, lambda: diophantine(x**2 + y**2 + x*y + 2*y*z - 12))
    raises(NotImplementedError, lambda: diophantine(x**3 + y**2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_inequalities.py
    # make sure iter_solutions gets a default value
    raises(NotImplementedError, lambda: isolve(
        Eq(cos(x)**2 + sin(x)**2, 1), x))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_numeric.py
    # Testing checks on number of inputs
    raises(TypeError, lambda: nsolve(Eq(2*x, 2)))
    raises(TypeError, lambda: nsolve(Eq(2*x, 2), x, 1, 2))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_ode.py
    # These tests only handle cases not checked below.
    raises(ValueError, lambda: checkodesol(f(x, y).diff(x), Eq(f(x, y), x)))
    raises(ValueError, lambda: checkodesol(f(x).diff(x), Eq(f(x, y),
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_ode.py
    # XXX: Ought to be ValueError
    raises(ValueError, lambda: solve_ics([Eq(f(x), C1*sin(x) + C2*cos(x))], [f(x)], [C1, C2], {f(0): 1, f(pi): 1}))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_ode.py
    # Degenerate case. f'(0) is identically 0.
    raises(ValueError, lambda: solve_ics([Eq(f(x), sqrt(C1 - x**2))], [f(x)], [C1], {f(x).diff(x).subs(x, 0): 0}))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_ode.py
    # See also issue 3793, test Z13.
    raises(ValueError, lambda: dsolve(f(x).diff(x), f(y)))
    assert classify_ode(f(x).diff(x), f(y), dict=True) == \
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_pde.py
    # Wrong number of arguments
    raises(ValueError, lambda: pde_separate_mul(eq, F(x, y, z), [X(x), Y(y)]))
    # Wrong variables: [x, y] -> [x, z]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    # for eq_down. Actual answers, as determined numerically are approx. +/- 0.83
    raises(NotImplementedError, lambda:
        solve(sinh(x)*sinh(sinh(x)) + cosh(x)*cosh(sinh(x)) - 3))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    # watch out for recursive loop in tsolve
    raises(NotImplementedError, lambda: solve((x + 2)**y*x - 3, x))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    # fails through a different code path
    raises(NotImplementedError, lambda: solve(-sqrt(2) + cosh(x)/x))
    # unrad some
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    #    x**15 - x**3*cosh(x)**5 - 3*x**2*cosh(x)**5 - 3*x*cosh(x)**5 - cosh(x)**5, [])
    raises(NotImplementedError, lambda:
        unrad(sqrt(cosh(x)/x) + root(x + 1,3)*sqrt(x) - 1))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    # coverage test
    raises(NotImplementedError, lambda: solve(x - sin(x)*log(y - x), x))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solvers.py
    assert solve(a*x**5 - x + 1, x) == []  # incomplete solution allowed
    raises(NotImplementedError, lambda:
        solve(a*x**5 - x + 1, x, incomplete=False))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    # 1) no symbols are given
    raises(ValueError, lambda: linear_eq_to_matrix(eqns3))
    # 2) there are duplicates
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    # 2) there are duplicates
    raises(ValueError, lambda: linear_eq_to_matrix(eqns3, [x, x, y]))
    # 3) there are non-symbols
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    # 3) there are non-symbols
    raises(ValueError, lambda: linear_eq_to_matrix(eqns3, [x, 1/a, y]))
    # 4) a nonlinear term is detected in the original expression
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    # 4) a nonlinear term is detected in the original expression
    raises(ValueError, lambda: linear_eq_to_matrix(Eq(1/x + x, 1/x)))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    # raise ValueError for garbage value
    raises(ValueError, lambda: linsolve(Eqns))
    raises(ValueError, lambda: linsolve(x1))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\solvers\tests\test_solveset.py
    #raise ValueError if equations are non-linear in given variables
    raises(ValueError, lambda: linsolve([x + y - 1, x ** 2 + y - 3], [x, y]))
    raises(ValueError, lambda: linsolve([cos(x) + y, x + y], [x, y]))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\stats\tests\test_continuous_rv.py
    Normal('X', a, p)  # No error raised
    raises(ValueError, lambda: Exponential('x', m))
    Exponential('Ex', p)  # No error raised
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\stats\tests\test_finite_rv.py
    raises(ValueError, lambda: Die('X', -1))  # issue 8105: negative sides.
    raises(ValueError, lambda: Die('X', 0))
    raises(ValueError, lambda: Die('X', 1.5))  # issue 8103: non integer sides.
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\array\ndim_array.py
        # Types are (base: scalar, self: array)
        return self.applyfunc(lambda x: base.diff(x))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tensor.py
        # get sorted indices according to their position:
        free = sorted(self.free, key=lambda x: x[1])
        return [i[0] for i in free]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tensor.py
        # For some reason, `TensMul` gets replaced by `Mul`, correct it:
        expr = expr.replace(lambda x: isinstance(x, (Mul, TensMul)), lambda x: TensMul(*x.args).doit())
        return expr
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tensor.py
        # Extract non-tensor coefficients:
        coeff = reduce(lambda a, b: a*b, [arg for arg in args if not isinstance(arg, TensExpr)], S.One)
        args = [arg for arg in args if isinstance(arg, TensExpr)]
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__mul__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__add__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__radd__(t, 'a'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__add__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__radd__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__sub__(t, 'a'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__radd__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__sub__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__rsub__(t, 'a'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__sub__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__rsub__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__div__(t, 'a'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__rsub__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__div__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__rdiv__(t, 'a'))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
    #raises(NotImplementedError, lambda: TensExpr.__div__(t, 'a'))
    #raises(NotImplementedError, lambda: TensExpr.__rdiv__(t, 'a'))
    with ignore_warnings(SymPyDeprecationWarning):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\tensor\tests\test_tensor.py
        # DO NOT REMOVE THIS AFTER DEPRECATION REMOVED:
        raises(ValueError, lambda: A(a, b)**2)
    raises(NotImplementedError, lambda: 2**A(a, b))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\autowrap.py
            # convert OutputArguments to return value like f2py
            args = filter(lambda x: not isinstance(
                x, OutputArgument), routine.arguments)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\codegen.py
        # setup input argument list
        output_args.sort(key=lambda x: str(x.name))
        arg_list = list(output_args)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\codegen.py
        # setup input argument list
        output_args.sort(key=lambda x: str(x.name))
        arg_list = list(output_args)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\lambdify.py
        #XXX: This has to be done here because of circular imports
        from sympy.printing.lambdarepr import lambdarepr

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\lambdify.py
        #XXX: This has to be done here because of circular imports
        from sympy.printing.lambdarepr import LambdaPrinter

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\misc.py
        #from sympy.core.compatibility import reduce
        #print("%s%s %s%s" % (_debug_iter, reduce(lambda x, y: x + y, \
        #    map(lambda x: '-', range(1, 2 + _debug_iter))), get_function_name(f), args))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\misc.py
        #print("%s%s %s%s" % (_debug_iter, reduce(lambda x, y: x + y, \
        #    map(lambda x: '-', range(1, 2 + _debug_iter))), get_function_name(f), args))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\runtests.py
    # count up from 0, do not print 0
    print_counter = lambda i : (print("rerun %d" % (rerun-i))
                                if rerun-i else None)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\runtests.py
    # count up from 0, do not print 0
    print_counter = lambda i : (print("rerun %d" % (rerun-i))
                                if rerun-i else None)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\runtests.py
                # Sorting of XFAILed functions isn't fixed yet :-(
                funcs.sort(key=lambda x: inspect.getsourcelines(x)[1])
                i = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\runtests.py
        # by text and function name.
        tests.sort(key=lambda x: -x.lineno)

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # make sure correct number of args required
    raises(TypeError, lambda: f(0))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # no vargs given
    raises(TypeError, lambda: lambdify(1))
    # same with vector exprs
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # same with vector exprs
    raises(TypeError, lambda: lambdify([1, 2]))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # arctan is in numpy module and should not be available
    raises(NameError, lambda: lambdify(x, arctan(x), "sympy"))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # a lambdified numexpr expression will throw an exception
    from sympy.printing.lambdarepr import NumExprPrinter

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # make sure correct number of args required
    raises(TypeError, lambda: f(0))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # The line below should probably fail upon construction (before calling with "(inp)"):
    raises(Exception, lambda: lambdify(x, x_dot_mtx, printer=p3)(inp))

#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # Because the module dictionaries form the namespace of the
    # generated lambda, this meant that the behavior of a previously
    # generated lambda function could change as a result of later calls
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # generated lambda, this meant that the behavior of a previously
    # generated lambda function could change as a result of later calls
    # to lambdify.
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # to lambdify.
    n1 = {'f': lambda x: 'first f'}
    n2 = {'f': lambda x: 'second f',
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # the sense that we can have more than one function with the same name
    f = implemented_function('f', lambda x: 2*x)
    g = implemented_function('f', lambda x: math.sqrt(x))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # Error for functions with same name and different implementation
    f2 = implemented_function("f", lambda x: x + 101)
    raises(ValueError, lambda: lambdify(x, f(f2(x))))
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # make an implemented function and test
    f = implemented_function("f", lambda x: x + 100)
    assert lambdify(x, f(x))(0) == 100
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # Check that imp preferred to other namespaces by default
    d = {'f': lambda x: x + 99}
    lam = lambdify(x, f(x), d)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_lambdify.py
    # Test for issue 7452. The automatic dummification should ensure use of
    # Python reserved keywords as symbol names will create valid lambda
    # functions. This is an additional regression test.
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_pickling.py
    #
    # for c in (ProductOrder, ProductOrder((LexOrder(),       lambda m: m[:2]),
    #                                      (GradedLexOrder(), lambda m: m[2:]))):
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_pickling.py
    # for c in (ProductOrder, ProductOrder((LexOrder(),       lambda m: m[:2]),
    #                                      (GradedLexOrder(), lambda m: m[2:]))):
    #     check(c)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\tests\test_pickling.py
    # TODO: PicklingError: Can't pickle <function <lambda> at 0x38578c0>: it's not found as __main__.<lambda>
    # for c in (ComputationFailed, ComputationFailed(lambda t: t, 3, None)):
    #    check(c)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\utilities\_compilation\runners.py
            # both gnu and intel compilers use '-c' for disabling linker
            self.flags = list(filter(lambda x: x != '-c', self.flags))
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\vector\tests\test_coordsysrect.py
    # Cartesian with `lambda`
    a = CoordSys3D('a', lambda x, y, z: (x, y, z))
    assert a.transformation_to_parent() == (a.x1, a.x2, a.x3)
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\vector\tests\test_coordsysrect.py
    # Spherical with `lambda`
    a = CoordSys3D('a', lambda r, theta, phi: (r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)),
                   variable_names=["r", "theta", "phi"])
#########################################################################################
C:\Users\muvva\Desktop\testing\sympy-master\sympy\vector\tests\test_coordsysrect.py
    # Cylindrical with `lambda`
    a = CoordSys3D('a', lambda r, theta, z:
        (r*cos(theta), r*sin(theta), z),
#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\docker\start.py
# Utility functions
convert = lambda src, dst, environ: open(dst, "w").write(jinja2.Template(open(src).read()).render(**environ))

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\api\auth.py
        # access_tokens include a nonce for uniqueness: any value is acceptable
        v.satisfy_general(lambda c: c.startswith("nonce = "))

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\federation\send_queue.py
        # we make a new function, so we need to make a new function so the inner
        # lambda binds to the queue rather than to the name of the queue which
        # changes. ARGH.
#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\federation\send_queue.py
        # filter here just in case.
        local_states = list(filter(lambda s: self.is_mine_id(s.user_id), states))

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\federation\transaction_queue.py
        # Sort based on the order field
        pending_pdus.sort(key=lambda t: t[1])
        pdus = [x[0] for x in pending_pdus]
#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\handlers\federation.py
        # tell clients about them in order.
        missing_events.sort(key=lambda x: x.depth)

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\handlers\federation.py
        # Step 2: Persist the rest of the events in the chunk one by one
        events.sort(key=lambda e: e.depth)

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\push\presentable_names.py
        # dictionary iteration order)
        all_members.sort(key=lambda e: e.origin_server_ts)
        other_members = [m for m in all_members if m.state_key != user_id]
#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\storage\event_federation.py
            # Sort by reverse depth, so we point to the most recent.
            res.sort(key=lambda a: -a[2])

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\storage\event_push_actions.py
        # by stream_ordering, oldest first.
        notifs.sort(key=lambda r: r['stream_ordering'])

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\storage\event_push_actions.py
        # by received_ts (most recent first)
        notifs.sort(key=lambda r: -(r['received_ts'] or 0))

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\synapse\util\__init__.py
    # call islice until it returns an empty tuple
    return iter(lambda: tuple(islice(sourceiter, size)), ())

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\tests\util\caches\test_ttlcache.py
        # enough for the first entry to expire, but not the rest
        self.mock_timer.side_effect = lambda: 110.0

#########################################################################################
C:\Users\muvva\Desktop\testing\synapse-master\tests\utils.py
    # beforehand and pass it in to the HS's constructor (chicken / egg)
    hs.get_auth_handler().hash = lambda p: hashlib.md5(p.encode('utf8')).hexdigest()
    hs.get_auth_handler().validate_hash = (
#########################################################################################
C:\Users\muvva\Desktop\testing\ta-lib-master\talib\__init__.py
    # pandas not available, nothing to wrap
    _pandas_wrapper = lambda x: x
else:
#########################################################################################
C:\Users\muvva\Desktop\testing\tablib-master\tablib\packages\dbfpy\record.py
    # XXX: validate self.index before calculating position?
    position = property(lambda self: self.dbf.header.headerLength + \
        self.index * self.dbf.header.recordLength)
#########################################################################################
C:\Users\muvva\Desktop\testing\tablib-master\tablib\packages\dbfpy3\record.py
    # XXX: validate self.index before calculating position?
    position = property(lambda self: self.dbf.header.headerLength + \
        self.index * self.dbf.header.recordLength)
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
            # string representation of `attribute` is equal to `value`
            return lambda el: el._attr_value_as_string(attribute) == value
        elif operator == '~':
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
            # string representation of `attribute` starts with `value`
            return lambda el: el._attr_value_as_string(
                attribute, '').startswith(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
            # string represenation of `attribute` ends with `value`
            return lambda el: el._attr_value_as_string(
                attribute, '').endswith(value)
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
            # string representation of `attribute` contains `value`
            return lambda el: value in el._attr_value_as_string(attribute, '')
        elif operator == '|':
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
                # direct children of each tag in the current context.
                recursive_candidate_generator = lambda tag: tag.children
            elif token == '~':
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\bs4\element.py
                # siblings of each tag in the current context.
                recursive_candidate_generator = lambda tag: tag.next_siblings
            elif token == '+':
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\lib\cpstats.py
            # Use a lambda so the ip gets updated by tools.proxy later
            'Client': lambda s: '%s:%s' % (r.ip, r.port),
            'End Time': None,
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\lib\httpauth.py
    # test it
    pass_through = lambda password, username=None: password
    encrypt = encrypt or pass_through
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\process\servers.py
        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'
        self.fcgiserver._installSignalHandlers = lambda: None
        self.fcgiserver._oldSIGs = []
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\process\servers.py
        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'
        self.scgiserver._installSignalHandlers = lambda: None
        self.scgiserver._oldSIGs = []
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\wsgiserver\wsgiserver2.py
        # Sort the apps by len(path), descending
        apps.sort(cmp=lambda x, y: cmp(len(x[0]), len(y[0])))
        apps.reverse()
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 2
    iteritems = lambda d: d.iteritems()
    copyitems = lambda d: d.items()
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 3
    iteritems = lambda d: d.items()
    copyitems = lambda d: list(d.items())
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 2
    iterkeys = lambda d: d.iterkeys()
    copykeys = lambda d: d.keys()
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 3
    iterkeys = lambda d: d.keys()
    copykeys = lambda d: list(d.keys())
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 2
    itervalues = lambda d: d.itervalues()
    copyvalues = lambda d: d.values()
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cpcompat.py
    # Python 3
    itervalues = lambda d: d.values()
    copyvalues = lambda d: list(d.values())
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\cherrypy\_cprequest.py
    # Uncomment for stage debugging
    # stage = property(lambda self: self._stage, lambda self, v: print(v))

#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\feedparser.py
        # all tags must be in a restricted subset of valid HTML tags
        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,
            re.findall(r'</?(\w+)',s)): return
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\feedparser.py
       safe_pattern=re.compile(_s2bytes('\s+(\w+)\s+"(&#\w+;|[^&"]*)"'))
       safe_entities=filter(lambda e: safe_pattern.match(e),entity_results)
       if safe_entities:
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\ipaddr.py
    # backwards compatibility
    IsRFC1918 = lambda self: self.is_private
    IsMulticast = lambda self: self.is_multicast
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\oauthlib\common.py
        # Convert to unicode using encoding if given, else assume unicode
        encode = lambda x: to_unicode(x, encoding) if encoding else x

#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\oauthlib\oauth1\rfc5849\parameters.py
    # character (ASCII code 38)
    merged.sort(key=lambda i: i[0].startswith('oauth_'))
    return merged
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\oauthlib\oauth1\rfc5849\__init__.py
        # Convert to unicode using encoding if given, else assume unicode
        encode = lambda x: to_unicode(x, encoding) if encoding else x

#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\plexapi\base.py
        # sort the keys since the randomness fucks with my tests..
        sorted_params = sorted(params.items(), key=lambda val: val[0])
        return self._server.url('/%s/:/transcode/universal/start.m3u8?%s' %
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\plexapi\myplex.py
        # Only check non-local connections unless we own the resource
        connections = sorted(self.connections, key=lambda c: c.local, reverse=True)
        owned_or_unowned_non_local = lambda x: self.owned or (not self.owned and not x.local)
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\requests\adapters.py
        # Can't handle by adding 'proxy_manager' to self.__attrs__ because
        # self.poolmanager uses a lambda function, which isn't pickleable.
        self.proxy_manager = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\tqdm\_main.py
                callback(1 + buf.count(delim))  # n += 1 + buf.count(delim)
            getattr(fout, 'flush', lambda: None)()  # pragma: no cover
            return  # n
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\tqdm\_tqdm.py
        >>> # Now you can use `progress_apply` instead of `apply`
        >>> df.groupby(0).progress_apply(lambda x: x**2)

#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\tqdm\_tqdm_pandas.py
    >>> # Now you can use `progress_apply` instead of `apply`
    >>> df.groupby(0).progress_apply(lambda x: x**2)

#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\lib\urllib3\util\retry.py
        # We want to consider only the last consecutive errors sequence (Ignore redirects).
        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,
                                                    reversed(self.history))))
#########################################################################################
C:\Users\muvva\Desktop\testing\Tautulli-master\plexpy\libraries.py
        # Sort results
        results = sorted(results, key=lambda k: k['sort_title'].lower())
        sort_order = json_data['order']
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\examples\chat\chatboxa_nodb.py
        # sort by date
        messages.sort(key=lambda m: m['date'])
        return messages
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\examples\chat\chatboxa_nodb.py
        # The `capture` criteria means to capture all messages.
        super(MessageSaver, self).__init__(seed_tuple, capture=[[lambda msg: not telepot.is_event(msg)]])
        self._store = store
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\examples\chat\chatbox_nodb.py
        # sort by date
        messages.sort(key=lambda m: m['date'])
        return messages
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\examples\chat\chatbox_nodb.py
        # The `capture` criteria means to capture all messages.
        super(MessageSaver, self).__init__(seed_tuple, capture=[[lambda msg: not telepot.is_event(msg)]])
        self._store = store
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\telepot\namedtuple.py
    # Get around by appending a '_', e.g. dict['from'] => namedtuple.from_
    keymap = [(k.rstrip('_'), k) for k in filter(lambda e: e in ['from_'], field_names)]

#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\telepot\text.py
    # preserve index positions.
    seq = list(map(lambda c,i:
                       escape_map[c]     # escape special characters
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\telepot\text.py
    # Ensure smaller offsets come first
    sorted_entities = sorted(entities, key=lambda e: e['offset'])
    offset = 0
#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\test\test27_inline.py
        # map `from` to `from_`
        fields = list(map(lambda k: k+'_' if k in ['from'] else k, keys))

#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\test\test27_send.py
        # map `from` to `from_`
        fields = list(map(lambda k: k+'_' if k in ['from'] else k, keys))

#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\test\test27_updates.py
        # map `from` to `from_`
        fields = list(map(lambda k: k+'_' if k in ['from'] else k, keys))

#########################################################################################
C:\Users\muvva\Desktop\testing\telepot-master\test\test3_inline.py
        # map `from` to `from_`
        fields = list(map(lambda k: k+'_' if k in ['from'] else k, keys))

#########################################################################################
C:\Users\muvva\Desktop\testing\Telethon-master\telethon\client\updates.py
        # Pings' ID don't really need to be secure, just "random"
        rnd = lambda: random.randrange(-2**63, 2**63)
        while self.is_connected():
#########################################################################################
C:\Users\muvva\Desktop\testing\Telethon-master\telethon_generator\docswriter.py
        # Utility functions
        self.type_to_path = lambda t: self._rel(type_to_path(t))

#########################################################################################
C:\Users\muvva\Desktop\testing\Telethon-master\telethon_generator\utils.py
    # Courtesy of http://stackoverflow.com/a/31531797/4759433
    result = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), name)
    result = result[:1].upper() + result[1:].replace('_', '')
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\examples\mnist\keras\mnist_mlp_estimator.py
    # for SPARK mode, just use CSV format as an example
    images = sc.textFile(args.images).map(lambda ln: [float(x) for x in ln.split(',')])
    labels = sc.textFile(args.labels).map(lambda ln: [float(x) for x in ln.split(',')])
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\examples\mnist\mnist_data_setup.py
  else:  # format == "tfr":
    tfRDD = imageRDD.zip(labelRDD).map(lambda x: (bytearray(toTFExample(x[0], x[1])), None))
    # requires: --jars tensorflow-hadoop-1.0-SNAPSHOT.jar
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\examples\mnist\mnist_data_setup.py
#      return [output_path]
#    tfRDD = imageRDD.zip(labelRDD).map(lambda x: toTFExample(x[0], x[1]))
#    tfRDD.mapPartitionsWithIndex(writeTFRecords).collect()
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\examples\mnist\spark\mnist_spark.py
else:  # args.format == "csv":
  images = sc.textFile(args.images).map(lambda ln: [int(x) for x in ln.split(',')])
  labels = sc.textFile(args.labels).map(lambda ln: [float(x) for x in ln.split(',')])
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\tensorflowonspark\dfutil.py
  # convert serialized protobuf to tf.Example to Row
  example_rdd = tfr_rdd.mapPartitions(lambda x: fromTFExample(x, binary_features))

#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\tensorflowonspark\pipeline.py
      # Run on a single exeucutor
      sc.parallelize([1], 1).foreachPartition(lambda it: _export(it, self.export_fn, tf_args))

#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\tensorflowonspark\pipeline.py
    # convert to a DataFrame-friendly format
    rows_out = rdd_out.map(lambda x: Row(*x))
    return spark.createDataFrame(rows_out, output_cols)
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\tensorflowonspark\TFCluster.py
      # Spark Streaming
      dataRDD.foreachRDD(lambda rdd: rdd.foreachPartition(TFSparkNode.train(self.cluster_info, self.cluster_meta, feed_timeout=feed_timeout, qname=qname)))
    else:
#########################################################################################
C:\Users\muvva\Desktop\testing\TensorFlowOnSpark-master\tensorflowonspark\TFSparkNode.py
    # construct a TensorFlow clusterspec from cluster_info
    sorted_cluster_info = sorted(cluster_info, key=lambda k: k['executor_id'])
    cluster_spec = {}
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\reconstruction.py
        # =====================================================================
        lambda_l2_w = 0.004
        learning_rate = 0.0001
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\reconstruction.py
        ) + tf.contrib.layers.l2_regularizer(lambda_l2_w)(self.train_params[2])  # faster than the code below
        # L2_w = lambda_l2_w * tf.reduce_mean(tf.square(self.train_params[0])) + lambda_l2_w * tf.reduce_mean( tf.square(self.train_params[2]))

#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
        # Creats the cell function
        # cell_instance_fn=lambda: cell_fn(num_units=n_hidden, **self.cell_init_args) # HanSheng
        rnn_creator = lambda: cell_fn(num_units=n_hidden, **self.cell_init_args)
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
            #                     output_keep_prob=out_keep_prob)
            cell_creator = lambda is_last=True: DropoutWrapper_fn(
                rnn_creator(), input_keep_prob=in_keep_prob, output_keep_prob=out_keep_prob if is_last else 1.0
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
                except Exception:  # when GRU
                    # cell_instance_fn=lambda: MultiRNNCell_fn([cell_instance_fn2() for _ in range(n_layer)]) # HanSheng
                    self.cell = MultiRNNCell_fn([cell_creator(is_last=i == n_layer - 1) for i in range(n_layer)])
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
            # Creats the cell function
            # cell_instance_fn=lambda: cell_fn(num_units=n_hidden, **self.cell_init_args) # HanSheng
            rnn_creator = lambda: cell_fn(num_units=n_hidden, **self.cell_init_args)
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
                    # cell_instance_fn1=cell_instance_fn            # HanSheng
                    # cell_instance_fn=lambda: DropoutWrapper_fn(
                    #                     cell_instance_fn1(),
#########################################################################################
C:\Users\muvva\Desktop\testing\tensorlayer-master\tensorlayer\layers\recurrent.py
                    #                     output_keep_prob=out_keep_prob)
                cell_creator = lambda is_last=True: DropoutWrapper_fn(
                    rnn_creator(), input_keep_prob=in_keep_prob, output_keep_prob=out_keep_prob if is_last else 1.0
#########################################################################################
C:\Users\muvva\Desktop\testing\textdistance-master\licenses_example\compare.py
# show 5 most similar
sorted_distances = sorted(distances.items(), key=lambda d: d[1])
for name, distance in islice(sorted_distances, 5):
#########################################################################################
C:\Users\muvva\Desktop\testing\textdistance-master\textdistance\algorithms\token_based.py
        sequences = [self._count_counters(s) for s in sequences]    # ints
        prod = reduce(lambda x, y: x * y, sequences)

#########################################################################################
C:\Users\muvva\Desktop\testing\textdistance-master\textdistance\libraries.py
            # sort libs by speed
            self.libs[alg].sort(key=lambda lib: libs_names.index([lib.module_name, lib.func_name]))

#########################################################################################
C:\Users\muvva\Desktop\testing\tinydb-master\tests\test_queries.py
    # Test special methods: custom test
    query = Query().key1.int.test(lambda x: x == 3)
    assert query({'key1': {'int': 3}})
#########################################################################################
C:\Users\muvva\Desktop\testing\tinydb-master\tests\test_tinydb.py
    # bypassing the query cache
    db._table_cache[TinyDB.DEFAULT_TABLE]._read = lambda: {}

#########################################################################################
C:\Users\muvva\Desktop\testing\tinydb-master\tinydb\queries.py
        # (a & b == b & a)
        return QueryImpl(lambda value: self(value) and other(value),
                         ('and', frozenset([self.hashval, other.hashval])))
#########################################################################################
C:\Users\muvva\Desktop\testing\tinydb-master\tinydb\queries.py
        # (a | b == b | a)
        return QueryImpl(lambda value: self(value) or other(value),
                         ('or', frozenset([self.hashval, other.hashval])))
#########################################################################################
C:\Users\muvva\Desktop\testing\toga-master\src\cocoa\toga_cocoa\app.py
            # Quit should always be the last item, in a section on it's own
            toga.Command(lambda s: self.exit(), 'Quit ' + app_name, shortcut='q', group=toga.Group.APP, section=sys.maxsize),

#########################################################################################
C:\Users\muvva\Desktop\testing\toga-master\src\winforms\toga_winforms\app.py
            # Quit should always be the last item, in a section on it's own
            toga.Command(lambda s: self.exit(), 'Exit ' + self.interface.name, shortcut='q', group=toga.Group.FILE,
                         section=sys.maxsize),
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\functoolz.py
    >>> # Use key function that ignores extraneous keyword arguments
    >>> @memoize(key=lambda args, kwargs: args)
    ... def add(x, y, verbose=False):
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\itertoolz.py
    >>> reduceby('state',                        # doctest: +SKIP
    ...          lambda acc, x: acc + x['cost'],
    ...          projects, 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Single argument should not be tupled as a key.  No keywords.
    mf = memoize(lambda x: False, cache={1: True})
    assert mf(1) is True
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Single argument must be tupled if signature has varargs.  No keywords.
    mf = memoize(lambda x, *args: False, cache={(1,): True, (1, 2): 2})
    assert mf(1) is True
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # More than one argument is always tupled.  No keywords.
    mf = memoize(lambda x, y: False, cache={(1, 2): True})
    assert mf(1, 2) is True
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Nullary function (no inputs) uses empty tuple as the key
    mf = memoize(lambda: False, cache={(): True})
    assert mf() is True
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # keyword arguments may be passed as unnamed args.
    mf = memoize(lambda x, y=0: False,
                 cache={((1,), frozenset((('y', 2),))): 2,
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Keyword-only signatures must still have an "args" tuple.
    mf = memoize(lambda x=0: False, cache={(None, frozenset((('x', 1),))): 1,
                                           ((1,), None): 2})
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    assert cg(0) == 2  # pass "a" as arg, not kwarg
    assert raises(TypeError, lambda: cg(1, 2))  # pass "b" as arg AND kwarg

#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # No args:
    assert complement(lambda: False)()
    assert not complement(lambda: True)()
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Multiple arities:
    both_even = lambda a, b: iseven(a) and iseven(b)
    assert complement(both_even)(1, 2)
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_functoolz.py
    # Generic truthiness:
    assert complement(lambda: "")()
    assert complement(lambda: 0)()
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\tests\test_itertoolz.py
    # non-variadic usage
    assert raises(TypeError, lambda: list(diff([])))
    assert raises(TypeError, lambda: list(diff([[]])))
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\_signatures.py
#
# The tuple spec is (num_position_args, lambda_func, keyword_only_args).
#
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\_signatures.py
#
#   lambda_func:
#       - lambda function that matches a signature of a builtin, but does
#########################################################################################
C:\Users\muvva\Desktop\testing\toolz-master\toolz\_signatures.py
#   lambda_func:
#       - lambda function that matches a signature of a builtin, but does
#         not include keyword-only arguments.
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\http1connection.py
        # Register the future on the IOLoop so its errors get logged.
        self.stream.io_loop.add_future(fut, lambda f: f.result())

#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\ioloop.py
        t_future = Future()  # type: Future[_T]
        self.add_future(c_future, lambda f: chain_future(f, t_future))
        return t_future
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\iostream.py
            # failure was never examined.
            future.add_done_callback(lambda f: f.exception())
            raise
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\iostream.py
        future = Future()  # type: Future[None]
        future.add_done_callback(lambda f: f.exception())
        self._write_futures.append((self._total_write_index, future))
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\asyncio_test.py
        # IOLoop doesn't (currently) close the underlying loop.
        self.executor.submit(lambda: asyncio.get_event_loop().close()).result()

#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\httpclient_test.py
        # subtle and I don't fully understand it; the failure does not
        # manifest if that lambda isn't there or is a simpler object
        # like an int (nor does it manifest in the tornado test suite
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\ioloop_test.py
        # HACK: wait two IOLoop iterations for the GC to happen.
        self.io_loop.add_callback(lambda: self.io_loop.add_callback(self.stop))
        self.wait()
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\ioloop_test.py
        # passed to remove_timeout.
        handle = self.io_loop.add_timeout(self.io_loop.time(), lambda: None)
        self.assertFalse(handle is None)
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\ioloop_test.py
        # so their errors are logged without stopping the test.
        self.io_loop.add_callback(lambda: 1 / 0)
        self.io_loop.add_callback(self.stop)
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\ioloop_test.py
        # logged without stopping the test.
        self.io_loop.spawn_callback(lambda: 1 / 0)
        self.io_loop.add_callback(self.stop)
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\locks_test.py
        # resolving third future.
        futures[1].add_done_callback(lambda _: c.notify())
        c.notify(2)
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\test\tcpclient_test.py
        # to be non-zero if we do not also pass AI_PASSIVE.
        addrinfo = self.io_loop.run_sync(lambda: Resolver().resolve("localhost", 80))
        families = set(addr[0] for addr in addrinfo)
#########################################################################################
C:\Users\muvva\Desktop\testing\tornado-master\tornado\util.py
        L = []  # type: List[None]
        atexit.register(lambda: L.append(None))

#########################################################################################
C:\Users\muvva\Desktop\testing\tpot-master\tpot\gp_deap.py
        # Vary the population
        offspring = varOr(population, toolbox, lambda_, cxpb, mutpb)

#########################################################################################
C:\Users\muvva\Desktop\testing\tqdm-master\examples\pandas_progress_apply.py
# and `progress_map` instead of `map`
df.progress_apply(lambda x: x**2)
# can also groupby:
#########################################################################################
C:\Users\muvva\Desktop\testing\tqdm-master\examples\pandas_progress_apply.py
# can also groupby:
# df.groupby(0).progress_apply(lambda x: x**2)

#########################################################################################
C:\Users\muvva\Desktop\testing\tqdm-master\tqdm\_main.py
                callback(1 + buf.count(delim))  # n += 1 + buf.count(delim)
            getattr(fout, 'flush', lambda: None)()  # pragma: no cover
            return  # n
#########################################################################################
C:\Users\muvva\Desktop\testing\tqdm-master\tqdm\_tqdm.py
        >>> # Now you can use `progress_apply` instead of `apply`
        >>> df.groupby(0).progress_apply(lambda x: x**2)

#########################################################################################
C:\Users\muvva\Desktop\testing\tqdm-master\tqdm\_tqdm_pandas.py
    >>> # Now you can use `progress_apply` instead of `apply`
    >>> df.groupby(0).progress_apply(lambda x: x**2)

#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\demos\cyclejs_demo\component_demos\isolated_bmi_slider\components\labeled_slider.py
    # sinks:
    return dict(DOM=vdomS, value=stateS.map(lambda state: state.value))

#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\demos\ios_app\ios_app.py
            dice.addEventListener ('touchstart', (lambda aDice: lambda: self.roll (aDice)) (dice))  # Returns inner lambda
            dice.addEventListener ('mousedown', (lambda aDice: lambda: self.roll (aDice)) (dice))
            self.dices.append (dice)
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\demos\pong\pong.py
            button.addEventListener ('mousedown', (lambda aKey: lambda: self.mouseOrTouch (aKey, True)) (key))  # Returns inner lambda
            button.addEventListener ('touchstart', (lambda aKey: lambda: self.mouseOrTouch (aKey, True)) (key))
            button.addEventListener ('mouseup', (lambda aKey: lambda: self.mouseOrTouch (aKey, False)) (key))
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\demos\riot_demo\color.py
# right now we only now the color, later msgs and styles buffers:
def _col(col): return lambda *parts: lambda g: _recurse(col, g, *parts)

#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\development\automated_tests\re\basictests.py
        # PyRegex needs to use n_splits from `translate` for this to work
        # test.checkEval(lambda: rgx.match('c').groups())                   # !!! @JdeH temporarily disabled this
        # test.checkEval(lambda: rgx.split("ababbababcdjsabbabdbab"))       # !!! @JdeH temporarily disabled this
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\development\automated_tests\transcrypt\div_issues\__init__.py
        # results.append (lambda: i)                # Works nowhere
        # results.append (lambda j = i: j)          # Works only in Python
        results.append ((lambda j: lambda: j) (i))  # Works in Python and Transcrypt
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\modules\logging\__init__.py
# if hasattr(sys, '_getframe'):
#           currentframe = lambda: sys._getframe(3)
# else: #pragma: no cover
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\modules\org\transcrypt\autotester\html.py
            # find all rows in the testletheader class
            filtFunc = lambda x: x.classList.contains(testletHeaderClass)
            headerRows = filter(filtFunc, table.tHead.children)
#########################################################################################
C:\Users\muvva\Desktop\testing\Transcrypt-master\transcrypt\modules\org\transcrypt\static_check\pyflakes\pyflakes\test\harness.py
    skip = lambda why: (lambda func: 'skip')  # not callable
    skipIf = lambda cond, why: (skip(why) if cond else lambda func: func)
else:
#########################################################################################
C:\Users\muvva\Desktop\testing\transparent_latent_gan-master\src\model\pggan\dataset.py
        # Determine shape and resolution.
        max_shape = max(tfr_shapes, key=lambda shape: np.prod(shape))
        self.resolution = resolution if resolution is not None else max_shape[1]
#########################################################################################
C:\Users\muvva\Desktop\testing\transparent_latent_gan-master\src\model\pggan\tfutil.py
        var = tf.Variable(tf.zeros(2)) # [numerator, denominator]
    update_op = tf.cond(tf.is_variable_initialized(var), lambda: tf.assign_add(var, v), lambda: tf.assign(var, v))
    if name in _autosummary_vars:
#########################################################################################
C:\Users\muvva\Desktop\testing\trape-master\core\dependence\urllib2.py
        # XXX MD5-sess
        KD = lambda s, d: H("%s:%s" % (s, d))
        return H, KD
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Core\Libtorrent\LibtorrentDownloadImpl.py
                        # Schedule next invocation, either on general or DL specific
                        dc = reactor.callLater(when, lambda: self.network_get_state(usercallback))
                        self.register_anonymous_task("downloads_cb", dc)
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Core\Modules\MetadataStore\OrmBindings\torrent_metadata.py
            # Workaround to always show legacy entries last
            pony_query = pony_query.order_by(lambda g: (desc(g.status != LEGACY_ENTRY), sort_expression)) \
                if sort_expression else pony_query.order_by(lambda g: desc(g.status != LEGACY_ENTRY))
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Core\Modules\wallet\btc_wallet.py
        # Sort them based on locktime
        transactions.sort(key=lambda tx: tx.locktime, reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Core\osutils.py
            # still the same
            islen = lambda dir: len(dir) == len(tail)
            dirs = filter(islen, dirs)
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\CreditMining\test_credit_mining_manager.py
        # Check that all download have upload_mode=False if we have enough disk space
        self.credit_mining_manager.get_free_disk_space = lambda: 2 * 1024 ** 2
        self.credit_mining_manager.check_disk_space()
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\CreditMining\test_credit_mining_manager.py
        # Check that all download have upload_mode=True if we do not have enough disk space
        self.credit_mining_manager.get_free_disk_space = lambda: 1
        self.credit_mining_manager.check_disk_space()
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\CreditMining\test_credit_mining_manager.py
        # Credit mining downloads should get moved to download directory and be checkpointed
        self.session.get_download = lambda _: torrent.download
        self.session.start_download_from_uri(magnet)
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Libtorrent\test_libtorrent_download_impl.py
        # impl.handle.upload_mode = False
        impl.handle.set_priority = lambda _: None
        impl.handle.set_sequential_download = lambda _: None
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Libtorrent\test_libtorrent_download_impl.py
        # in order to test AttributeError, therfore, no call to set file priority is expected.
        self.libtorrent_download_impl.get_share_mode = lambda: False
        self.libtorrent_download_impl.set_selected_files(['a'])
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Libtorrent\test_libtorrent_download_impl.py
        # The line below should trigger Value Error
        self.libtorrent_download_impl.handle.trackers = lambda: [{'url': 'no-DHT'}]

#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Modules\RestApi\test_events_endpoint.py
        # Wait to make sure the HTTPChannel is closed, see https://twistedmatrix.com/trac/ticket/2447
        yield deferLater(reactor, 0.3, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Modules\test_gigachannel_manager.py
        # Check add personal channel on startup
        self.mock_session.has_download = lambda _: False
        self.chanman.service_channels = lambda: None  # Disable looping call
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Modules\test_gigachannel_manager.py
        # Check skip already added personal channel
        self.mock_session.has_download = lambda x: x == str(chan.infohash)
        self.torrents_added = False
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Modules\Wallet\test_btc_wallet.py
            wallet.wallet.utxos_update = lambda **_: None  # We don't want to do an actual HTTP request here
            wallet.wallet.balance = lambda **_: 3
            return wallet.get_balance().addCallback(on_wallet_balance)
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\test_downloadstate.py
        # Test a file with a length of zero
        self.mocked_tdef.get_files_with_length = lambda: [("test.txt", 0)]
        handle.file_progress = lambda **_: [0]
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\test_downloadstate.py
        # Test whether inaccurate piece information from other peers is ignored
        download_state.get_peerlist = lambda: [{'completed': 0.5, 'have': [1, 0]},
                                               {'completed': 0.9, 'have': [1, 0, 1]}]
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\test_session.py
        # Create a deferred which forwards the unhexlified string version of the download's infohash
        download_started = download.get_handle().addCallback(lambda handle: unhexlify(str(handle.info_hash())))

#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Upgrade\test_db72_to_pony.py
        # Old DB is not OK
        db72_to_pony.old_db_version_ok = lambda _: False
        self.assertFalse(should_upgrade(OLD_DB_SAMPLE, None))
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\Core\Upgrade\test_db72_to_pony.py
        # Pony DB does not exist
        db72_to_pony.old_db_version_ok = lambda _: True
        self.assertTrue(should_upgrade(OLD_DB_SAMPLE, pony_db))
#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\Tribler\Test\test_as_server.py
            # might take some time to cleanup. I'm not sure what's causing this.
            yield deferLater(reactor, 0.2, lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\tribler-master\TriblerGUI\debug_window.py
        # Refresh logs
        self.window().log_refresh_button.clicked.connect(lambda: self.load_logs_tab())
        self.window().log_tab_widget.currentChanged.connect(lambda index: self.load_logs_tab())
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\tests\test_util.py
            (TypeError, 1),  # __fspath__ is not callable
            (TypeError, lambda x: 23
             ),  # __fspath__ returns a value other than str or bytes
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\tests\test_util.py
             ),  # __fspath__ returns a value other than str or bytes
            (Exception, lambda x: raise_(Exception)
             ),  # __fspath__raises a random exception
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\tests\test_util.py
             ),  # __fspath__raises a random exception
            (AttributeError, lambda x: raise_(AttributeError)
             ),  # __fspath__ raises AttributeError
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\tests\test_multierror.py
    # Swallows everything
    with MultiError.catch(lambda _: None):
        raise make_tree()
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\tests\test_run.py
        # Not an async function
        _core.run(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\tests\test_run.py
            # None is not a legal return value here
            await _core.wait_task_rescheduled(lambda _: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\tests\test_run.py
        # normally
        token.run_sync_soon(lambda: record.append("sync-cb"))
        raise ValueError
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\tests\test_run.py
        # calls to run_sync_soon
        token.run_sync_soon(lambda: record.add("2nd run_sync_soon ran"))
        try:
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\_run.py
    # between different runs, then they'll notice the bug quickly:
    offset = attr.ib(default=attr.Factory(lambda: _r.uniform(10000, 200000)))

#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_core\_run.py
            # since we'll shuffle the list and _r is only seeded for tests.
            batch.sort(key=lambda t: t._counter)
        runner.runq.clear()
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_threads.py
#
# In [25]: %timeit t = threading.Thread(target=lambda: None); t.start(); t.join()
# 10000 loops, best of 3: 44 µs per loop
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_threads.py
# In [26]: tpp = concurrent.futures.ThreadPoolExecutor()
# In [27]: %timeit tpp.submit(lambda: None).result()
# <warm up run elided>
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_threads.py
# <warm up run elided>
# In [28]: %timeit tpp.submit(lambda: None).result()
# 10000 loops, best of 3: 40.8 µs per loop
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_threads.py
#
# In [13]: %timeit t = threading.Thread(target=lambda: None); t.start(); t.join()
# 10000 loops, best of 3: 127 µs per loop
#########################################################################################
C:\Users\muvva\Desktop\testing\trio-master\trio\_threads.py
#
# In [18]: %timeit tpp.submit(lambda: None).result()
# 10000 loops, best of 3: 31.9 µs per loop
#########################################################################################
C:\Users\muvva\Desktop\testing\troposphere-master\troposphere\__init__.py
                # of the correct types
                if not any(map(lambda x: check_type(x, default), allowed)):
                    raise ValueError(error_str %
#########################################################################################
C:\Users\muvva\Desktop\testing\troposphere-master\troposphere\__init__.py
                    # Verify the split array are all numbers
                    if not any(map(lambda x: check_type(x, d), allowed)):
                        raise ValueError(error_str %
#########################################################################################
C:\Users\muvva\Desktop\testing\twython-master\twython\api.py
            # start/end indices still work:
            for entity in sorted(entities, key=lambda e: e['start'], reverse=True):
                display_text = display_text[0:entity['start']] + entity['replacement'] + display_text[entity['end']:]
#########################################################################################
C:\Users\muvva\Desktop\testing\urh-master\src\urh\awre\components\Length.py
        # First we get the common ranges per message length
        common_ranges_by_length = defaultdict(lambda: defaultdict(list))
        """:type: dict[urh.signalprocessing.MessageType.MessageType, dict[int, List[(int,int)]]]"""
#########################################################################################
C:\Users\muvva\Desktop\testing\urh-master\src\urh\awre\FormatFinder.py
        # Calculate the relative numbers and normalize the equalness so e.g. 0.3 becomes 0.7
        return {vl: (np.vectorize(lambda x: x if x >= 0.5 else 1 - x)(number_ones[vl][0] / number_ones[vl][1]))
                for vl in number_ones if number_ones[vl][1] >= self.MIN_MESSAGES_PER_CLUSTER}
#########################################################################################
C:\Users\muvva\Desktop\testing\urh-master\src\urh\dev\native\ExtensionHelper.py
    # 0 = Do not install extension
    build_device_extensions = defaultdict(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\urh-master\src\urh\signalprocessing\ProtocolAnalyzer.py
        # Try to assign participants based on SRC_ADDRESS label and participant address
        for msg in filter(lambda m: m.participant is None, self.messages):
            src_address = msg.get_src_address_from_data()
#########################################################################################
C:\Users\muvva\Desktop\testing\urh-master\tests\test_awre.py
        # print("=================")
        # print(sorted(score, key=lambda k: score[k], reverse=True))
        # print()
#########################################################################################
C:\Users\muvva\Desktop\testing\urllib3-master\src\urllib3\util\retry.py
        # We want to consider only the last consecutive errors sequence (Ignore redirects).
        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,
                                                    reversed(self.history))))
#########################################################################################
C:\Users\muvva\Desktop\testing\urllib3-master\test\test_connectionpool.py
            # See: https://github.com/shazow/urllib3/issues/76
            pool._make_request = lambda *args, **kwargs: _raise(HTTPException)
            with pytest.raises(MaxRetryError):
#########################################################################################
C:\Users\muvva\Desktop\testing\urwid-master\urwid\raw_display.py
    # number of colors
    AttrSpec = lambda self, fg, bg: AttrSpec(fg, bg, self.colors)

#########################################################################################
C:\Users\muvva\Desktop\testing\urwid-master\urwid\tests\test_listbox.py
        # disble cursor movement in odd_e object
        odd_e.move_cursor_to_coords = lambda s,c,xy: 0
        self.ktest( "within focus cursor made not visible", 'down',
#########################################################################################
C:\Users\muvva\Desktop\testing\urwid-master\urwid\tests\test_listbox.py
        # disble cursor movement in odd_e object
        odd_e.move_cursor_to_coords = lambda s,c,xy: 0
        self.ktest( "cursor force fail long", 'page up',
#########################################################################################
C:\Users\muvva\Desktop\testing\urwid-master\urwid\tests\test_listbox.py
        # disble cursor movement in odd_e object
        odd_e.move_cursor_to_coords = lambda s,c,xy: 0
        self.ktest( "pathological cursor widget", 'page down',
#########################################################################################
C:\Users\muvva\Desktop\testing\urwid-master\urwid\tests\test_listbox.py
        # disble cursor movement in odd_e object
        odd_e.move_cursor_to_coords = lambda s,c,xy: 0
        self.ktest( "cursor force fail short", 'page down',
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\tests\blueprints.py
    #     b1 = Blueprint()
    #     new_route = Route('/', lambda: 'Hello', methods=['GET'])
    #     b1.add_route(new_route)
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\tests\blueprints.py
    #     b1.add_blueprint(b2, prefixes={'b2': '/b2'})
    #     new_route = Route('/', lambda: 'Hello', methods=['GET'], name='hello')
    #     b2.add_route(new_route)
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\tests\blueprints.py
    #     b2.add_blueprint(b3, prefixes={'b3': '/b3'})
    #     new_route = Route('/', lambda: 'Hello', methods=['GET'])
    #     b3.add_route(new_route)
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\tests\blueprints.py
    #     b2.add_blueprint(b3, prefixes={'b3': '/b3'})
    #     new_route = Route('/', lambda: 'Hello', methods=['GET'], name='hello')
    #     b3.add_route(new_route)
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\tests\blueprints.py
    #     b2.add_blueprint(b3, prefixes={'b3': '/b3'})
    #     new_route = Route('/', lambda: 'Hello', methods=['GET'], name='hello')
    #     b3.add_route(new_route)
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\vibora\templates\ast.py
    # Replacing blocks.
    new_blocks = find_all(lambda x: isinstance(x, BlockNode), b.ast)
    for block in new_blocks:
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\vibora\templates\ast.py
    # Preserving macros.
    macros = find_all(lambda x: isinstance(x, MacroNode), b.ast)
    for macro in macros:
#########################################################################################
C:\Users\muvva\Desktop\testing\vibora-master\vibora\templates\engine.py
        # Macro nodes needs to be compiled first.
        raise_nodes(lambda x: isinstance(x, MacroNode), template.ast)

#########################################################################################
C:\Users\muvva\Desktop\testing\voltron-master\voltron\plugins\debugger\dbg_gdb.py
            # get inferior file (doesn't seem to be available through the API)
            lines = list(filter(lambda x: x != '', gdb.execute('info inferiors', to_string=True).split('\n')))
            if len(lines) > 1:
#########################################################################################
C:\Users\muvva\Desktop\testing\voltron-master\voltron\plugins\view\register.py
            # Build template
            template = '\n'.join(map(lambda x: self.TEMPLATES[arch][self.config.orientation][x], self.config.sections))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_blind_auction.py
    # Try to bid after bidding has ended
    assert_tx_failed(lambda: auction_contract.bid(
        w3.keccak(b''.join([
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_blind_auction.py
    # 129th bid should fail
    assert_tx_failed(lambda: auction_contract.bid(
        w3.keccak(b''.join([
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_blind_auction.py
    # Should not be able to end auction before reveal time has ended
    assert_tx_failed(lambda: auction_contract.auctionEnd(
        transact={'value': 0, 'from': k0}
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_blind_auction.py
    # Should not be able to end auction twice
    assert_tx_failed(lambda: auction_contract.auctionEnd(
        transact={'value': 0, 'from': k0}
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_simple_open_auction.py
    # Bidder cannot bid 0
    assert_tx_failed(lambda: auction_contract.bid(transact={"value": 0, "from": k1}))
    # Bidder can bid
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_simple_open_auction.py
    # Bidder bid cannot equal current highest bid
    assert_tx_failed(lambda: auction_contract.bid(transact={"value": 0, "from": k1}))
    # Higher bid can replace current highest bid
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_simple_open_auction.py
    # Fails if auction end time has not been reached
    assert_tx_failed(lambda: auction_contract.endAuction())
    auction_contract.bid(transact={"value": 1 * 10**10, "from": k2})
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_simple_open_auction.py
    # Bidder cannot bid after auction end time has been reached
    assert_tx_failed(lambda: auction_contract.bid(transact={"value": 10, "from": k1}))
    # Auction cannot be ended twice
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\auctions\test_simple_open_auction.py
    # Auction cannot be ended twice
    assert_tx_failed(lambda: auction_contract.endAuction())

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # If you don't have any stock, you can't sell
    assert_tx_failed(lambda: c.sellStock(1, transact={'from': a1}))
    assert_tx_failed(lambda: c.sellStock(1, transact={'from': a2}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # But only until you run out
    assert_tx_failed(lambda: c.sellStock(1, transact={'from': a1}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # Only the company can authorize payments
    assert_tx_failed(lambda: c.payBill(a2, 1, transact={'from': a1}))
    # A company can only pay someone if it has the money
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # A company can only pay someone if it has the money
    assert_tx_failed(lambda: c.payBill(a2, 1, transact={'from': a0}))
    # If it has the money, it can pay someone
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # Until it runs out of money
    assert_tx_failed(lambda: c.payBill(a3, 1, transact={'from': a0}))
    # Then no stockholders can sell their stock either
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\company\test_company.py
    # Then no stockholders can sell their stock either
    assert_tx_failed(lambda: c.sellStock(1, transact={'from': a1}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\market_maker\test_on_chain_market_maker.py
    # Initiate cannot be called twice
    assert_tx_failed(lambda: market_maker.initiate(erc20.address, w3.toWei(1, "ether"), transact={'value': w3.toWei(2, "ether")}))  # noqa: E501

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\market_maker\test_on_chain_market_maker.py
    # Only owner can call ownerWithdraw
    assert_tx_failed(lambda: market_maker.ownerWithdraw(transact={'from': a1}))
    market_maker.ownerWithdraw(transact={})
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Inital deposit has to be divisible by two
    assert_tx_failed(lambda: get_contract(contract_code, value=13))
    # Seller puts item up for sale
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Only sender can trigger refund
    assert_tx_failed(lambda: c.abort(transact={'from': a2}))
    # Refund works correctly
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Purchase for too low/high price
    assert_tx_failed(lambda: c.purchase(transact={'value': 1, 'from': a1}))
    assert_tx_failed(lambda: c.purchase(transact={'value': 3, 'from': a1}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Allow nobody else to purchase
    assert_tx_failed(lambda: c.purchase(transact={'value': 2, 'from': a3}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Can only be called after purchase
    assert_tx_failed(lambda: c.received(transact={'from': a1, 'gasPrice': 0}))
    # Purchase completed
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\safe_remote_purchase\test_safe_remote_purchase.py
    # Check that e.g. sender cannot trigger received
    assert_tx_failed(lambda: c.received(transact={'from': a0, 'gasPrice': 0}))
    # Check if buyer can call receive
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Check that a1 cannot burn after depleting their balance
    assert_tx_failed(lambda: c.burn(1, transact={'from': a1}))
    # Check that a1, a2 cannot mint
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Check that a1, a2 cannot mint
    assert_tx_failed(lambda: c.mint(a1, 1, transact={'from': a1}))
    assert_tx_failed(lambda: c.mint(a2, 1, transact={'from': a2}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Check that mint to ZERO_ADDRESS failed
    assert_tx_failed(lambda: c.mint(ZERO_ADDRESS, 1, transact={'from': a1}))
    assert_tx_failed(lambda: c.mint(
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Ensure transfer fails with insufficient balance
    assert_tx_failed(lambda: c.transfer(a1, 1, transact={'from': a2}))
    # Ensure 0-transfer always succeeds
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Check that totalSupply cannot overflow, even when mint to other account
    assert_tx_failed(lambda: c.mint(a2, 1, transact={'from': minter}))
    # Check that corresponding mint is allowed after burn
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # This should fail; no allowance or balance (0 always succeeds)
    assert_tx_failed(lambda: c.transferFrom(a1, a3, 1, transact={'from': a2}))
    c.transferFrom(a1, a3, 0, transact={'from': a2})
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # transferFrom should succeed when allowed, fail with wrong sender
    assert_tx_failed(lambda: c.transferFrom(a1, a3, 1, transact={'from': a3}))
    assert c.balanceOf(a2) == 1
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # This should fail; no allowance or balance (0 always succeeds)
    assert_tx_failed(lambda: c.burnFrom(a1, 1, transact={'from': a2}))
    c.burnFrom(a1, 0, transact={'from': a2})
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # transferFrom should succeed when allowed, fail with wrong sender
    assert_tx_failed(lambda: c.burnFrom(a2, 1, transact={'from': a3}))
    assert c.balanceOf(a2) == 1
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc20.py
    # Check that burnFrom to ZERO_ADDRESS failed
    assert_tx_failed(lambda: c.burnFrom(
        ZERO_ADDRESS, 0, transact={'from': a1}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer from zero address
    assert_tx_failed(lambda: c.transferFrom(
        ZERO_ADDRESS, operator, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer to zero address
    assert_tx_failed(lambda: c.transferFrom(
        someone, ZERO_ADDRESS, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer token without ownership
    assert_tx_failed(lambda: c.transferFrom(
        someone, operator, OPERATOR_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer invalid token
    assert_tx_failed(lambda: c.transferFrom(
        someone, operator, INVALID_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer from zero address
    assert_tx_failed(lambda: c.safeTransferFrom(
        ZERO_ADDRESS, operator, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer to zero address
    assert_tx_failed(lambda: c.safeTransferFrom(
        someone, ZERO_ADDRESS, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer token without ownership
    assert_tx_failed(lambda: c.safeTransferFrom(
        someone, operator, OPERATOR_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # transfer invalid token
    assert_tx_failed(lambda: c.safeTransferFrom(
        someone, operator, INVALID_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # Can't transfer to a contract that doesn't implement the receiver code
    assert_tx_failed(lambda: c.safeTransferFrom(someone, c.address, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))  # noqa: E501

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # approve myself
    assert_tx_failed(lambda: c.approve(
        someone, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # approve token without ownership
    assert_tx_failed(lambda: c.approve(
        operator, OPERATOR_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # approve invalid token
    assert_tx_failed(lambda: c.approve(
        operator, INVALID_TOKEN_ID, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # setApprovalForAll myself
    assert_tx_failed(lambda: c.setApprovalForAll(
        someone, approved, transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # mint by non-minter
    assert_tx_failed(lambda: c.mint(
        someone, SOMEONE_TOKEN_IDS[0], transact={'from': someone}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # mint to zero address
    assert_tx_failed(lambda: c.mint(
        ZERO_ADDRESS, SOMEONE_TOKEN_IDS[0], transact={'from': minter}))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\tokens\test_erc721.py
    # burn token without ownership
    assert_tx_failed(lambda: c.burn(SOMEONE_TOKEN_IDS[0], transact={'from': operator}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Check chairperson cannot give the right to vote twice to the same voter
    assert_tx_failed(lambda: c.giveRightToVote(a5, transact={}))
    # Check voters weight didn't change
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # would create a length 5 cycle:
    assert_tx_failed(lambda: c.delegate(a0, transact={'from': a4}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Voter cannot delegate twice
    assert_tx_failed(lambda: c.delegate(a2, transact={'from': a1}))
    # Voter cannot delegate to themselves
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Voter cannot delegate to themselves
    assert_tx_failed(lambda: c.delegate(a2, transact={'from': a2}))
    # Voter CAN delegate to someone who hasn't been granted right to vote
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Voter cannot vote twice
    assert_tx_failed(lambda: c.vote(0))
    # Voter cannot vote if they've delegated
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Voter cannot vote if they've delegated
    assert_tx_failed(lambda: c.vote(0, transact={'from': a1}))
    # Several voters can vote
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\voting\test_ballot.py
    # Can't vote on a non-proposal
    assert_tx_failed(lambda: c.vote(2, transact={'from': a7}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\examples\wallet\test_wallet.py
            w3.toInt(x[32:64])  # s
        ) for x in map(lambda z: w3.toBytes(hexstr=z[2:]), raw_sigs)
    ]
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\features\external_contracts\test_erc20_abi.py
    # more than allowed
    assert_tx_failed(lambda: erc20_caller.transfer(w3.eth.accounts[1], TOKEN_TOTAL_SUPPLY))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\features\external_contracts\test_modifiable_external_contract_calls.py
    # Fails attempting a state change after a call to a static address
    assert_tx_failed(lambda: c2.static_set_lucky(5, transact={}))
    assert c1.lucky() == 7
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\features\external_contracts\test_modifiable_external_contract_calls.py
    # Fails attempting a state change after a call to a static address
    assert_tx_failed(lambda: c2.static_set_lucky(5, transact={}))
    assert c1.lucky() == 7
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\features\iteration\test_range_in.py
    # only an owner may set another owner.
    assert_tx_failed(lambda: c.set_owner(1, a1, call={'from': a1}))

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\features\test_assert.py
    # static call prohibits state change
    assert_tx_failed(lambda: c2.test())

#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\functions\rlp\test_rlp_list.py
    assert c.voo(rlp.encode([b'', b'\x01', b'\xbds\xc31\xf5=b\xa5\xcfy]\x0f\x05\x8f}\\\xf3\xe6\xea\x9d~\r\x96\xda\xdf:+\xdb4pm\xcc', b'', b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b:\xcd\x85\x9b\x84`FD\xf9\xa8'\x8ezR\xd5\xc9*\xf5W\x1f\x14\xc2\x0cd\xa0\x17\xd4Z\xde\x9d\xc2\x18_\x82B\xc2\xaa\x82\x19P\xdd\xa2\xd0\xe9(\xcaO\xe2\xb1\x13s\x05yS\xc3q\xdb\x1eB\xe2g\xaa'\xba"])) == 1  # noqa: E501
    assert_tx_failed(lambda: c.qot(rlp.encode([7, 2**160])))
    c.qov(rlp.encode([7, 2**160]))
#########################################################################################
C:\Users\muvva\Desktop\testing\vyper-master\tests\parser\types\test_bytes.py
    # test for greater than 100 bytes, should raise exception
    assert_tx_failed(lambda: c.foo(b'\x35' * 101))

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\compare.py
        # Objects with the least differences will be matched first. So only the best possible matches are made
        matches.sort(key=lambda match: match[2])
        for a_idx, b_idx, num_differences in matches:
#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # element-only rules have priority 2 (lower)
        rules.append((2, (lambda attrs: True), result))
        # sort list on priority
#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # sort list on priority
        rules.sort(key=lambda t: t[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # element-and-attr rules have priority 1 (higher)
        rules.append((1, (lambda attrs: attr in attrs), result))
        # sort list on priority
#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # sort list on priority
        rules.sort(key=lambda t: t[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # element-and-attr rules have priority 1 (higher)
        rules.append((1, (lambda attrs: attr in attrs and attrs[attr] == value), result))
        # sort list on priority
#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\rich_text\converters\html_ruleset.py
        # sort list on priority
        rules.sort(key=lambda t: t[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\admin\views\pages.py
    # sort by lower-cased version of verbose name
    page_types.sort(key=lambda page_type: page_type[0].lower())

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\contrib\routable_page\models.py
            # take precedence
            routes_for_class.sort(key=lambda route: route[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\contrib\search_promotions\views.py
            # Make sure the form is marked as changed so it gets saved with the new order
            form.has_changed = lambda: True

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\documents\signal_handlers.py
    # Pass false so FileField doesn't save the model.
    transaction.on_commit(lambda: instance.file.delete(False))

#########################################################################################
C:\Users\muvva\Desktop\testing\wagtail-master\wagtail\images\signal_handlers.py
    # Pass false so FileField doesn't save the model.
    transaction.on_commit(lambda: instance.file.delete(False))

#########################################################################################
C:\Users\muvva\Desktop\testing\warehouse-master\tests\unit\legacy\api\test_simple.py
        # let's assert the result is ordered by string comparison of filename
        files = sorted(files, key=lambda key: key.filename)
        db_request.matchdict["name"] = project.normalized_name
#########################################################################################
C:\Users\muvva\Desktop\testing\warehouse-master\tests\unit\legacy\api\test_simple.py
        # let's assert the result is ordered by string comparison of filename
        files = sorted(files, key=lambda key: key.filename)
        db_request.matchdict["name"] = project.normalized_name
#########################################################################################
C:\Users\muvva\Desktop\testing\WeasyPrint-master\weasyprint\formatting_structure\boxes.py
                # Python’s unicode.captitalize is not the same.
                'capitalize': lambda t: t.title(),
                'full-width': lambda t: t.translate(self.ascii_to_wide),
#########################################################################################
C:\Users\muvva\Desktop\testing\WeasyPrint-master\weasyprint\layout\__init__.py
        self.excluded_shapes = None  # Not initialized yet
        self.string_set = defaultdict(lambda: defaultdict(lambda: list()))
        self.current_page = None
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\applications\admin\controllers\default.py
        # Making the short circuit compatible with <= python2.4
        gen_data = lambda index, item: not item[:1] in ['+', '-'] and "" \
            or INPUT(_type='checkbox',
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\applications\admin\controllers\default.py
                   # NOTE! For singular form ALWAYS return plural_id = 0
                   get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\applications\admin\controllers\default.py
                   # By default this function simply returns word in singular:
                   construct_plural_form = lambda word, plural_id: word
                   """)[1:] % dict(lang=langinfo[0], langname=langinfo[1])
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\cache.py
                        # action returns something
                        rtn = cache_model(cache_key, lambda: func(), time_expire=time_expire)
                        http, status = None, current.response.status
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\cache.py
                        # action raises HTTP (can still be valid)
                        rtn = cache_model(cache_key, lambda: e.body, time_expire=time_expire)
                        http, status = HTTP(e.status, rtn, **e.headers), e.status
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\compileapp.py
    # configure the validator to use the t translator
    Validator.translator = staticmethod(lambda text: None if text is None else str(T(text)))

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\feedparser.py
        # all tags must be in a restricted subset of valid HTML tags
        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,
            re.findall(r'</?(\w+)',s)):
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\feedparser.py
        # all entities must have been defined as valid HTML entities
        if filter(lambda e: e not in entitydefs.keys(), re.findall(r'&(\w+);', s)):
            return
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\imageutils.py
# from images import THUMB
# db.table_name.thumbnail.compute = lambda row: THUMB(row.picture, 200, 200)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\minify\jsmin.py
        return _re.sub(r'([\000-\040\047])',  # for better portability
                       lambda m: '\\%03o' % ord(m.group(1)), (sequentize(result)
                                                              .replace('\\', '\\\\')
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\af.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\af.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\bg.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\bg.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ca.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ca.py
# for words (or phrases) not found in plural_dict dictionary
construct_plural_form = lambda word, plural_id:(word[:-2] + 'gues' if word[-2:] == 'ga' else
                                                word[:-2] + 'ques' if word[-2:] == 'ca' else
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\cs.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: ( 0 if n==1 else
                            1 if 2<=n<=4 else
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\cs.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\de.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\de.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\en.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\en.py
# for words (or phrases) not found in plural_dict dictionary
construct_plural_form = lambda word, plural_id: (word +
                        ('es' if word[-1:] in ('s','x','o') or
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\es.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\es.py
# for words (or phrases) not found in plural_dict dictionary
construct_plural_form = lambda word, plural_id: (word +
                         ('es' if word[-1:] in ('s', 'x', 'y', 'l', 'r', 'n', 'd', 'z', 'j') or
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\fr.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\fr.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\he.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\he.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\hi.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\hi.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\hu.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\hu.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\id.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\id.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\it.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\it.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ja.py
# Always returns 0:
get_plural_id = lambda n: 0

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ja.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\lt.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n % 10 == 1 and n % 100 != 11 else
                           1 if n % 10 >= 2 and (n % 100 < 10 or n % 100 >= 20) else
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\lt.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\my.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\my.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\nl.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\nl.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\pl.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n==1 else
                           1 if 2<=n<=4 else
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\pl.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\pt.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\pt.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ro.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: int(n != 1)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ro.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ru.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n % 10 == 1 and n % 100 != 11 else
                           1 if n % 10 >= 2 and n % 10 <= 4 and
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\ru.py
# plural_dict dictionary)
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\sk.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n % 10 == 1 and n % 100 != 11 else
                           1 if n % 10 >= 2 and n % 10 <= 4 and
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\sk.py
# is used to simple insert new words into plural_dict dictionary)
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\sl.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n % 100 == 1 else
                           1 if n % 100 == 2 else
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\sl.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: (word + 'suffix')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\tr.py
# Always returns 0:
get_plural_id = lambda n: 0

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\tr.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\uk.py
# NOTE! For singular form ALWAYS return plural_id = 0
get_plural_id = lambda n: (0 if n % 10 == 1 and n % 100 != 11 else
                           1 if n % 10 >= 2 and n % 10 <= 4 and
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\uk.py
# plural_dict dictionary)
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\zh.py
# Always returns 0:
get_plural_id = lambda n: 0

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\plural_rules\zh.py
# for words (or phrases) not found in plural_dict dictionary
# construct_plural_form = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pypyodbc.py
#SQL Data TYPE        0.Python Data Type     1.Default Output Converter  2.Buffer Type     3.Buffer Allocator   4.Default Size  5.Variable Length
SQL_TYPE_NULL       : (None,                lambda x: None,             SQL_C_CHAR,         create_buffer,      2     ,         False         ), 
SQL_CHAR            : (str,                 lambda x: x,                SQL_C_CHAR,         create_buffer,      2048  ,         False         ),
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\c14n.py
#_in_subset = lambda subset, node: not subset or node in subset
_in_subset = lambda subset, node: subset is None or node in subset # rich's tweak

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\client.py
        if not self.services:  # not using WSDL?
            return lambda *args, **kwargs: self.call(attr, *args, **kwargs)
        else:  # using WSDL:
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\client.py
        else:  # using WSDL:
            return lambda *args, **kwargs: self.wsdl_call(attr, *args, **kwargs)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\helpers.py
                    # simple list type (values separated by spaces)
                    fn = lambda s: [fn(v) for v in s.split(" ")]
            elif (uri == soapenc_uri and type_name == 'Array'):
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\helpers.py
except AttributeError:  # python2.4
    _strptime = lambda s, fmt: datetime.datetime(*(time.strptime(s, fmt)[:6]))

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\contrib\pysimplesoap\xmlsec.py
    # Sign the SHA1 digest of the signed xml using RSA cipher
    pkey = RSA.load_key(private_key, lambda *args, **kwargs: password)
    signature = pkey.sign(hashlib.sha1(signed_info).digest())
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\globals.py
    cache_ram = CacheInRam(request)  # same as cache.ram because meta_storage
    cache_ram(cache_key + ':length', lambda: size, 0)
    cache_ram(cache_key + ':uploaded', lambda: 0, 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\languages.py
# only one singular/plural form is used
DEFAULT_GET_PLURAL_ID = lambda n: 0
# word is unchangeable
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\languages.py
# word is unchangeable
DEFAULT_CONSTRUCT_PLURAL_FORM = lambda word, plural_id: word

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\languages.py
        fp.write('# -*- coding: utf-8 -*-\n{\n')
        for key in sorted(contents, key=lambda x: to_unicode(x, 'utf-8').lower()):
            fp.write('%s: %s,\n' % (repr(Utf8(key)),
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\rocket.py
            # compatibility.
            str_extract = lambda l: (l.addr, l.port, l.secure and '*' or '')

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\sqlhtml.py
            #        all_words_filters.append(field.contains(word))
            #        filters.append(reduce(lambda a, b: (a & b), all_words_filters))
            #parts = filters
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\sqlhtml.py
                        # fields but not virtual fields
                        is_searchable = lambda f: f.readable and not isinstance(f, Field.Virtual) and f.searchable
                        sfields = reduce(lambda a, b: a + b, [list(filter(is_searchable, t)) for t in tables])
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\sqlhtml.py
        'width':'', #width in pixels or %
        'content':lambda row, rc: A('Edit', _href='edit/%s'%row.id),
        'selected': False #agregate class selected to this column}]
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\storage.py
    # http://stackoverflow.com/questions/5247250/why-does-pickle-getstate-accept-as-a-return-value-the-very-instance-it-requi
    __getstate__ = lambda self: None
    __copy__ = lambda self: Storage(self)
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\tests\test_storage.py
        # if don't have value and otherwise is especified it will called
        self.assertEqual(b(0, otherwise=lambda: 'something'), 'something')
        self.assertEqual(b(0, cast=int, otherwise=lambda: 'something'),
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\tests\test_storage.py
        # except if default is especified
        self.assertEqual(b(0, default=0, otherwise=lambda: 'something'), 0)

#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\tools.py
        # http://...jpg -> <img src="http://...jpg/> or embed
        html = replace_autolinks(html, lambda link: expand_one(link, {}))
        # @{component:name} -> <script>embed component name</script>
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\widget.py
        # Building the Menu
        item = lambda: start_browser(httplog)
        servermenu.add_command(label='View httpserver.log',
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\widget.py
        # Home Page
        item = lambda: start_browser('http://www.web2py.com/')
        helpmenu.add_command(label='Home Page',
#########################################################################################
C:\Users\muvva\Desktop\testing\web2py-master\gluon\widget.py
        # About
        item = lambda: messagebox.showinfo('About web2py', ProgramInfo)
        helpmenu.add_command(label='About',
#########################################################################################
C:\Users\muvva\Desktop\testing\web3.py-master\web3\middleware\validation.py
            # Bypass `validate_chain_id` if chainId can't be determined
            lambda _: is_not_null(web3.net.version),
            validate_chain_id(web3)
#########################################################################################
C:\Users\muvva\Desktop\testing\web3.py-master\web3\providers\eth_tester\middleware.py
    # remove nonce for now due to issue https://github.com/ethereum/eth-tester/issues/80
    remove_key_if('nonce', lambda _: True),
    apply_formatters_to_dict(TRANSACTION_PARAMS_FORMATTERS),
#########################################################################################
C:\Users\muvva\Desktop\testing\webpy-master\tools\markdown.py
            lambda x: "&#%s;" % ord(x),
            lambda x: "&#x%X;" % ord(x),
            lambda x: x
#########################################################################################
C:\Users\muvva\Desktop\testing\webpy-master\tools\markdown.py
            lambda x: "&#x%X;" % ord(x),
            lambda x: x
        ]
#########################################################################################
C:\Users\muvva\Desktop\testing\webpy-master\web\db.py
            #needed for Py3 compatibility with the above doctests
            sorted_values = sorted(values.items(), key=lambda t: t[0])

#########################################################################################
C:\Users\muvva\Desktop\testing\webpy-master\web\template.py
            # make base a function, so that it can be passed to sub-renders
            self._base = lambda page: self._template(base)(page)
        else:
#########################################################################################
C:\Users\muvva\Desktop\testing\websockify-master\tests\test_websockifyserver.py
        # Mock this out cause it screws tests up
        self.stubs.Set(os, 'chdir', lambda *args, **kwargs: None)
        self.stubs.Set(BaseHTTPRequestHandler, 'send_response',
#########################################################################################
C:\Users\muvva\Desktop\testing\websockify-master\tests\test_websockifyserver.py
        # Mock this out cause it screws tests up
        self.stubs.Set(os, 'chdir', lambda *args, **kwargs: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\werkzeug-master\examples\cupoftee\network.py
        # sort the player list and count them
        self.players.sort(key=lambda x: -x.score)
        self.player_count = len(self.players)
#########################################################################################
C:\Users\muvva\Desktop\testing\werkzeug-master\src\werkzeug\local.py
    __cmp__ = lambda x, o: cmp(x._get_current_object(), o)  # noqa
    __hash__ = lambda x: hash(x._get_current_object())
    __call__ = lambda x, *a, **kw: x._get_current_object()(*a, **kw)
#########################################################################################
C:\Users\muvva\Desktop\testing\werkzeug-master\src\werkzeug\local.py
    __long__ = lambda x: long(x._get_current_object())  # noqa
    __float__ = lambda x: float(x._get_current_object())
    __oct__ = lambda x: oct(x._get_current_object())
#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\packets\dhcpserver.py
            packet += '\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04' # type, class, ttl, data-length
            packet += str.join('', map(lambda x: chr(int(x)), ip.split('.')))
        return packet
#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\packets\dhcpserver.py
            packet += self.int_to_hex(4, zfill=2)  # RDLENGTH
            packet += str.join('', map(lambda x: chr(int(x)), ip.split('.')))  # RDATA
        return packet
#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\packets\dhcpserver.py
        # e.g '192.168.1.1' to 3232235777
        encode = lambda x: struct.unpack('!I', socket.inet_aton(x))[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\packets\dhcpserver.py
        # e.g 3232235777 to '192.168.1.1'
        decode = lambda x: socket.inet_ntoa(struct.pack('!I', x))

#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\servers\dhcp\dhcpserver.py
            packet += '\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04' # type, class, ttl, data-length
            packet += str.join('', map(lambda x: chr(int(x)), ip.split('.')))
        return packet
#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\servers\dhcp\dhcpserver.py
            packet += self.int_to_hex(4, zfill=2)  # RDLENGTH
            packet += str.join('', map(lambda x: chr(int(x)), ip.split('.')))  # RDATA
        return packet
#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\servers\dhcp\dhcpserver.py
        # e.g '192.168.1.1' to 3232235777
        encode = lambda x: struct.unpack('!I', socket.inet_aton(x))[0]

#########################################################################################
C:\Users\muvva\Desktop\testing\WiFi-Pumpkin-master\core\servers\dhcp\dhcpserver.py
        # e.g 3232235777 to '192.168.1.1'
        decode = lambda x: socket.inet_ntoa(struct.pack('!I', x))

#########################################################################################
C:\Users\muvva\Desktop\testing\wifiphisher-master\wifiphisher\common\interfaces.py
    # sort with score
    vif_score_tuples = sorted(vif_score_tuples, key=lambda tup: -tup[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\wifiphisher-master\wifiphisher\extensions\deauth.py
        # craft the packets
        packets = lambda: (self._craft_packet(receiver, sender, bssid) +
                           self._craft_packet(sender, receiver, bssid))
#########################################################################################
C:\Users\muvva\Desktop\testing\Wikipedia-master\tests\page_test.py
    # Callicarpa?
    purpleberry = lambda: wikipedia.page("purpleberry", auto_suggest=False)
    self.assertRaises(wikipedia.PageError, purpleberry)
#########################################################################################
C:\Users\muvva\Desktop\testing\XlsxWriter-master\xlsxwriter\workbook.py
        # written to the worksheets above.
        self.charts = sorted(self.charts, key=lambda chart: chart.id)

#########################################################################################
C:\Users\muvva\Desktop\testing\xmltodict-master\xmltodict.py
            # Anything not handled ends up here and entities aren't expanded.
            parser.DefaultHandler = lambda x: None
            # Expects an integer return; zero means failure -> expat.ExpatError.
#########################################################################################
C:\Users\muvva\Desktop\testing\xmltodict-master\xmltodict.py
            # Expects an integer return; zero means failure -> expat.ExpatError.
            parser.ExternalEntityRefHandler = lambda *x: 1
    if hasattr(xml_input, 'read'):
#########################################################################################
C:\Users\muvva\Desktop\testing\xonsh-master\tests\test_prompt.py
    # '{{user' will be parsed to '{user'
    assert "{user" in formatter(lambda: inp)

#########################################################################################
C:\Users\muvva\Desktop\testing\xonsh-master\xonsh\platform.py
#
ON_DARWIN = LazyBool(lambda: platform.system() == "Darwin", globals(), "ON_DARWIN")
"""``True`` if executed on a Darwin platform, else ``False``. """
#########################################################################################
C:\Users\muvva\Desktop\testing\xonsh-master\xonsh\ply\example\BASIC\basinterp.py
        self.functions = {           # Built-in function table
            'SIN': lambda z: math.sin(self.eval(z)),
            'COS': lambda z: math.cos(self.eval(z)),
#########################################################################################
C:\Users\muvva\Desktop\testing\xonsh-master\xonsh\ply\ply\yacc.py
        # p functions
        p_functions.sort(key=lambda p_function: (
            p_function[0],
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapf\yapflib\split_penalty.py
  def Visit_lambdef(self, node):  # pylint: disable=invalid-name
    # lambdef ::= 'lambda' [varargslist] ':' test
    # Loop over the lambda up to and including the colon.
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapf\yapflib\split_penalty.py
    # lambdef ::= 'lambda' [varargslist] ':' test
    # Loop over the lambda up to and including the colon.
    allow_multiline_lambdas = style.Get('ALLOW_MULTILINE_LAMBDAS')
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapf\yapflib\split_penalty.py
    # Loop over the lambda up to and including the colon.
    allow_multiline_lambdas = style.Get('ALLOW_MULTILINE_LAMBDAS')
    if not allow_multiline_lambdas:
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapftests\reformatter_basic_test.py
            'quuuuuuux',  # quuuuuuux
            lambda a, b: 37  # lambda
        ]
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapftests\reformatter_buganizer_test.py
    # pylint: disable=g-long-lambda
    lambda: function.call.mem.clients(FLAGS.some_flag_thingy, default_namespace=_LAZY_MEM_NAMESPACE, allow_pickle=True)
    # pylint: enable=g-long-lambda
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapftests\reformatter_buganizer_test.py
    # pylint: disable=g-long-lambda
    lambda: function.call.mem.clients(
        FLAGS.some_flag_thingy,
#########################################################################################
C:\Users\muvva\Desktop\testing\yapf-master\yapftests\reformatter_buganizer_test.py
                '#':
                    lambda x: x  # do nothing
            })
#########################################################################################
C:\Users\muvva\Desktop\testing\yellowbrick-master\yellowbrick\classifier\classification_report.py
        # to their respective values
        scores = map(lambda s: dict(zip(self.classes_, s)), scores)
        self.scores_ = dict(zip(SCORES_KEYS, scores))
#########################################################################################
C:\Users\muvva\Desktop\testing\yellowbrick-master\yellowbrick\text\tsne.py
        # Additionally, filter classes not specified directly by the user.
        series = defaultdict(lambda: {'x':[], 'y':[]})

#########################################################################################
C:\Users\muvva\Desktop\testing\youtube-dl-gui-master\youtube_dl_gui\mainframe.py
        # Overwrite the menu hover event to avoid changing the statusbar
        self.Bind(wx.EVT_MENU_HIGHLIGHT, lambda event: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\youtube-dl-gui-master\youtube_dl_gui\widgets.py
        # Ignore all key events i'm bored to handle the header selection
        self.Bind(wx.EVT_KEY_DOWN, lambda event: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        #testing case-insensitivity with lambda_package MySQL-Python
        self.assertTrue(z.have_correct_lambda_package_version('mysql-python', '1.2.5'))
        self.assertFalse(z.have_correct_lambda_package_version('mysql-python', '6.6.6'))
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        # No auth at all
        z.create_stack_template(lambda_arn, 'helloworld', False, False, None)
        parsable_template = json.loads(z.cf_template.to_json())
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        # IAM auth
        z.create_stack_template(lambda_arn, 'helloworld', False, True, None)
        parsable_template = json.loads(z.cf_template.to_json())
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        # CORS with auth
        z.create_stack_template(lambda_arn, 'helloworld', False, True, None, True)
        parsable_template = json.loads(z.cf_template.to_json())
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        # API Key auth
        z.create_stack_template(lambda_arn, 'helloworld', True, True, None)
        parsable_template = json.loads(z.cf_template.to_json())
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
        # Authorizer with validation expression
        invocations_uri = 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/' + lambda_arn + '/invocations'
        z.create_stack_template(lambda_arn, 'helloworld', False, False, authorizer)
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
    #     bi = 'builtins.input'
    #     with mock.patch(bi, lambda prompt: next(input_generator)):
    #         zappa_cli = ZappaCLI()
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
            # Set up a core.Zappa mock and let us save some state about
            # domains and lambdas
            zappa_mock = mock.create_autospec(Zappa)
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests.py
    # We need to make the code more robust in this case and avoid the KeyError
    def test_zappa_core_deploy_lambda_alb_missing_cert_arn(self):
        kwargs = {
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests_async.py
        # And check the dispatching class got called correctly
        lambda_async_mock.assert_called_once()
        lambda_async_mock.assert_called_with(aws_region='us-east-1',
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\tests\tests_async_old.py
        # And check the dispatching class got called correctly
        lambda_async_mock.assert_called_once()
        lambda_async_mock.assert_called_with(aws_region='us-east-1',
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\asynchronous.py
    if not kwargs:  # Default Values
        service = 'lambda'
        lambda_function_name_arg = None
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\asynchronous.py
    else:  # Arguments were passed
        service = kwargs.get('service', 'lambda')
        lambda_function_name_arg = kwargs.get('remote_aws_lambda_function_name')
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
# We lower-case lambda package keys to match lower-cased keys in get_installed_packages()
lambda_packages = {package_name.lower(): val for package_name, val in lambda_packages_orig.items()}

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
                            # Related: https://github.com/Miserlou/Zappa/issues/855
                            lambda_version = lambda_packages[installed_package_name][self.runtime]['version']
                            print(" - %s==%s: Warning! Using precompiled lambda package version %s instead!" % (installed_package_name, installed_package_version, lambda_version, ))
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
                # This is a special case!
                # SQLite3 is part of the _system_ Python, not a package. Still, it lives in `lambda-packages`.
                # Everybody on Python3 gets it!
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # Related: https://github.com/Miserlou/Zappa/issues/800
        if package_version != lambda_package_details['version']:
            return False
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            # Related: https://github.com/Miserlou/Zappa/issues/1402
            versions_in_lambda = []
            versions = self.lambda_client.list_versions_by_function(FunctionName=function_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            # Delete older revisions if their number exceeds the specified limit
            for version in versions_in_lambda[::-1][num_revisions:]:
                self.lambda_client.delete_function(FunctionName=function_name,Qualifier=version)
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # https://github.com/Miserlou/Zappa/issues/987,  Related: https://github.com/Miserlou/Zappa/issues/765
        lambda_aws_config = self.lambda_client.get_function_configuration(FunctionName=function_name)
        if "Environment" in lambda_aws_config:
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            # Append keys that are remote but not in settings file
            for key, value in lambda_aws_environment_variables.items():
                if key not in aws_environment_variables:
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # Allow execute permissions from target group to lambda.
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Client.add_permission
        kwargs = dict(
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            # Locate the lambda ARN
            # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Client.get_function
            response = self.lambda_client.get_function(FunctionName=lambda_name)
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            # try erasing it with the older method
            for api in self.get_rest_apis(lambda_name):
                self.apigateway_client.delete_rest_api(
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # Now we need to add a policy to the IAM that allows cognito access
        result = self.create_event_permission(lambda_name,
                                              'cognito-idp.amazonaws.com',
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # and do not require event permissions. They do require additional permissions on the Lambda roles though.
        # http://docs.aws.amazon.com/lambda/latest/dg/lambda-api-permissions-ref.html
        pull_services = ['dynamodb', 'kinesis', 'sqs']
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # if default:
        #     lambda_arn = lambda_arn + ":$LATEST"

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
            #   - Else, use EventPattern
            #       - ex https://github.com/awslabs/aws-lambda-ddns-function

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
                    # Specific permissions are necessary for any trigger to work.
                    self.create_event_permission(lambda_name, 'events.amazonaws.com', rule_response['RuleArn'])

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\core.py
        # prefix scheduled event names with lambda name. So we can look them up later via the prefix.
        return Zappa.get_event_name(lambda_name, name)

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\handler.py
                    # Related: https://github.com/Miserlou/Zappa/issues/1715
                    # inputs/outputs for lambda loadbalancer
                    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\handler.py
                    # inputs/outputs for lambda loadbalancer
                    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html
                    is_elb_context = True
#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\handler.py
def lambda_handler(event, context):  # pragma: no cover
    return LambdaHandler.lambda_handler(event, context)

#########################################################################################
C:\Users\muvva\Desktop\testing\Zappa-master\zappa\utilities.py
    # This is slightly dirty, but necessary for using Kappa this way.
    funk.arn = lambda_arn
    if not dry:
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Connection stats
        collectors["connection"] = lambda: len(file_server.connections)
        collectors["connection_in"] = (
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Request stats
        collectors["file_bytes_recv|change"] = lambda: file_server.bytes_recv
        collectors["file_bytes_sent|change"] = lambda: file_server.bytes_sent
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Limit
        collectors["optional_limit"] = lambda: content_db.getOptionalLimitBytes()
        collectors["optional_used"] = lambda: content_db.getOptionalUsedBytes()
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Peers
        collectors["peer"] = lambda (peers): len(peers)
        collectors["peer_onion"] = lambda (peers): len([True for peer in peers if ".onion" in peer])
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Size
        collectors["size"] = lambda: sum([site.settings.get("size", 0) for site in sites.values()])
        collectors["size_optional"] = lambda: sum([site.settings.get("size_optional", 0) for site in sites.values()])
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Size
        site_collectors["site_size"] = lambda(site): site.settings.get("size", 0)
        site_collectors["site_size_optional"] = lambda(site): site.settings.get("size_optional", 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Data transfer
        site_collectors["site_bytes_recv|change"] = lambda(site): site.settings.get("bytes_recv", 0)
        site_collectors["site_bytes_sent|change"] = lambda(site): site.settings.get("bytes_sent", 0)
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Chart\ChartCollector.py
        # Peers
        site_collectors["site_peer"] = lambda(site): len(site.peers)
        site_collectors["site_peer_onion"] = lambda(site): len(
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\disabled-Bootstrapper\Test\TestBootstrapper.py
        # Test DB cleanup
        assert map(lambda row: row[0], bootstrapper_db.execute("SELECT address FROM peer").fetchall()) == [file_server.ip_external]  # 127.0.0.1 never get added to db

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\OptionalManager\OptionalManagerPlugin.py
    access_log = collections.defaultdict(dict)  # {site_id: {inner_path1: 1, inner_path2: 1...}}
    request_log = collections.defaultdict(lambda: collections.defaultdict(int))  # {site_id: {inner_path1: 1, inner_path2: 1...}}
    helper.timer(61, processAccessLog)
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\plugins\Sidebar\maxminddb\ipaddr.py
    # backwards compatibility
    IsRFC1918 = lambda self: self.is_private
    IsMulticast = lambda self: self.is_multicast
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Db\Db.py
        # Row for current json file if required
        if not data or filter(lambda dbmap: "to_keyvalue" in dbmap or "to_table" in dbmap, matched_maps):
            json_row = cur.getJsonRow(relative_path)
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Db\DbQuery.py
        parts = filter(None, parts)  # Remove empty parts
        parts = map(lambda s: s.strip(), parts)  # Remove whitespace
        return dict(zip(parts[0::2], parts[1::2]))
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\File\FileServer.py
            # Check sites integrity
            for site in sorted(self.sites.values(), key=lambda site: site.settings.get("modified", 0), reverse=True):
                if not site.settings["serving"]:
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    ints2octs = lambda s: ''.join([int2oct(x) for x in s])
    null = ''
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2ints = lambda s: [oct2int(x) for x in s]
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    str2octs = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2str = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    isOctetsType = lambda s: isinstance(s, str)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    isStringType = lambda s: isinstance(s, (str, unicode))
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    int2oct = lambda x: ints2octs((x,))
    null = ints2octs()
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    oct2int = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2ints = lambda x: x
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    str2octs = lambda x: x.encode('iso-8859-1')
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    octs2str = lambda x: x.decode('iso-8859-1')
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    isOctetsType = lambda s: isinstance(s, bytes)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\lib\pyasn1\compat\octets.py
    # noinspection PyPep8
    isStringType = lambda s: isinstance(s, str)
    # noinspection PyPep8
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Site\Site.py
            if check_modifications:  # Download failed, but check modifications if its succed later
                self.onFileDone.once(lambda file_name: self.checkModifications(0), "check_modifications")
            return False  # Could not download content.json
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Site\Site.py
            # Try to keep connections with more sites
            for peer in sorted(connected_peers, key=lambda peer: min(peer.connection.sites, 5)):
                if not peer.connection:
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Site\Site.py
        self.onFileStart.append(lambda inner_path: self.fileStarted())  # No parameters to make Noparallel batching working
        self.onFileDone.append(lambda inner_path: self.fileDone(inner_path))
        self.onFileFail.append(lambda inner_path: self.fileFailed(inner_path))
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.append(lambda: test_obj.increment("Called #1"))
        test_obj.onChanged.append(lambda: test_obj.increment("Called #2"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once"))
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.append(lambda: test_obj.increment("Called #2"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once"))

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        # Allow queue more than once
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #2"))
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #2"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #3"))
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #2"))
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #3"))

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        # Dont store more that one from same type
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1/1"), "type 1")
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1/2"), "type 1")
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1/1"), "type 1")
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1/2"), "type 1")
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #2"), "type 2")
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestEvent.py
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #1/2"), "type 1")
        test_obj.onChanged.once(lambda: test_obj.increment("Once test #2"), "type 2")

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestRateLimit.py
            gevent.spawn(lambda: RateLimit.call("counting", allowed_again=0.1, func=obj2.count)),  # Instant
            gevent.spawn(lambda: RateLimit.call("counting", allowed_again=0.1, func=obj2.count)),  # 0.1s delay
            gevent.spawn(lambda: RateLimit.call("counting", allowed_again=0.1, func=obj2.count))   # 0.2s delay
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Test\TestRateLimit.py
            gevent.spawn(lambda: RateLimit.call("counting", allowed_again=0.1, func=obj2.count)),  # 0.1s delay
            gevent.spawn(lambda: RateLimit.call("counting", allowed_again=0.1, func=obj2.count))   # 0.2s delay
        ]
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Ui\UiWebsocket.py
            # At the end display notification
            thread.link(lambda thread: self.cbSitePublish(to, self.site, thread, notification, callback=False))

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\util\Noparallel.py
                thread = gevent.spawn(func, *args, **kwargs)  # Spawning new thread
                thread.link(lambda thread: self.cleanup(key, thread))
                self.threads[key] = thread
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\util\RateLimit.py
        if not queue_db.get(event):  # Function call not queued yet
            thread = gevent.spawn_later(time_left, lambda: callQueue(event))  # Call this function later
            queue_db[event] = (func, args, kwargs, thread)
#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\util\UpnpPunch.py
    # Probably we looking for an ip starting with 192
    local_ips = sorted(local_ips, key=lambda a: a.startswith("192"), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Worker\WorkerManager.py
        # Sort tasks by priority and worker numbers
        self.tasks.sort(key=lambda task: task["priority"] - task["workers_num"] * 10, reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\ZeroNet-master\src\Worker\WorkerManager.py
        # Sort by ping
        peers.sort(key=lambda peer: peer.connection.last_ping_delay if peer.connection and len(peer.connection.waiting_requests) == 0 and peer.connection.connected else 9999)

#########################################################################################
C:\Users\muvva\Desktop\testing\zipline-master\tests\data\bundles\test_core.py
        # register but do not ingest data
        self.register('bundle', lambda *args: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\zipline-master\tests\test_algorithm.py
        # Verify that positions are empty for all dates.
        empty_positions = daily_stats.positions.map(lambda x: len(x) == 0)
        self.assertTrue(empty_positions.all())
#########################################################################################
C:\Users\muvva\Desktop\testing\zipline-master\zipline\pipeline\loaders\earnings_estimates.py
        # Get rid of any adjustments that happen outside of our date index.
        adjustments = list(filter(lambda x: dates[0] <= x[0] <= dates[-1],
                                  adjustments))
#########################################################################################
C:\Users\muvva\Desktop\testing\zipline-master\zipline\utils\cli.py
    # context manager that just return `it` when we enter it
    return CallbackManager(lambda it=it: it)

#########################################################################################
C:\Users\muvva\Desktop\testing\zipline-master\zipline\utils\events.py
            # Group by ISO year (0) and week (1)
            .groupby(sessions.map(lambda x: x.isocalendar()[0:2]))
            .nth(self.td_delta)
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\tools\lib\capitalization.py
# longer phrases will be ignored first.
IGNORED_PHRASES.sort(key=lambda regex: len(regex), reverse=True)

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\data_import\slack.py
        # the proper date order
        for message in sorted(messages_for_one_day, key=lambda m: m['ts']):
            yield message
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\actions.py
        # user is subscribed if we have to
        lambda: subscribed_to_stream(cast(UserProfile, user_profile), stream.id))

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\actions.py
        # which the below code needs to check for anyway.
        subscriber_map = defaultdict(lambda: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\bugdown\__init__.py
        # Get all URLs from the blob
        found_imgs = walk_tree(root, lambda e: e if e.tag == "img" else None)
        for img in found_imgs:
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\bugdown\__init__.py
        # Silence all the mentions inside blockquotes
        line = re.sub(self.mention_re, lambda m: "@_{}".format(m.group('match')), line)

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\bulk_create.py
    # for python 3.3 and later versions.
    streams_to_create.sort(key=lambda x: x.name)
    Stream.objects.bulk_create(streams_to_create)
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\cache_helpers.py
#
# The objects queries are put inside lambdas to prevent Django from
# doing any setup for things we're unlikely to use (without the lambda
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\cache_helpers.py
# The objects queries are put inside lambdas to prevent Django from
# doing any setup for things we're unlikely to use (without the lambda
# wrapper the below adds an extra 3ms or so to startup time for
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\cache_helpers.py
    #    'message': (message_fetch_objects, message_cache_items, 3600 * 24, 1000),
    'huddle': (lambda: Huddle.objects.select_related().all(), huddle_cache_items, 3600*24*7, 10000),
    'session': (lambda: Session.objects.all(), session_cache_items, 3600*24*7, 10000),
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\push_notifications.py
        quote_text_list = filter(None, quote_text.split('\n'))  # Remove empty lines
        quote_text = '\n'.join(map(lambda x: "> "+x, quote_text_list))
        quote_text += '\n'
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\topic.py
    # recent row.
    rows = sorted(rows, key=lambda tup: tup[1])

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\lib\users.py
        # the get_user cache.
        lambda email: 'bulk_get_users:' + user_profile_cache_key_id(email, realm_id),
        fetch_users_by_email,
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\models.py
            # more precise for real users.
            by_time = lambda row: row['dt']
            most_recent_info = max(info_rows, key=by_time)
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_events.py
        # Subscribe to a totally new stream, so it's just Hamlet on it
        action = lambda: self.subscribe(self.example_user("hamlet"), "test_stream")  # type: Callable[[], Any]
        events = self.do_test(action, event_types=["subscription", "realm_user"],
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_events.py
        # Add another user to that totally new stream
        action = lambda: self.subscribe(self.example_user("othello"), "test_stream")
        events = self.do_test(action,
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_events.py
        # Now remove the first user, to test the normal unsubscribe flow
        action = lambda: bulk_remove_subscriptions(
            [self.example_user('othello')],
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_events.py
        # Now remove the second user, to test the 'vacate' event flow
        action = lambda: bulk_remove_subscriptions(
            [self.example_user('hamlet')],
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_events.py
        # Now resubscribe a user, to make sure that works on a vacated stream
        action = lambda: self.subscribe(self.example_user("hamlet"), "test_stream")
        events = self.do_test(action,
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tests\test_service_bot_system.py
        # equivalent to the size of the stored object.
        storage.marshal = lambda obj: obj
        storage.demarshal = lambda obj: obj
#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tornado\application.py
                                   # Disable Tornado's own request logging, since we have our own
                                   log_function=lambda x: None)

#########################################################################################
C:\Users\muvva\Desktop\testing\zulip-master\zerver\tornado\event_queue.py
        # Make sure we dump event queues even if we exit via signal
        signal.signal(signal.SIGTERM, lambda signum, stack: sys.exit(1))
        tornado.autoreload.add_reload_hook(lambda: dump_event_queues(port))
#########################################################################################
